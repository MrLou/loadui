<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="Sample Project 3" id="7b859e58-fc93-42eb-8d52-0786d6ee0115" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con:property propagates="true" key="ProjectItem.statisticNumberOfAutosaves" type="java.lang.Long">5</con:property></con:properties><con:attributes><con:property key="miniature">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
</con:property><con:property key="gui.note.0">200;475;215;96;1. Virtual User Scenarios (VU Scenarios for short) is a container for components that describes a user behavior pattern, for example "Login, purchase and then logout".</con:property><con:property key="gui.note.1">608;200;442;67;This project introduces Virtual User Scenarios (VU Scenarios) and the soapUI Runner.</con:property><con:property key="gui.note.2">662;826;188;85;This Mock Server is just for the purpose of this sample. In real testing you would of course have a real server, outside of loadUI.</con:property><con:property key="gui.note.3">1382;467;236;161;2. VU Scenarios can be run separately or as a part of a project. They can also be cloned, distributed to agents and their execution can be scheduled.

Let's have a closer look at each of the Scenarios. Open a Scenario by double clicking its miniature view.</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="Mock Server" id="94cae46d-f3e6-4e79-823e-fd202dc75eba"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="projectFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="true" key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="mockService" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="path" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="port" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="addRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">903</con:property><con:property key="gui.layoutY">744</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:scene label="Virtual User Scenario" id="04f2f224-cd8c-4a72-aca9-ef886f500300" version="4"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="SceneItem.followProject" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="gui.layoutX">598</con:property><con:property key="gui.layoutY">401</con:property><con:property key="miniature">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
usH6RmQCAAAAAElFTkSuQmCC
</con:property><con:property key="gui.note.0">389;446;260;180;1. The most powerful Runner in loadUI is probably the soapUI Runner, which can run soapUI Testcases. If you don't know, soapUI is the sister program of loadUI, used for functional testing. It's a very powerful and supports a lot of protocols.

This means that you can easily load test your functional tests, or leverage the power of soapUI to create amazing load tests in loadUI.</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="3f3e4a2c-7b52-4499-8ff9-1f735b97f17e"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String">..\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">Sample Simple TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">Simple Login and Logout w. Properties Steps</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_valueToOverride_sessionId" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_valueToOverride_userName" type="java.lang.String"/><con:property propagates="true" key="_valueToOverride_password" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_valueToOverride_stateProp" type="java.lang.String">592</con:property><con:property propagates="true" key="_valueToOverride_State" type="java.lang.String">Disabled</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">692</con:property><con:property key="gui.layoutY">422</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="a02d942d-2554-4b21-944b-0ed429fbea81" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { value ->
	delay = Math.max( 1, (long)(milisecondsPerUnit/value) )
	schedule()
}
createProperty( 'unit', String, 'Sec' ) { value ->
	if ( value == "Sec" )
		milisecondsPerUnit = 1000000
	else if ( value == "Min" )
		milisecondsPerUnit = 60000000
	else if ( value == "Hour" )
		milisecondsPerUnit = 3600000000
	schedule()
}
onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

triggerBurst = {
	for( i in 1..burstSize.value )
	{
		trigger()
	}
}

future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = scheduleAtFixedRate( { triggerBurst() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			schedule()
		}
	}
}

onAction( "START" ) { schedule() }

onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label:'Burst size' ) 
}

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">10</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">17ec2491ac65e3eb7ecfb8fcbfecadc5</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">650</con:property><con:property key="gui.layoutY">200</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="a02d942d-2554-4b21-944b-0ed429fbea81/triggerTerminal" inputTerminalId="3f3e4a2c-7b52-4499-8ff9-1f735b97f17e/triggerTerminal"/></con:scene><con:scene label="Another VU Scenario" id="395d707d-ac0c-40db-8830-1a9f88b5f34a" version="20"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="SceneItem.followProject" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1000</con:property><con:property key="gui.layoutY">401</con:property><con:property key="gui.note.0">200;1039;200;150;</con:property><con:property key="miniature">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
IobH24VXAAAAAElFTkSuQmCC
</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="815b7b4c-6a83-4cc0-9ea3-e525afbb98d2"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String">..\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="testSuite" type="java.lang.String">Sample Simple TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String">Simple Login and Logout w. Properties Steps</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String">1=true,3=false,4=false,2=false</con:property><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_valueToOverride_stateProp" type="java.lang.String">592</con:property><con:property propagates="true" key="_valueToOverride_State" type="java.lang.String">Disabled</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">378</con:property><con:property key="gui.layoutY">390</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="4121ebfd-e730-4bf0-bb9f-fc4fdaa8ed57" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import com.eviware.loadui.api.events.ActionEvent
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent
import java.text.SimpleDateFormat

import com.eviware.loadui.api.summary.MutableSection

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

createProperty( 'maxRows', Long, 1000 ) { value ->
	myTableModel.maxRow = value
}
createProperty 'logFilePath', String
createProperty 'saveFile', Boolean, false
createProperty( 'follow', Boolean, false ) { value ->
	if( myTableModel.follow != value as Boolean ) myTableModel.follow = value
}
createProperty( 'enabledInDistMode', Boolean, false ) { value ->
	if( myTableModel.enabledInDistMode != value as Boolean ) myTableModel.enabledInDistMode = value
}
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false
createProperty 'formatTimestamps', Boolean, true
createProperty 'addHeaders', Boolean, false

def latestHeader

myTableModel = new LTableModel(1000, follow.value as Boolean, enabledInDistMode.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateProperties()
	}
});

String saveFileName = null

writer = null
def formater = new SimpleDateFormat("HH:mm:ss:SSS")
myTableModel.maxRow = maxRows.value

updateProperties = {
	follow.value = myTableModel.follow
	enabledInDistMode.value = myTableModel.enabledInDistMode
}

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	if(controller){
		message.keySet().each { k -> myTableModel.addColumn k }
		lastMsgDate = new Date();
		
		if ( formatTimestamps.value ){
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) 
					try
					{
						message.put(key, formater.format(new Date(value)) )
					} catch ( IllegalArgumentException e )
					{
						log.info("Failed to format Timestamp in a column whose name hinted about it containing a Timestamp")
					}
			}
		}

		result = myTableModel.addRow(message)
		if( result && saveFile.value && saveFileName != null) {
			if( writer == null ){
				writer = new CSVWriter(new FileWriter(saveFileName, appendSaveFile.value), (char) ',');
			}
			try {
				String[] header = myTableModel.header
				if(addHeaders.value && !Arrays.equals(latestHeader, header)){
					writer.writeNext(header)
					latestHeader = header
				}
				String[] entries = myTableModel.lastRow
				writer.writeNext(entries)
				writer.flush()
			} catch (Exception e) {
				e.printStackTrace()
			}
		}
	}
	else if( myTableModel.enabledInDistMode ){
		// on agent and enabled, so send message to controller
		send(controllerTerminal, message)
	}
}

onAction( "START" ) { buildFileName() }

onAction( "COMPLETE" ) {
	writer?.close()
	writer = null
}

onAction( "RESET" ) {
	myTableModel.reset()
	buildFileName()
}

buildFileName = {
	if( !saveFile.value ) {
		writer?.close()
		writer = null
		return
	}
	if( writer != null ) {
		return
	}
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath(filePath) ){
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn("Log file path wasn't specified properly. Try default path: [$filePath]")
		if( !validateLogFilePath(filePath) ){
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ){
		def f = new File(filePath)
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File(filePath).parentFile.mkdirs()
	saveFileName = filePath
}

getBaseLogDir = {
	def dir = System.getProperty("loadui.home")
	if(dir == null || dir.trim().length() == 0){
		dir = "."
	}
	return dir			
}
				
getDefaultLogFileName = {
	return getLabel().replaceAll(" ","")
}
				
validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path 
		// is correct is to try read and writing
		File temp = new File(filePath)
		temp.parentFile.mkdirs()
		if(!temp.exists()){
			FileOutputStream fos = new FileOutputStream(temp)
			fos.write([0])
			fos.close()
			temp.delete()
		}
		else{
			FileInputStream fis = new FileInputStream(temp)
			fis.read()
			fis.close()
		}
		return true
	}
	catch(Exception e){
		return false
	}	
}

addTimestampToFileName  = {name ->
	def ext = ""
	def ind = name.lastIndexOf(".")
	if( ind > -1 ){
		ext = name.substring(ind, name.length())
		name = name.substring(0, ind)
	}
	def timestamp = new Date().time
	if(name.length() > 0){
		name = "${name}-"
	}
	return "$name$timestamp$ext"
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', content: { myTableModel.rowCount } )
		node( label: 'Output File', content: { saveFileName ?: '-' } )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: logFilePath, label: 'Log File (Comma separated, relative to loadUI home dir)' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		property(property: formatTimestamps, label: 'Check to format timestamps(hh:mm:ss:ms)')
		property(property: addHeaders, label: 'Check to add headers to a file')
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">1000</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">b9de156dd298d47e5af2d32fcdd71cae</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">447</con:property><con:property key="gui.layoutY">973</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Condition" id="e5cf1d52-c7ac-4aa6-8d5e-9fd2ca7608a6" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Routes messages based on whether a condition is true or false.
 * 
 * @id com.eviware.Condition
 * @help http://www.loadui.org/Flow/condition-component.html
 * @category flow
 * @nonBlocking true
 */

import com.eviware.loadui.impl.layout.OptionsProviderImpl
import groovy.lang.GroovyShell
import groovy.lang.Binding

createOutgoing( 'trueOutput' )
trueOutput.label = 'True'
trueOutput.description = 'VUs that satisfy the condition'

createOutgoing( 'falseOutput' )
falseOutput.label = 'False'
falseOutput.description = 'VUs that do not satisfy the condition'

incomingTerminal.description = 'VUs to test condition on'

shell = null
script = null

//Properties
createProperty( 'advancedMode', Boolean, false ) {
	if( it ) {
		shell = new GroovyShell()
		parseScript()
	} else {
		shell = null
		script = null
		setInvalid( valueName.value == "Select value" )
	}
	redraw()
}
createProperty( 'condition', String ) {
	if( advancedMode.value ) parseScript()
}
createProperty( 'valueName', String, "Select value" )
createProperty( 'max', Long, 1000 )
createProperty( 'min', Long, 0 ) { value ->
	if(max.value &lt; value ) max.value = value
}

trueCount = 0
falseCount = 0

parseScript = {
	if( condition.value ) {
		try {
			script = shell.parse( condition.value )
			setInvalid( false )
		} catch( e ) {
			log.error( "Unable to parse condition: $condition.value", e )
			setInvalid( true )
		}
	} else {
		setInvalid( true )
	}
}

provider = new OptionsProviderImpl()

onAction( "RESET" ) { ->
	trueCount = 0
	falseCount = 0
}

onConnect = { outgoing, incoming ->
	if( incoming == incomingTerminal ) {
		redraw()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == incomingTerminal ) {
		if( !options().contains( valueName.value ) ) valueName.value = 'Select value'
		redraw()
	}
}

onSignature = { outgoing, signature ->
	if( !options().contains( valueName.value ) ) valueName.value = 'Select value'
	redraw()
}

onMessage = { incoming, outgoing, message ->
	def result = false
	if( advancedMode.value ) {
		try {
			script.binding = new Binding( new HashMap( message ) )
			result = script.run() as Boolean
		} catch( e ) {
			log.error( "Unable to parse condition: $condition.value", e )
			setInvalid( true )
		}
	} else {
		result = assertValue( message[valueName.value] )
	}
	if( result ) {
		trueCount++
		send( trueOutput, message )
	} else {
		falseCount++
		send( falseOutput, message )
	}
}

assertValue = { value ->
	if( !( value instanceof Number ) ) {
		try {
			value = Double.valueOf( String.toString( value ) )
		} catch( e ) {
			try {
				value = Long.valueOf( String.toString( value ) )
			} catch( e2 ) {
				return false
			}
		}
	}
	
	return min.value &lt;= value &amp;&amp; value &lt;= max.value
}

def options() {
	incomingTerminal.connections.collect( { it.outputTerminal.messageSignature.keySet() } ).flatten() as Set
}

redraw = {
	provider.options = options()

	layout {
		if( advancedMode.value ) {
			box( layout: 'insets 0, gap 33, wrap 1' ) {
				property( property: condition, label: 'Condition', constraints: 'w 221!' )
				property( property: advancedMode, label: 'Advanced Mode' )
			}
			separator( vertical: true )
			box( widget:'display', layout:'wrap 2', column: '40' ) {
				node( label:'True', content: { trueCount } )
				node( label:'False', content: { falseCount } )
				node( label:'Condition', content: { invalid ? 'Invalid' : 'OK' }, constraints: 'span 2' )
			}
		} else {
			box( layout: 'insets 0, gap 33, wrap 1' ) {
				property( property: valueName, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
				property( property: advancedMode, label: 'Advanced Mode' )
			}
			separator( vertical: true )
			property( property: min, label: 'Min', min: 0 )
			property( property: max, label: 'Max', min: 0 )
			separator( vertical: true )
			box( widget:'display', layout:'wrap 2', column: '40' ) {
				node( label:'True', content: { trueCount } )
				node( label:'False', content: { falseCount } )
				node( label:'Min', content: { min.value } )
				node( label:'Max', content: { max.value } )
			}
		}
	}
}

compactLayout {
	box( widget:'display', layout:'wrap 2', column: '40' ) {
		node( label:'True', content: { trueCount } )
		node( label:'False', content: { falseCount } )
	}
}

redraw()</con:property><con:property propagates="true" key="advancedMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="condition" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="valueName" type="java.lang.String">TimeTaken</con:property><con:property propagates="true" key="max" type="java.lang.Long">1000</con:property><con:property propagates="true" key="min" type="java.lang.Long">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Condition</con:property><con:property key="_digest">5f79fc4dfbea685b22bbb34bfd13796d</con:property><con:property key="_id">com.eviware.Condition</con:property><con:property key="_classLoader">com.eviware.Condition</con:property><con:property key="gui.layoutX">535</con:property><con:property key="gui.layoutY">738</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log (1)" id="8679db93-d381-4e97-a84d-c0a8e87246bd" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import com.eviware.loadui.api.events.ActionEvent
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent
import java.text.SimpleDateFormat

import com.eviware.loadui.api.summary.MutableSection

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

createProperty( 'maxRows', Long, 1000 ) { value ->
	myTableModel.maxRow = value
}
createProperty 'logFilePath', String
createProperty 'saveFile', Boolean, false
createProperty( 'follow', Boolean, false ) { value ->
	if( myTableModel.follow != value as Boolean ) myTableModel.follow = value
}
createProperty( 'enabledInDistMode', Boolean, false ) { value ->
	if( myTableModel.enabledInDistMode != value as Boolean ) myTableModel.enabledInDistMode = value
}
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false
createProperty 'formatTimestamps', Boolean, true
createProperty 'addHeaders', Boolean, false

def latestHeader

myTableModel = new LTableModel(1000, follow.value as Boolean, enabledInDistMode.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateProperties()
	}
});

String saveFileName = null

writer = null
def formater = new SimpleDateFormat("HH:mm:ss:SSS")
myTableModel.maxRow = maxRows.value

updateProperties = {
	follow.value = myTableModel.follow
	enabledInDistMode.value = myTableModel.enabledInDistMode
}

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	if(controller){
		message.keySet().each { k -> myTableModel.addColumn k }
		lastMsgDate = new Date();
		
		if ( formatTimestamps.value ){
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) 
					try
					{
						message.put(key, formater.format(new Date(value)) )
					} catch ( IllegalArgumentException e )
					{
						log.info("Failed to format Timestamp in a column whose name hinted about it containing a Timestamp")
					}
			}
		}

		result = myTableModel.addRow(message)
		if( result && saveFile.value && saveFileName != null) {
			if( writer == null ){
				writer = new CSVWriter(new FileWriter(saveFileName, appendSaveFile.value), (char) ',');
			}
			try {
				String[] header = myTableModel.header
				if(addHeaders.value && !Arrays.equals(latestHeader, header)){
					writer.writeNext(header)
					latestHeader = header
				}
				String[] entries = myTableModel.lastRow
				writer.writeNext(entries)
				writer.flush()
			} catch (Exception e) {
				e.printStackTrace()
			}
		}
	}
	else if( myTableModel.enabledInDistMode ){
		// on agent and enabled, so send message to controller
		send(controllerTerminal, message)
	}
}

onAction( "START" ) { buildFileName() }

onAction( "COMPLETE" ) {
	writer?.close()
	writer = null
}

onAction( "RESET" ) {
	myTableModel.reset()
	buildFileName()
}

buildFileName = {
	if( !saveFile.value ) {
		writer?.close()
		writer = null
		return
	}
	if( writer != null ) {
		return
	}
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath(filePath) ){
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn("Log file path wasn't specified properly. Try default path: [$filePath]")
		if( !validateLogFilePath(filePath) ){
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ){
		def f = new File(filePath)
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File(filePath).parentFile.mkdirs()
	saveFileName = filePath
}

getBaseLogDir = {
	def dir = System.getProperty("loadui.home")
	if(dir == null || dir.trim().length() == 0){
		dir = "."
	}
	return dir			
}
				
getDefaultLogFileName = {
	return getLabel().replaceAll(" ","")
}
				
validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path 
		// is correct is to try read and writing
		File temp = new File(filePath)
		temp.parentFile.mkdirs()
		if(!temp.exists()){
			FileOutputStream fos = new FileOutputStream(temp)
			fos.write([0])
			fos.close()
			temp.delete()
		}
		else{
			FileInputStream fis = new FileInputStream(temp)
			fis.read()
			fis.close()
		}
		return true
	}
	catch(Exception e){
		return false
	}	
}

addTimestampToFileName  = {name ->
	def ext = ""
	def ind = name.lastIndexOf(".")
	if( ind > -1 ){
		ext = name.substring(ind, name.length())
		name = name.substring(0, ind)
	}
	def timestamp = new Date().time
	if(name.length() > 0){
		name = "${name}-"
	}
	return "$name$timestamp$ext"
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', content: { myTableModel.rowCount } )
		node( label: 'Output File', content: { saveFileName ?: '-' } )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: logFilePath, label: 'Log File (Comma separated, relative to loadUI home dir)' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		property(property: formatTimestamps, label: 'Check to format timestamps(hh:mm:ss:ms)')
		property(property: addHeaders, label: 'Check to add headers to a file')
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">1000</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">b9de156dd298d47e5af2d32fcdd71cae</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">1110</con:property><con:property key="gui.layoutY">975</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="5e801850-4824-4b8a-ad67-54a882cc94da" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { value ->
	delay = Math.max( 1, (long)(milisecondsPerUnit/value) )
	schedule()
}
createProperty( 'unit', String, 'Sec' ) { value ->
	if ( value == "Sec" )
		milisecondsPerUnit = 1000000
	else if ( value == "Min" )
		milisecondsPerUnit = 60000000
	else if ( value == "Hour" )
		milisecondsPerUnit = 3600000000
	schedule()
}
onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

triggerBurst = {
	for( i in 1..burstSize.value )
	{
		trigger()
	}
}

future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = scheduleAtFixedRate( { triggerBurst() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			schedule()
		}
	}
}

onAction( "START" ) { schedule() }

onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label:'Burst size' ) 
}

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">1</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">17ec2491ac65e3eb7ecfb8fcbfecadc5</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">284</con:property><con:property key="gui.layoutY">200</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="815b7b4c-6a83-4cc0-9ea3-e525afbb98d2/resultTerminal" inputTerminalId="e5cf1d52-c7ac-4aa6-8d5e-9fd2ca7608a6/incomingTerminal"/><con:connection outputTerminalId="e5cf1d52-c7ac-4aa6-8d5e-9fd2ca7608a6/trueOutput" inputTerminalId="4121ebfd-e730-4bf0-bb9f-fc4fdaa8ed57/inputTerminal"/><con:connection outputTerminalId="e5cf1d52-c7ac-4aa6-8d5e-9fd2ca7608a6/falseOutput" inputTerminalId="8679db93-d381-4e97-a84d-c0a8e87246bd/inputTerminal"/><con:connection outputTerminalId="5e801850-4824-4b8a-ad67-54a882cc94da/triggerTerminal" inputTerminalId="815b7b4c-6a83-4cc0-9ea3-e525afbb98d2/triggerTerminal"/></con:scene><con:statistics><con:page title="General"/></con:statistics></con:loadui-project>