<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="Sample Project 1" id="d937694f-ede5-4f6c-a224-8c23ca4e433c" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con:property propagates="true" key="ProjectItem.statisticNumberOfAutosaves" type="java.lang.Long">5</con:property></con:properties><con:attributes><con:property key="miniature">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
rkJggg==
</con:property><con:property key="gui.note.0">202;343;239;164;1. The project setup consists of a Fixed Rate Generator (red component) sending trigger messages to a Web Page Runner (green component).

Run the test by clicking the circular play button in the menubar above. You will see that the Web Page Runner starts to send requests by looking at the numbers in its black display.</con:property><con:property key="gui.note.1">772;344;214;131;2. Now that the test is running, let's watch some statistics!

Click on the colorful icon in the right-most part of the menubar to open the Statistic Workbench (it will open in a new window).</con:property><con:property key="gui.note.2">772;542;217;152;3. In the new window that opened, double-click the CURRENT RUN icon to see live statistics from your load test.

In this sample project, a chart displaying the number of sent requests per second has already been created.</con:property><con:property key="gui.note.3">381;200;475;41;This is a very simple load test for you to play around with. It targets a local built-in server.</con:property><con:property key="gui.note.4">1025;345;210;199;4. Now, switch back to loadUI's main window and change the Rate knob on the Fixed Rate Generator to 20/sec. Do this by pressing down your mouse button on the knob and dragging the cursor up.

Notice how the line in the Statistics Workbench changes to 20 instantly. This means that the Web Page Runner is now requesting the web page 20 times per second.</con:property><con:property key="gui.note.5">834;877;240;79;This is the local built in server. It is just here for demo purposes. In real load testing you would want to use a "real" server.</con:property><con:property key="gui.statistics.view">statistics.manage</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="0a09befa-b9fa-48a9-b73a-87abf0fd1b71" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { schedule() }
createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">5</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">c7926addaeaab3d091fd733b87da44d4</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">484</con:property><con:property key="gui.layoutY">343</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="bf85d98f-4892-417e-988a-e4da4350db0a" category="runners"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an HTTP request
 * 
 * @id com.eviware.WebRunner
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1
 * @dependency org.apache.httpcomponents:httpclient:4.1.1
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.ReleasableUtils

import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap
import java.util.Map
import java.util.concurrent.TimeUnit

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext )
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotal = 50000
cm.defaultMaxPerRoute = 50000


//Properties
createProperty( 'url', String ) { ->
	validateUrl()
}
createProperty( 'outputBody', Boolean, false )

createProperty( 'readResponse', Boolean, false )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String )
createProperty( 'proxyPort', Long )
createProperty( 'proxyUsername', String )
proxyPassword = createProperty( '_proxyPassword', String )
authUsername = createProperty( '_authUsername', String )
authPassword = createProperty( '_authPassword', String )

http = new DefaultHttpClient( cm )

inlineUrlAuthUsername = null
inlineUrlAuthPassword = null
			
def runningSamples = ([] as Set).asSynchronized()
runAction = null

def dummyUrl = "http://GoSpamYourself.com"

validateUrl = {
	if( url.value && !( url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ) ) ) {
		url.value = "http://" + url.value
	}
	
	if( url.value =~ /https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/ ) url.value = dummyUrl
	
	// extract possible username and password from username:password@domain syntax
	matcher = url.value?.replace( "http://", "" ) =~ /([^:]+):([^@]+)@(.+)/
	if ( matcher ) {
		inlineUrlAuthUsername = matcher[0][1]
		inlineUrlAuthPassword = matcher[0][2]
	} else {
		inlineUrlAuthUsername = inlineUrlAuthPassword = null
	}
	updateAuth()
	
	try {
		new URI( url.value )
		setInvalid( !url.value || url.value == dummyUrl )
	} catch( e ) {
		setInvalid( true )
	}
	
	runAction?.enabled = !isInvalid()
}

updateProxy = {
	if( proxyHost.value?.trim() && proxyPort.value ) {
		HttpHost hcProxyHost = new HttpHost( proxyHost.value, (int)proxyPort.value, "http" )
		http.params.setParameter( ConnRoutePNames.DEFAULT_PROXY, hcProxyHost )
		
		if( proxyUsername.value?.trim() && proxyPassword.value ) {
			http.credentialsProvider.setCredentials(
				new AuthScope( proxyHost.value, (int)proxyPort.value ), 
				new UsernamePasswordCredentials( proxyUsername.value, proxyPassword.value )
			)
		} else {
			http.credentialsProvider.clear()
		}
	} else {
		http.params.setParameter( ConnRoutePNames.DEFAULT_PROXY, null )
	}
}

updateAuth = {
	def username = null
	def password = null
	if( inlineUrlAuthUsername && inlineUrlAuthPassword ) {
		username = inlineUrlAuthUsername
		password = inlineUrlAuthPassword
	} else if( authUsername.value?.trim() && authPassword.value?.trim() ) {
		username = authUsername.value
		password = authPassword.value
	}
	
	if( username && password ) {
		http.credentialsProvider.setCredentials(
			new AuthScope( AuthScope.ANY ), 
			new UsernamePasswordCredentials( username, password )
		)
	}
}

validateUrl()
updateProxy()

requestResetValue = 0
sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if( errorCodeList.value ) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for( code in assertionCodes ) {
					if( code.trim() == response.statusLine.statusCode.toString() ) {
						failedRequestCounter.increment()
						failureCounter.increment()
						break
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString( response.entity )
				
				if( contentLength < 0 ) {
					if( outputBody.value )
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString( response.entity ).length()
				}
				
				response.entity.consumeContent()
				
				if( !runningSamples.remove( get ) ) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException )
				throw e
			
			if( e instanceof IOException )
				log.warn( "IOException in {}: {}", label, e.message )
			else
				log.error( "Exception in $label:", e )
			
			get.abort()
			
			if ( !runningSamples.remove( get ) ) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			failedRequestCounter.increment()
			failureCounter.increment()
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	def numberOfRunning = 0
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		numberOfRunning = methods.size()
		runningSamples.clear()
		methods.each { if( !it.aborted ) it.abort() }
	}
	
	return numberOfRunning
}

onAction( "RESET" ) {
	requestResetValue = 0
	sampleResetValue = 0
	discardResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property in [ proxyHost, proxyPort, proxyUsername, proxyPassword, authUsername, authPassword ] ) {
			http.credentialsProvider.clear()
			updateProxy()
			updateAuth()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: {
			if( url.value != null && url.value.startsWith( "http" ) )
				java.awt.Desktop.desktop.browse( new java.net.URI( url.value ) )
		} )
		runAction = action( label:'Run Once', action: { triggerAction( 'SAMPLE' ) } )
		action( label:'Abort Running Pages', action: { triggerAction( 'CANCEL' ) } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', content: { requestCounter.get() - requestResetValue }, constraints:'w 50!' )
			node( label:'Running', content: { currentlyRunning }, constraints:'w 50!' )
			node( label:'Completed', content: { sampleCounter.get() - sampleResetValue }, constraints:'w 60!' )
			node( label:'Queued', content: { queueSize }, constraints:'w 50!' )
			node( label:'Discarded', content: { discardCounter.get() - discardResetValue }, constraints:'w 50!' )
			node( label:'Failed', content: { failureCounter.get() - failedResetValue }, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			requestResetValue = requestCounter.get()
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', content: { requestCounter.get() - requestResetValue }, constraints:'w 50!' )
		node( label:'Running', content: { currentlyRunning }, constraints:'w 50!' )
		node( label:'Completed', content: { sampleCounter.get() - sampleResetValue }, constraints:'w 60!' )
		node( label:'Queued', content: { queueSize }, constraints:'w 50!' )
		node( label:'Discarded', content: { discardCounter.get() - discardResetValue }, constraints:'w 50!' )
		node( label:'Failed', content: { failureCounter.get() - failedResetValue }, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: errorCodeList, label: 'Error Codes that Count as Failures', constraints:'w 200!')
	property( property: countDiscarded, label: 'Count Discarded Requests as Failed' )
}

settings( label: "Authentication" ) {
	property( property: authUsername, label: 'Username' )
	property( property: authPassword, widget: 'password', label: 'Password' )
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}
]]></con:property><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="url" type="java.lang.String">http://localhost:19396/mockServer</con:property><con:property propagates="true" key="outputBody" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="readResponse" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_authUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_authPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_digest">49e3b98e0b389c51dec908050eedd377</con:property><con:property key="_id">com.eviware.WebRunner</con:property><con:property key="_classLoader">com.eviware.WebRunner</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">575</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="Mock Server" id="99b4ef17-7f52-4d5f-9e1b-3b88d166c50e"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="projectFile" type="java.io.File">D:\workspace\loadui-installers\src\main\resources\samples\soapUIsample.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="true" key="projectRelativePath" type="java.lang.String">soapUIsample.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="mockService" type="java.lang.String">Simple MockService</con:property><con:property propagates="true" key="path" type="java.lang.String">/mockServer</con:property><con:property propagates="true" key="port" type="java.lang.String">19396</con:property><con:property propagates="true" key="addRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1112</con:property><con:property key="gui.layoutY">870</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="0a09befa-b9fa-48a9-b73a-87abf0fd1b71/triggerTerminal" inputTerminalId="bf85d98f-4892-417e-988a-e4da4350db0a/triggerTerminal"/><con:statistics><con:page title="General"><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Chart 1"><con:chart statisticHolder="bf85d98f-4892-417e-988a-e4da4350db0a"><con:attributes><con:property key="_CHART_segments">64:36:bf85d98f-4892-417e-988a-e4da4350db0a4:Sent10:PER_SECOND4:main</con:property><con:property key="_CHART__SEGMENT_36:bf85d98f-4892-417e-988a-e4da4350db0a4:Sent10:PER_SECOND4:main_color">#FF2100</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">SECONDS</con:property><con:property key="_CHARTGROUP_timeSpan">68250</con:property><con:property key="_CHARTGROUP_height">229.0</con:property><con:property key="_CHARTGROUP_position">54372</con:property></con:attributes></con:chartGroup></con:page></con:statistics></con:loadui-project>