<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="Sample Project 4" id="f1085d14-4b25-479e-a511-4c34971dd2fe" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/><con:property propagates="true" key="ProjectItem.statisticNumberOfAutosaves" type="java.lang.Long">5</con:property></con:properties><con:attributes><con:property key="miniature">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
</con:property><con:property key="gui.note.0">335;200;429;97;This is an example of a complex scenario, simulating realistic user behavior. Don't miss the preconfigured charts in the Statistics Workbench!

There's a video explaining this sample project at http://loadui.org/sample3</con:property><con:property key="gui.note.1">200;577;198;82;This is the local built in server. It is just here for demo purposes. In real load testing you would want to use a "real" server.</con:property><con:property key="gui.statistics.view">statistics.manage</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="Mock Server" id="399422fc-da33-47ee-8cce-e59b134058b0"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\Desktop\Sample Project\soapUIsample</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="true" key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">..\Desktop\Sample Project\soapUIsample</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Mock Service</con:property><con:property propagates="true" key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property propagates="true" key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property propagates="true" key="addRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">459</con:property><con:property key="gui.layoutY">537</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:scene label="Registered customers" id="354aa3a4-e22e-405d-bd8d-cb16d47d5c58" version="78"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="SceneItem.followProject" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="gui.layoutX">807</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.0">925;257;365;130;1. Users arrive randomly, with a mean of 2 per second and immediately Login.

The Login procedure is defined in a soapUI Project. It fetches sample users from a DataSource and Logins with a SOAP request. Finally, it persists the session-ID so that it can be used later on (e.g. for purchasing items).</con:property><con:property key="gui.note.1">570;695;156;88;2. Users then proceed to either Search (40% probability) or Logout (60% probability).</con:property><con:property key="gui.compact">false</con:property><con:property key="gui.note.2">598;1203;140;88;3. After searching for products, users may purchase them (30% probability).</con:property></con:attributes><con:addons/><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="Login" id="ff804401-3374-43c6-94ed-93d35d4e2a46"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">..\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sample Simple TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Simple Login and Logout w. Properties Steps</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_valueToOverride_sessionId" type="java.lang.String" xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_valueToOverride_userName" type="java.lang.String"/><con:property propagates="true" key="_valueToOverride_password" type="java.lang.String" xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">383</con:property><con:property key="gui.layoutY">254</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="baef5255-217e-420c-a3c1-f117b535a7a6" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @id com.eviware.Random
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
if ( unit.value == "Min" )
	msPerUnit = 60000
if ( unit.value == "Hour" )
	msPerUnit = 3600000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

random = new Random()
timer = new Timer(true)

enqueue = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		schedule( {
			trigger()
			enqueue()
		}, currentDelay.intValue(), TimeUnit.MILLISECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			cancelTasks()
		if (stateProperty.value)
			cancelTasks()
		if (event.property == type)
			redraw()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		enqueue()
	}
}

onAction( 'START' ) {
	cancelTasks()
	enqueue()
}

onAction( 'STOP' ) {
	cancelTasks()
}

//Layout
redraw = {
	layout { 
		property( property:rate, label:'Base Rate', min:0 ) 
		separator( vertical:true )
		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
		separator( vertical:true )
		
		node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
				images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
		
		separator( vertical:true )
		def isNotExponential = (type.value != 'Exponential')
		property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1, enabled: isNotExponential )
		separator( vertical:true )
		box( widget:'display', layout:'align center') {
			node( label:'Current rate', content: { "$rate.value / $unit.value" } )
			node( label:'Random', content: { "$factor.value %" } )
		}
	}
}
redraw()
println( "drawring asfasdf")
	
//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'Current rate', content: { "$rate.value / $unit.value" } )
		node( label: 'Random', content: { "$factor.value %" } )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if( running ) enqueue()
</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">2</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="type" type="java.lang.String">Exponential</con:property><con:property propagates="true" key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_digest">f5df27bea5d933e07aeb23e0207c5b8a</con:property><con:property key="_id">com.eviware.Random</con:property><con:property key="_classLoader">com.eviware.Random</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">200</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Search or Logout?" id="c82b3089-b96f-45e2-a016-0d7835ae252d" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[//
// Copyright 2011 SmartBear Software
//
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
//
// http://ec.europa.eu/idabc/eupl5
//
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
//

/**
 * Splits input to specified number of outputs
 *
 * @id com.eviware.Splitter
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */

//Here to support Splitters created in loadUI 1.0, remove in the future:
try { renameProperty( 'outputs', 'numOutputs' ) } catch( e ) {}

incomingTerminal.description = 'Recieved messages will be outputted in different output terminals.'

total = counters['total_output']
countDisplays = [:]
terminalProbabilities = [:]
latestChanged = [:]
resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
totalReset = 0
changesDueToPropagation = [:]

for( i=0; i < outgoingTerminalList.size(); i++ ) {
	countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
	println("creating prop probability" + i)
	initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
	println ("initialValue: $initialValue")
	terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
		if( oldVal != null && !wasChangedDueToPropagation( i ) )
		{
			println("trigger changed property 1!")
			for(c in changesDueToPropagation)
				println(c)
			
			compensateProbabilities( i, newVal - oldVal )
		}
	}
	latestChanged[i] = 0
}

def wasChangedDueToPropagation( propertyIndex ) {
	if ( changesDueToPropagation.containsKey( propertyIndex ) )
		return changesDueToPropagation.get( propertyIndex ) + 300 >  System.currentTimeMillis() 
	return false
}

def randomizeTerminal()
{
	 r = random.nextInt( 100 )
	 s = 0
	 for(entry in terminalProbabilities) {
		  p = entry.value.value
		  if( s <= r && s+p > r )
				return entry.key
		  s += p
	 }
	 return randomizeTerminal() //in case no terminal matched because of rounding errors, we try it again
}

def compensateProbabilities( changedProperty, diff ) {
	println( "size: " + terminalProbabilities.size() )
	
	isCompensatingProbabilities = true
	latestChanged[changedProperty] = System.currentTimeMillis()
	
	println( changedProperty )
	println( diff )
	
	while( diff > 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 0  }.collect{ it.value }.min() }.key
		
		for(l in latestChanged)
			println(l)
		for(t in terminalProbabilities)
			println(t)
			
		println( "indextoChange: "+indexToChange )
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( propertyToChange.value, diff )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value -= changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff -= changeSize
		
		println("Reduced property $indexToChange with $changeSize -- Remaining diff is $diff")
	}
	
	while( diff < 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 100  }.collect{ it.value }.min() }.key
		
		for(l in latestChanged)
			println(l)
		
		println( indexToChange )
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( 100 - propertyToChange.value, Math.abs(diff) )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value += changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff += changeSize
		
		println("Increased property $indexToChange with $changeSize -- Remaining diff is $diff")
	}
	println("done!")
}

createProperty( 'type', String, "Round-Robin" ) {
	refreshLayout()
}
createProperty( 'numOutputs', Integer, 1 ) { outputCount ->
	while( outgoingTerminalList.size() < outputCount ) {
		createOutgoing()
		def i = outgoingTerminalList.size() - 1
		
		countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
		
		initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
		println( outgoingTerminalList.size() )
		println ("initialValue: $initialValue")
		println("creating propaaa probability" + i)
		terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
			if( oldVal != null && !wasChangedDueToPropagation( i ) )
			{
				println("trigger changed property 2!")
				compensateProbabilities( i, newVal - oldVal )
			}
		}
		latestChanged[i] = 0
	}
	while( outgoingTerminalList.size() > outputCount ) {
		def i = outgoingTerminalList.size() - 1
		deleteOutgoing()
		countDisplays.remove( i )?.release()
		compensateProbabilities( i, terminalProbabilities[i].value * -1 )
		latestChanged.remove( i )
		deleteProperty( terminalProbabilities.remove( i )?.key )
	}
	
	refreshLayout()
}

random = new Random()
lastOutput = -1

onMessage = { incoming, outgoing, message ->
	if( type.value == "Round-Robin" ) lastOutput = (lastOutput + 1) % numOutputs.value
	else lastOutput = randomizeTerminal() //random.nextInt( numOutputs.value )
	send( outgoingTerminalList[lastOutput], message )
	counters["output_$lastOutput"].increment()
	total.increment()
}

onAction( "RESET" ) {
	lastOutput = -1
	resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	totalReset = 0
}

refreshLayout = {
	layout ( layout:'gap 10 5' ) {
		node( widget: 'selectorWidget', label: "Type", labels: [ "Round-Robin", "Random" ], default: type.value, selected: type )
		separator( vertical: true )
		node( widget: 'sliderWidget', property: numOutputs, constraints: 'center, w 270!' )
		separator( vertical: true )
		box( layout: 'wrap, ins 0' ) {
			box( widget: 'display',  constraints: 'w 100!' ) {
				node( label: 'Count', content: { total.get() - totalReset }, constraints: 'wrap' )
			}
//			action( label:'Clear', action: {
//				for( i in 0..9 ) resetValues[i] = counters["output_$i"].get()
//				totalReset = total.get()
//			}, constraints:'right' )
		}
		separator( vertical: false )
		box( layout: 'ins 0, center', constraints: 'span 5, w 498!' ) {
			def gap = (int)((249/numOutputs.value)-19)
			def moreThanOneTerminal = numOutputs.value > 1;
			for( i=0; i < outgoingTerminalList.size(); i++ ) {
				if( i != 0 ) separator( vertical: true )
				
				if( type.value == "Random" ) {
					property( property:terminalProbabilities[i], label:'%', min: 0, max: 100, step: 1, enabled:moreThanOneTerminal, layout: 'ins -15, center', constraints: "w 32!, gap "+gap+" "+gap )
				}
				else {
					box( widget: 'display', layout: 'ins -5, center', constraints: "w 32!, h 24!, gap "+gap+" "+gap ) {
						node( content: countDisplays[i], constraints: 'pad -6 -4' )
					}
				}
			}
		}
	}
}

compactLayout {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', content: { total.get() - totalReset } )
		node( label: 'Distribution', content: { (0..outgoingTerminalList.size() - 1).collect( { counters["output_$it"].get() - resetValues[it] } ).join( " " ) } )
	}
}]]></con:property><con:property propagates="true" key="type" type="java.lang.String">Random</con:property><con:property propagates="true" key="numOutputs" type="java.lang.Integer">2</con:property><con:property propagates="true" key="probability0" type="java.lang.Integer">40</con:property><con:property propagates="true" key="probability1" type="java.lang.Integer">60</con:property><con:property propagates="true" key="probability2" type="java.lang.Integer">40</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_digest">2d6bfb29076b58dde6b653e7a4ea4ed9</con:property><con:property key="_id">com.eviware.Splitter</con:property><con:property key="_classLoader">com.eviware.Splitter</con:property><con:property key="gui.layoutX">768</con:property><con:property key="gui.layoutY">653</con:property><con:property key="gui.compact">false</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="e0ce871b-6b25-4f5e-bb2e-4e255dfcf6ea" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @id com.eviware.Delay
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.model.SceneItem

final GAUSSIAN = 'Gaussian'
final UNIFORM = 'Uniform'
final EXPONENTIAL = 'Exponential'

random = new Random()
waitingCount = new AtomicLong()

displayNA = false
long waitTime = 0

createOutgoing( 'output' )
output.label = 'Delayed messages'
output.description = 'After being delayed, messages are outputted here.'

incomingTerminal.label = 'Messages to delay'
incomingTerminal.description = 'Recieved messages will be delayed before being outputted. Messages are processed independently in parallel (as opposed to being queued).'

createProperty('delay', Long, 0)
createProperty('selected', String, UNIFORM)
createProperty('randomDelay', Integer, 0)


workspace = canvas.project?.workspace
fixDisplay = { displayNA = canvas instanceof SceneItem &amp;&amp; !workspace?.localMode }

def workspaceListener = null
if( workspace != null ) {
	workspaceListener = addEventListener( workspace, PropertyEvent ) { event ->
		fixDisplay()
	}
}
fixDisplay()
 
onMessage = { incoming, outgoing, message ->
	waitingCount.incrementAndGet()
	def delayTime = delay.value 
	if( selected.value == GAUSSIAN ) {
		delayTime += ( random.nextGaussian() * ( randomDelay.value / 100 ) * delayTime * 0.3)
	} else if( selected.value == UNIFORM ) {
		delayTime += 2*( random.nextDouble() - 0.5 ) * delayTime * ( randomDelay.value / 100 )
	} else if( selected.value == EXPONENTIAL ) {
		delayTime *= -Math.log( 1 - random.nextDouble() )
	}
	
	waitTime = delayTime as Long
	message.put( 'actualDelay', waitTime )
	schedule( {
		send( output, message )
		waitingCount.decrementAndGet()
	}, waitTime, TimeUnit.MILLISECONDS )
 }
 
onRelease = {
	workspace?.removeEventListener( PropertyEvent, workspaceListener )
}

onAction( "COMPLETE" ) {
	cancelTasks()
	waitingCount.set( 0 )
}

onAction( "RESET" ) {
	waitTime = 0
	waitingCount.set( 0 )
	cancelTasks()
}

layout { 
	property( property:delay, label:"Delay\n(ms)", min:0, step:100, span:60000 ) 
	separator( vertical:true )
	node( widget:'selectorWidget', label:'Distribution', labels:[ UNIFORM, EXPONENTIAL, GAUSSIAN ],
		images:[ 'linear_shape.png', 'poisson_shape.png', 'gauss_shape.png' ], default: selected.value, selected: selected )
	property( property: randomDelay, label:'Random\n(%)', min:0, max: 100 )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Delay ', content: { displayNA ? 'n/a' : "$waitTime ms" }, constraints:'w 60!' )
		node( label:'Waiting ', content: { displayNA ? 'n/a' : waitingCount.get() }, constraints:'w 50!' )
	}
}
 
compactLayout {
	box( widget:'display' ) {
		node( label:'Delay ', content: { displayNA ? 'n/a' : "$waitTime ms" }, constraints:'w 60!' )
		node( label:'Waiting ', content: { displayNA ? 'n/a' : waitingCount.get() }, constraints:'w 50!' )
	}
}</con:property><con:property propagates="true" key="delay" type="java.lang.Long">8000</con:property><con:property propagates="true" key="selected" type="java.lang.String">Gaussian</con:property><con:property propagates="true" key="randomDelay" type="java.lang.Integer">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_digest">59a00e54134bd5915c32ab9f59041101</con:property><con:property key="_id">com.eviware.Delay</con:property><con:property key="_classLoader">com.eviware.Delay</con:property><con:property key="gui.layoutX">921</con:property><con:property key="gui.layoutY">466</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="Logout" id="ca41cdda-7cb2-40c7-9af8-6290fbf50dca"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">..\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sample Simple TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Simple Login and Logout w. Properties Steps</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_valueToOverride_sessionid" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1060</con:property><con:property key="gui.layoutY">931</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="Search" id="8992e9a8-ddf0-40fb-bc9a-552331914df6"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">..\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sample Simple TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Simple Login and Logout w. Properties Steps</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_valueToOverride_sessionId" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">837</con:property><con:property key="gui.layoutY">930</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="Purchase" id="4ac12507-0682-4b64-a66c-d0e414295726"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectFileworkingCopy" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Henrik\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="settingsFile" type="java.io.File">C:\Users\Henrik\soapui-settings.xml</con:property><con:property propagates="false" key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">..\soapUI-Tutorials\sample-soapui-project.xml</con:property><con:property propagates="true" key="useProjectRelativePath" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Sample Simple TestSuite</con:property><con:property propagates="true" key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Simple Login and Logout w. Properties Steps</con:property><con:property propagates="true" key="raiseError" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="outputTestCaseProperties" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property propagates="true" key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property propagates="true" key="closeConnectionsAfterRequest" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="disabledTestSteps" type="java.lang.String"/><con:property propagates="true" key="disableSoapuiAssertions" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="_valueToOverride_sessionId" type="java.lang.String"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1156</con:property><con:property key="gui.layoutY">1329</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5f830135-39a0-4b5e-9950-a9fc04d83455" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2011 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @id com.eviware.Delay
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.model.SceneItem

final GAUSSIAN = 'Gaussian'
final UNIFORM = 'Uniform'
final EXPONENTIAL = 'Exponential'

random = new Random()
waitingCount = new AtomicLong()

displayNA = false
long waitTime = 0

createOutgoing( 'output' )
output.label = 'Delayed messages'
output.description = 'After being delayed, messages are outputted here.'

incomingTerminal.label = 'Messages to delay'
incomingTerminal.description = 'Recieved messages will be delayed before being outputted. Messages are processed independently in parallel (as opposed to being queued).'

createProperty('delay', Long, 0)
createProperty('selected', String, UNIFORM)
createProperty('randomDelay', Integer, 0)


workspace = canvas.project?.workspace
fixDisplay = { displayNA = canvas instanceof SceneItem &amp;&amp; !workspace?.localMode }

def workspaceListener = null
if( workspace != null ) {
	workspaceListener = addEventListener( workspace, PropertyEvent ) { event ->
		fixDisplay()
	}
}
fixDisplay()
 
onMessage = { incoming, outgoing, message ->
	waitingCount.incrementAndGet()
	def delayTime = delay.value 
	if( selected.value == GAUSSIAN ) {
		delayTime += ( random.nextGaussian() * ( randomDelay.value / 100 ) * delayTime * 0.3)
	} else if( selected.value == UNIFORM ) {
		delayTime += 2*( random.nextDouble() - 0.5 ) * delayTime * ( randomDelay.value / 100 )
	} else if( selected.value == EXPONENTIAL ) {
		delayTime *= -Math.log( 1 - random.nextDouble() )
	}
	
	waitTime = delayTime as Long
	message.put( 'actualDelay', waitTime )
	schedule( {
		send( output, message )
		waitingCount.decrementAndGet()
	}, waitTime, TimeUnit.MILLISECONDS )
 }
 
onRelease = {
	workspace?.removeEventListener( PropertyEvent, workspaceListener )
}

onAction( "COMPLETE" ) {
	cancelTasks()
	waitingCount.set( 0 )
}

onAction( "RESET" ) {
	waitTime = 0
	waitingCount.set( 0 )
	cancelTasks()
}

layout { 
	property( property:delay, label:"Delay\n(ms)", min:0, step:100, span:60000 ) 
	separator( vertical:true )
	node( widget:'selectorWidget', label:'Distribution', labels:[ UNIFORM, EXPONENTIAL, GAUSSIAN ],
		images:[ 'linear_shape.png', 'poisson_shape.png', 'gauss_shape.png' ], default: selected.value, selected: selected )
	property( property: randomDelay, label:'Random\n(%)', min:0, max: 100 )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Delay ', content: { displayNA ? 'n/a' : "$waitTime ms" }, constraints:'w 60!' )
		node( label:'Waiting ', content: { displayNA ? 'n/a' : waitingCount.get() }, constraints:'w 50!' )
	}
}
 
compactLayout {
	box( widget:'display' ) {
		node( label:'Delay ', content: { displayNA ? 'n/a' : "$waitTime ms" }, constraints:'w 60!' )
		node( label:'Waiting ', content: { displayNA ? 'n/a' : waitingCount.get() }, constraints:'w 50!' )
	}
}</con:property><con:property propagates="true" key="delay" type="java.lang.Long">12000</con:property><con:property propagates="true" key="selected" type="java.lang.String">Uniform</con:property><con:property propagates="true" key="randomDelay" type="java.lang.Integer">88</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_digest">59a00e54134bd5915c32ab9f59041101</con:property><con:property key="_id">com.eviware.Delay</con:property><con:property key="_classLoader">com.eviware.Delay</con:property><con:property key="gui.layoutX">789</con:property><con:property key="gui.layoutY">1204</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Purchase?" id="467485c0-26b1-4341-9766-79455fdf4811" category="flow"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[//
// Copyright 2011 SmartBear Software
//
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
//
// http://ec.europa.eu/idabc/eupl5
//
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
//

/**
 * Splits input to specified number of outputs
 *
 * @id com.eviware.Splitter
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */

//Here to support Splitters created in loadUI 1.0, remove in the future:
try { renameProperty( 'outputs', 'numOutputs' ) } catch( e ) {}

incomingTerminal.description = 'Recieved messages will be outputted in different output terminals.'

total = counters['total_output']
countDisplays = [:]
terminalProbabilities = [:]
latestChanged = [:]
resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
totalReset = 0
changesDueToPropagation = [:]

for( i=0; i < outgoingTerminalList.size(); i++ ) {
	countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
	println("creating prop probability" + i)
	initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
	println ("initialValue: $initialValue")
	terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
		if( oldVal != null && !wasChangedDueToPropagation( i ) )
		{
			println("trigger changed property 1!")
			for(c in changesDueToPropagation)
				println(c)
			
			compensateProbabilities( i, newVal - oldVal )
		}
	}
	latestChanged[i] = 0
}

def wasChangedDueToPropagation( propertyIndex ) {
	if ( changesDueToPropagation.containsKey( propertyIndex ) )
		return changesDueToPropagation.get( propertyIndex ) + 300 >  System.currentTimeMillis() 
	return false
}

def randomizeTerminal()
{
	 r = random.nextInt( 100 )
	 s = 0
	 for(entry in terminalProbabilities) {
		  p = entry.value.value
		  if( s <= r && s+p > r )
				return entry.key
		  s += p
	 }
	 return randomizeTerminal() //in case no terminal matched because of rounding errors, we try it again
}

def compensateProbabilities( changedProperty, diff ) {
	println( "size: " + terminalProbabilities.size() )
	
	isCompensatingProbabilities = true
	latestChanged[changedProperty] = System.currentTimeMillis()
	
	println( changedProperty )
	println( diff )
	
	while( diff > 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 0  }.collect{ it.value }.min() }.key
		
		for(l in latestChanged)
			println(l)
		for(t in terminalProbabilities)
			println(t)
			
		println( "indextoChange: "+indexToChange )
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( propertyToChange.value, diff )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value -= changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff -= changeSize
		
		println("Reduced property $indexToChange with $changeSize -- Remaining diff is $diff")
	}
	
	while( diff < 0 )
	{
		indexToChange = latestChanged.find{ it.value == latestChanged.findAll{ terminalProbabilities[it.key].value != 100  }.collect{ it.value }.min() }.key
		
		for(l in latestChanged)
			println(l)
		
		println( indexToChange )
		
		propertyToChange = terminalProbabilities[indexToChange]
		
		changeSize = Math.min( 100 - propertyToChange.value, Math.abs(diff) )
		
		if( changeSize == 0 )
			break
		
		propertyToChange.value += changeSize
		changesDueToPropagation[indexToChange] = System.currentTimeMillis()
		diff += changeSize
		
		println("Increased property $indexToChange with $changeSize -- Remaining diff is $diff")
	}
	println("done!")
}

createProperty( 'type', String, "Round-Robin" ) {
	refreshLayout()
}
createProperty( 'numOutputs', Integer, 1 ) { outputCount ->
	while( outgoingTerminalList.size() < outputCount ) {
		createOutgoing()
		def i = outgoingTerminalList.size() - 1
		
		countDisplays[i] = { counters["output_$i"].get() - resetValues[i] }
		
		initialValue = outgoingTerminalList.size() > 1 ? 0 : 100
		println( outgoingTerminalList.size() )
		println ("initialValue: $initialValue")
		println("creating propaaa probability" + i)
		terminalProbabilities[i] = createProperty( 'probability' + i, Integer, initialValue ) { newVal, oldVal ->
			if( oldVal != null && !wasChangedDueToPropagation( i ) )
			{
				println("trigger changed property 2!")
				compensateProbabilities( i, newVal - oldVal )
			}
		}
		latestChanged[i] = 0
	}
	while( outgoingTerminalList.size() > outputCount ) {
		def i = outgoingTerminalList.size() - 1
		deleteOutgoing()
		countDisplays.remove( i )?.release()
		compensateProbabilities( i, terminalProbabilities[i].value * -1 )
		latestChanged.remove( i )
		deleteProperty( terminalProbabilities.remove( i )?.key )
	}
	
	refreshLayout()
}

random = new Random()
lastOutput = -1

onMessage = { incoming, outgoing, message ->
	if( type.value == "Round-Robin" ) lastOutput = (lastOutput + 1) % numOutputs.value
	else lastOutput = randomizeTerminal() //random.nextInt( numOutputs.value )
	send( outgoingTerminalList[lastOutput], message )
	counters["output_$lastOutput"].increment()
	total.increment()
}

onAction( "RESET" ) {
	lastOutput = -1
	resetValues = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	totalReset = 0
}

refreshLayout = {
	layout ( layout:'gap 10 5' ) {
		node( widget: 'selectorWidget', label: "Type", labels: [ "Round-Robin", "Random" ], default: type.value, selected: type )
		separator( vertical: true )
		node( widget: 'sliderWidget', property: numOutputs, constraints: 'center, w 270!' )
		separator( vertical: true )
		box( layout: 'wrap, ins 0' ) {
			box( widget: 'display',  constraints: 'w 100!' ) {
				node( label: 'Count', content: { total.get() - totalReset }, constraints: 'wrap' )
			}
//			action( label:'Clear', action: {
//				for( i in 0..9 ) resetValues[i] = counters["output_$i"].get()
//				totalReset = total.get()
//			}, constraints:'right' )
		}
		separator( vertical: false )
		box( layout: 'ins 0, center', constraints: 'span 5, w 498!' ) {
			def gap = (int)((249/numOutputs.value)-19)
			def moreThanOneTerminal = numOutputs.value > 1;
			for( i=0; i < outgoingTerminalList.size(); i++ ) {
				if( i != 0 ) separator( vertical: true )
				
				if( type.value == "Random" ) {
					property( property:terminalProbabilities[i], label:'%', min: 0, max: 100, step: 1, enabled:moreThanOneTerminal, layout: 'ins -15, center', constraints: "w 32!, gap "+gap+" "+gap )
				}
				else {
					box( widget: 'display', layout: 'ins -5, center', constraints: "w 32!, h 24!, gap "+gap+" "+gap ) {
						node( content: countDisplays[i], constraints: 'pad -6 -4' )
					}
				}
			}
		}
	}
}

compactLayout {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', content: { total.get() - totalReset } )
		node( label: 'Distribution', content: { (0..outgoingTerminalList.size() - 1).collect( { counters["output_$it"].get() - resetValues[it] } ).join( " " ) } )
	}
}]]></con:property><con:property propagates="true" key="type" type="java.lang.String">Random</con:property><con:property propagates="true" key="numOutputs" type="java.lang.Integer">2</con:property><con:property propagates="true" key="probability0" type="java.lang.Integer">70</con:property><con:property propagates="true" key="probability1" type="java.lang.Integer">30</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_digest">2d6bfb29076b58dde6b653e7a4ea4ed9</con:property><con:property key="_id">com.eviware.Splitter</con:property><con:property key="_classLoader">com.eviware.Splitter</con:property><con:property key="gui.layoutX">1002</con:property><con:property key="gui.layoutY">1262</con:property><con:property key="gui.compact">true</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="e0ce871b-6b25-4f5e-bb2e-4e255dfcf6ea/output" inputTerminalId="c82b3089-b96f-45e2-a016-0d7835ae252d/incomingTerminal"/><con:connection outputTerminalId="8992e9a8-ddf0-40fb-bc9a-552331914df6/resultTerminal" inputTerminalId="5f830135-39a0-4b5e-9950-a9fc04d83455/incomingTerminal"/><con:connection outputTerminalId="5f830135-39a0-4b5e-9950-a9fc04d83455/output" inputTerminalId="467485c0-26b1-4341-9766-79455fdf4811/incomingTerminal"/><con:connection outputTerminalId="467485c0-26b1-4341-9766-79455fdf4811/outgoingTerminal 2" inputTerminalId="4ac12507-0682-4b64-a66c-d0e414295726/triggerTerminal"/><con:connection outputTerminalId="467485c0-26b1-4341-9766-79455fdf4811/outgoingTerminal 1" inputTerminalId="c82b3089-b96f-45e2-a016-0d7835ae252d/incomingTerminal"/><con:connection outputTerminalId="baef5255-217e-420c-a3c1-f117b535a7a6/triggerTerminal" inputTerminalId="ff804401-3374-43c6-94ed-93d35d4e2a46/triggerTerminal"/><con:connection outputTerminalId="ff804401-3374-43c6-94ed-93d35d4e2a46/resultTerminal" inputTerminalId="e0ce871b-6b25-4f5e-bb2e-4e255dfcf6ea/incomingTerminal"/><con:connection outputTerminalId="4ac12507-0682-4b64-a66c-d0e414295726/resultTerminal" inputTerminalId="e0ce871b-6b25-4f5e-bb2e-4e255dfcf6ea/incomingTerminal"/><con:connection outputTerminalId="c82b3089-b96f-45e2-a016-0d7835ae252d/outgoingTerminal 1" inputTerminalId="8992e9a8-ddf0-40fb-bc9a-552331914df6/triggerTerminal"/><con:connection outputTerminalId="c82b3089-b96f-45e2-a016-0d7835ae252d/outgoingTerminal 2" inputTerminalId="ca41cdda-7cb2-40c7-9af8-6290fbf50dca/triggerTerminal"/></con:scene><con:statistics><con:page title="General"><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Transactions Per Second"><con:chart statisticHolder="ff804401-3374-43c6-94ed-93d35d4e2a46"><con:attributes><con:property key="_CHART_segments">63:36:ff804401-3374-43c6-94ed-93d35d4e2a4610:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:ff804401-3374-43c6-94ed-93d35d4e2a4610:Throughput3:TPS4:main_color">#FF2100</con:property></con:attributes></con:chart><con:chart statisticHolder="8992e9a8-ddf0-40fb-bc9a-552331914df6"><con:attributes><con:property key="_CHART_segments">63:36:8992e9a8-ddf0-40fb-bc9a-552331914df610:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:8992e9a8-ddf0-40fb-bc9a-552331914df610:Throughput3:TPS4:main_color">#FF7B00</con:property></con:attributes></con:chart><con:chart statisticHolder="4ac12507-0682-4b64-a66c-d0e414295726"><con:attributes><con:property key="_CHART_segments">63:36:4ac12507-0682-4b64-a66c-d0e41429572610:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:4ac12507-0682-4b64-a66c-d0e41429572610:Throughput3:TPS4:main_color">#00B700</con:property></con:attributes></con:chart><con:chart statisticHolder="ca41cdda-7cb2-40c7-9af8-6290fbf50dca"><con:attributes><con:property key="_CHART_segments">63:36:ca41cdda-7cb2-40c7-9af8-6290fbf50dca10:Throughput3:TPS4:main</con:property><con:property key="_CHART__SEGMENT_36:ca41cdda-7cb2-40c7-9af8-6290fbf50dca10:Throughput3:TPS4:main_color">#00B2D2</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">ALL</con:property><con:property key="_CHARTGROUP_timeSpan">-410000</con:property><con:property key="_CHARTGROUP_position">206026</con:property></con:attributes></con:chartGroup><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Response Times (ms)"><con:chart statisticHolder="ff804401-3374-43c6-94ed-93d35d4e2a46"><con:attributes><con:property key="_CHART_saved">true</con:property><con:property key="_CHART_zoomLevel">MINUTES</con:property><con:property key="_CHART_timeSpan">96000</con:property><con:property key="_CHART_position">345008</con:property><con:property key="_CHART_height">163.0</con:property><con:property key="_CHART_segments">67:36:ff804401-3374-43c6-94ed-93d35d4e2a4610:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:ff804401-3374-43c6-94ed-93d35d4e2a4610:Time Taken7:AVERAGE4:main_color">#FF2100</con:property></con:attributes></con:chart><con:chart statisticHolder="8992e9a8-ddf0-40fb-bc9a-552331914df6"><con:attributes><con:property key="_CHART_segments">67:36:8992e9a8-ddf0-40fb-bc9a-552331914df610:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:8992e9a8-ddf0-40fb-bc9a-552331914df610:Time Taken7:AVERAGE4:main_color">#FF7B00</con:property></con:attributes></con:chart><con:chart statisticHolder="4ac12507-0682-4b64-a66c-d0e414295726"><con:attributes><con:property key="_CHART_segments">67:36:4ac12507-0682-4b64-a66c-d0e41429572610:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:4ac12507-0682-4b64-a66c-d0e41429572610:Time Taken7:AVERAGE4:main_color">#00B700</con:property></con:attributes></con:chart><con:chart statisticHolder="ca41cdda-7cb2-40c7-9af8-6290fbf50dca"><con:attributes><con:property key="_CHART_segments">67:36:ca41cdda-7cb2-40c7-9af8-6290fbf50dca10:Time Taken7:AVERAGE4:main</con:property><con:property key="_CHART__SEGMENT_36:ca41cdda-7cb2-40c7-9af8-6290fbf50dca10:Time Taken7:AVERAGE4:main_color">#00B2D2</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">ALL</con:property><con:property key="_CHARTGROUP_timeSpan">-623000</con:property><con:property key="_CHARTGROUP_position">570172</con:property><con:property key="expand">none</con:property><con:property key="_CHARTGROUP_follow">true</con:property></con:attributes></con:chartGroup></con:page></con:statistics></con:loadui-project>