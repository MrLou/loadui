<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="SampleProject" id="d119b449-df9e-4d99-97c7-a8164d9230db" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property key="ModelItem.reportFolder" type="java.lang.String"/><con:property key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="gui.note.0">200;208;220;273;1. Getting Started
------------------------------------------------
This is a simple Web LoadTest that uses a soapUI MockService as its target. It illustrates the basic Generator -> Runner -> Analysis concept of loadUI components

Double-click the TestCase and run it to see what we're talking about!</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.1">205;632;200;150;2. Assertions and Logging
-------------------------------------
This TestCase extends the first by adding a couple of assertions and a TableLog to catch failed responses. </con:property><con:property key="gui.note.2">997;627;263;153;4. Controlling Flow 
-------------------------------------
This TestCase shows how flow-control components can be used to combine multiple runners for creating complex Load Scenarios. It also introduces the soapUI Runner for running a soapUI TestCase as a part of your LoadTest</con:property><con:property key="gui.note.3">1003;206;265;173;3. Schedulers and Generators
---------------------------------------
This TestCase shows how multiple generators can be combined within a LoadTest to generate varying load over time. Schedulers are used to add bursts of simulated Load</con:property></con:attributes><con:scene label="Simple Web LoadTest" id="f53a7146-d347-4f03-81d7-bfff0caa41a0" version="11"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">488</con:property><con:property key="gui.layoutY">202</con:property><con:property key="gui.note.0">200;407;252;75;This FixedRate runner is configued to issue 10 request triggers per second</con:property><con:property key="gui.note.1">200;637;224;150;The WebPage Runner issues a request to the specified web page address each time the FixedRate generator sends a trigger to it. 

The display to the right shows ongoing statistics</con:property><con:property key="gui.note.2">201;922;222;305;The statistics component is connected to the output of the Web Page Runner which outputs the response-time for each issues request. 

Some thing to try:
- openthe settings dialog and select which values you want to show
- try minimizing the component (with the top-right [-] button)
- try increasing or decreasing the load generated by the FixedRate trigger (by turning the knob) to see how the statistics change

</con:property><con:property key="gui.note.3">1241;627;350;100;The MockService is used in this tutorial to have something to test against . It is started when the LoadTest starts and the number of Requests will be the same as the Requests sent by the WebPage Runner</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">395;200;966;109;This is a simple Web LoadTest showing you how to connect a basic Generator -> Runner -> Analysis LoadTest. 

Make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar (Next to the "TestCase" menu). You will see the WebPage Runner starting to send requests and statistics being displayed in the Statistics Component. 

This LoadTest has no configured limit, it will run until you stop it manually with the Stop button</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="0b1546d7-feeb-4d93-b3c9-f6ac151594fc" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">533</con:property><con:property key="gui.layoutY">626</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="2cb44449-032c-4163-8408-e5b61bce2d3f" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">677</con:property><con:property key="gui.layoutY">395</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="7c508081-aa40-49c4-8722-246670b4a417" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">583</con:property><con:property key="gui.layoutY">919</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="f01e8c30-2fd1-417c-87bf-f8c3ae153c4b"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1205</con:property><con:property key="gui.layoutY">809</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="2cb44449-032c-4163-8408-e5b61bce2d3f/triggerTerminal" inputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/triggerTerminal"/><con:connection outputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/resultTerminal" inputTerminalId="7c508081-aa40-49c4-8722-246670b4a417/inputTerminal"/></con:scene><con:scene label="Complex Load Generation" id="234ea2c5-c94b-4e44-aeae-bd37cd09069b" version="19"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1325</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
</con:property><con:property key="limits">Time=600;</con:property><con:property key="gui.note.0">228;402;352;65;The first scheduler starts a Ramp Generator that will ramp from 0 to 100 req  / sec over the first 2 minutes of the LoadTest</con:property><con:property key="gui.note.1">742;390;341;87;Once the Ramp-up is finished, a Random Load Generator is started for the remains of the Test, which will generate a base load fo 100 requests / sec with Gaussian random distribution</con:property><con:property key="gui.note.2">1206;396;448;75;This schduler will add an additional load of 100 req / sec every 10 seconds at the start of each minute. The scheduler will itself be started at the same time as the random generator.</con:property><con:property key="gui.note.3">508;200;798;82;This TestCase shows how to use schedulers in combination with Generators to generate varying load over time: it first Ramps from 0 to 100 requests / sec over the first two minutes, then maintains a randomized base load with reoccuring Burst of requests for the rest of the Test.

The TestCase has its execution limit set to 10 minutes (see toolbar above)</con:property><con:property key="gui.note.4">200;1268;315;114;All Generators are configured to trigger the same Web Page Runner, but you could just as well trigger different ones. 

Its output goes to a standard stastics component as usual</con:property><con:property key="gui.note.5">1280;1384;420;58;Out trustworthy soapUI MockService is once again used as a standin for a real service.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="133d26ad-1f1d-44b0-849c-c9dc31549d48" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">642</con:property><con:property key="gui.layoutY">1244</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="e6588efe-e0c8-463b-b604-398edb7881d5" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">1305</con:property><con:property key="gui.layoutY">911</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="d9d3b5d3-00e3-4654-b75f-4276c0135340" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )
direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

display = new DelayedFormattedString( '%d %s', 500, currentRate.longValue(), direction )
scheduled = false
future = null

onRelease = {  display.release() }

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
		if (start.value != 0) {
			if (msPerUnit/start.value > period.value * 1000) {
				targetReached = true
				currentRate = end.value
			}
		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	display.setArgs( currentRate.longValue(), direction )
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			else 
				currentDelay = 1 //Handling edge cases
		} 
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			display.setArgs( currentRate.longValue(), direction )
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		display.setArgs( currentRate.longValue(), direction )
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
		started = false;
		scheduled = false;
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	if ( event.key == "COMPLETE" ) {
		reset()
	}
}


//Layout
layout  { 
	property( property:start, label:'Start', min:0 ) 
	property( property:end, label:'End', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', fString:display, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="start" type="java.lang.Long">0</con:property><con:property key="end" type="java.lang.Long">100</con:property><con:property key="period" type="java.lang.Long">120</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Ramp.groovy</con:property><con:property key="_digest">becdfee00487f8aa9960b15f779e4ef2</con:property><con:property key="gui.layoutX">229</con:property><con:property key="gui.layoutY">906</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

display = new DelayedFormattedString( '%d/%s', 200, rate.value, unit.value )
randomDisplay = new DelayedFormattedString( '%d %s', 200, factor.value, "%" )

random = new Random()

timer = new Timer(true)

future = null

onRelease = {  display.release() }

schedule = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			schedule()
		}
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel()
		if (stateProperty.value)
			future?.cancel()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		display.setArgs(rate.value, unit.value)
		randomDisplay.setArgs(factor.value, "%")
		schedule()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
	}
	
	if ( event.key == "START" ) {
		future?.cancel()
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Base Rate', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	
	node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
			images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
	
	separator( vertical:true )
	property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1 )
	separator( vertical:true )
	box( widget:'display', layout:'align center') {
		node( label:'current rate', fString:display )
		node( label:'random', fString:randomDisplay )
	}
}

//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'current rate', fString: display )
		node( label: 'random', fString: randomDisplay )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if (running)
	schedule();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property><con:property key="type" type="java.lang.String">Gaussian</con:property><con:property key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Random.groovy</con:property><con:property key="_digest">33856beef7937e0da8eb86d296f83602</con:property><con:property key="gui.layoutX">680</con:property><con:property key="gui.layoutY">896</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval" id="e36a65c3-b2e1-4db7-967b-bf70cb77182b" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit >= 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime = startTime + duration.value * mult
	if( limit >= 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">0</con:property><con:property key="duration" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">027116bc4eddd9d9a854c17dbddd4197</con:property><con:property key="gui.layoutX">230</con:property><con:property key="gui.layoutY">570</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval (1)" id="f491d887-a1e7-4b12-8174-0b4a9f584525" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit >= 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime = startTime + duration.value * mult
	if( limit >= 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">2</con:property><con:property key="duration" type="java.lang.Long">8</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">027116bc4eddd9d9a854c17dbddd4197</con:property><con:property key="gui.layoutX">735</con:property><con:property key="gui.layoutY">576</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Scheduler" id="ee825185-22ab-42ed-852a-c87859ffbc47" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop at a specified day &amp; time
 *
 * @help http://www.loadui.org/Schedulers/scheduler-component.html
 * @category scheduler
 * @nonBlocking true
 * @dependency org.quartz-scheduler:quartz:1.8.3
 * 
 */

import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.FormattingUtils
import com.eviware.loadui.util.layout.DelayedFormattedString
import org.quartz.Scheduler
import org.quartz.CronTrigger
import org.quartz.CronExpression
import org.quartz.impl.StdSchedulerFactory
import org.quartz.JobExecutionContext
import org.quartz.JobExecutionException
import org.quartz.Job
import org.quartz.JobDetail
import java.util.Calendar
import java.util.Date
import org.quartz.listeners.JobListenerSupport
import com.eviware.loadui.util.layout.DelayedFormattedString
import java.text.SimpleDateFormat
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.layout.SchedulerModel

def counter = 0
def durationHolder = 0
def runsHolder = 0
def startSent = false

def schedulerModel = new SchedulerModel()

createProperty( 'day', String, "* (All)" )
createProperty( 'time', String, "0 0 0" )
def duration = createProperty( 'duration', Long, 0 )
def runsLimit = createProperty( 'runsLimit', Long, 0 )

def canvas = getCanvas()

sendStart = { 
	sendEnabled( true ) 
	startSent = true
	counter++
	if(runsHolder > 0 &amp;&amp; counter >= runsHolder){
		unscheduleStartTrigger()
	}
	//setActivityStrategy(ActivityStrategies.BLINKING)
	pauseTotal = 0
}

sendStop = { 
	sendEnabled( false ) 
	//setActivityStrategy(ActivityStrategies.OFF)
	unscheduleEndTrigger()
	endTrigger = null
	pauseTotal = 0
}

class SchedulerJob implements Job {
	void execute(JobExecutionContext context) throws JobExecutionException {}
}

def startTrigger = null
def startJob = new JobDetail("startJob", "group", SchedulerJob.class)
startJob.addJobListener("startJobListener")

def endTrigger = null
def endJob = new JobDetail("endJob", "group", SchedulerJob.class)
endJob.addJobListener("endJobListener")

def paused = false
def pauseStart = -1
def pauseTotal = 0
def endTriggerStart = null //this is the time when latest enable event was sent
def rescheduleAfterPause = false
def endTriggerTimeLeft = null

def maxDuration = 0;

def scheduler = new StdSchedulerFactory().getScheduler()
scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"startJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStart()
		scheduleEndTrigger(new Date(), durationHolder)
	}
})

scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"endJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStop()
		schedulerModel.incrementRunsCounter()
	}
})

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION) {
		if(!paused){ 
			scheduleStartTrigger()
		}
		else if (rescheduleAfterPause){
			def now = new Date()
			pauseTotal += now.getTime() - pauseStart.getTime()
			scheduleEndTrigger(now, endTriggerStart.getTime() + durationHolder + pauseTotal - now.getTime())
			rescheduleAfterPause = false
		}
		scheduler?.start()
		paused = false
	}
	else if( event.key == CanvasItem.STOP_ACTION) {
		scheduler?.standby()
		paused = true
		pauseStart = new Date()
		if(endTrigger != null){
			unscheduleEndTrigger()
			endTrigger = null
			rescheduleAfterPause = true
		}
	}
	else if( event.key == CanvasItem.COMPLETE_ACTION) {
		reset()
	}
	else if(event.key == CounterHolder.COUNTER_RESET_ACTION){
		reset()
		scheduleStartTrigger()
		scheduler?.start()
	}
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ day, time, runsLimit, duration ] ) {
		validateDuration()
		if( !canvas.running ){
			updateState()
		} 
	}
}

validateDuration = {
	def expr = new CronExpression(createStartTriggerPattern())
	def calendar = Calendar.getInstance()
	def nextDate = expr.getNextValidTimeAfter(calendar.getTime())
	calendar.setTime(nextDate)
	calendar.add(Calendar.SECOND, 1)
	def dateAfterNext = expr.getNextValidTimeAfter(calendar.getTime())
	def diff = dateAfterNext.getTime() - nextDate.getTime()
	if(diff/1000 &lt; duration.value){
		duration.value = diff/1000
	}
	maxDuration = diff
}

updateState = {
	def expr = new CronExpression(createStartTriggerPattern())
	schedulerModel.setSeconds(expr.seconds)
	schedulerModel.setMinutes(expr.minutes)
	schedulerModel.setHours(expr.hours)
	schedulerModel.setDays(expr.daysOfWeek)
	schedulerModel.setDuration(duration.value * 1000)
	schedulerModel.setMaxDuration(maxDuration)
	schedulerModel.setRunsLimit((int)runsLimit.value)
	schedulerModel.notifyObservers()
}

createStartTriggerPattern = {
	def startTriggerPattern = "${time.value} "
	startTriggerPattern += "? * "
	if(day.value.equals("* (All)")){
		startTriggerPattern += "* "
	}
	else{
		startTriggerPattern += "${day.value.substring(0,3).toUpperCase()} "
	}
	startTriggerPattern
}

scheduleStartTrigger = {
	runsHolder = runsLimit.value
	durationHolder = duration.value * 1000
	
	def startTriggerPattern = createStartTriggerPattern()
	unscheduleStartTrigger()
	scheduler.addJob(startJob, true)
	startTrigger = new CronTrigger("startTrigger", "group", "startJob", "group", startTriggerPattern)
	scheduler.scheduleJob(startTrigger)
	
	def now = new Date()
	def next = startTrigger.getFireTimeAfter(now)
	if(now.getTime() &lt;= next.getTime() - maxDuration + durationHolder){
		sendStart()
		scheduleEndTrigger(now, next.getTime() - maxDuration + durationHolder - now.getTime())
	}
	else{
		sendStop()
	}
}

scheduleEndTrigger = {startTime, durationInMillis ->
	if(durationHolder > 0){
		def calendar = Calendar.getInstance()
		calendar.setTime(startTime)
		calendar.add(Calendar.MILLISECOND, (int)durationInMillis)

		def endTriggerPattern = ""
		endTriggerPattern += "${calendar.get(Calendar.SECOND)} "
		endTriggerPattern += "${calendar.get(Calendar.MINUTE)} "
		endTriggerPattern += "${calendar.get(Calendar.HOUR_OF_DAY)} "
		endTriggerPattern += "${calendar.get(Calendar.DAY_OF_MONTH)} "
		endTriggerPattern += "${calendar.get(Calendar.MONTH) + 1} "
		endTriggerPattern += "? "
		endTriggerPattern += "${calendar.get(Calendar.YEAR)} "
		
		unscheduleEndTrigger()
		scheduler.addJob(endJob, true)
		endTrigger = new CronTrigger("endTrigger", "group", "endJob", "group", endTriggerPattern)
		scheduler.scheduleJob(endTrigger)
	}
}

reset = {
	counter = 0
	durationHolder = 0
	runsHolder = 0
	paused = false
	pauseStart = -1
	pauseTotal = 0
	endTriggerStart = null
	rescheduleAfterPause = false
	endTriggerTimeLeft = null
	unscheduleStartTrigger()
	unscheduleEndTrigger()
	startTrigger = null
	endTrigger = null
	startSent = false
	//setActivityStrategy(ActivityStrategies.OFF)
	schedulerModel.resetRunsCounter()
}

unscheduleStartTrigger = {
	try{
		scheduler.unscheduleJob("startTrigger", "group")
	}
	catch(Exception e){}
}

unscheduleEndTrigger = {
	try{
		scheduler.unscheduleJob("endTrigger", "group")
	}
	catch(Exception e){}
}

onRelease = {
	scheduler.shutdown()
}

layout {
	node( widget: 'schedulerWidget', model: schedulerModel, constraints: 'span 5' )
	separator( vertical: false )
	property(property: day, widget: 'comboBox', label: 'Day', options: ['* (All)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], constraints: 'w 100!' )
	separator(vertical: true)
	property( property: time, widget: 'quartzCron', label: 'Time', constraints: 'w 130!' )
	separator(vertical: true)
	property( property: duration, widget: 'time', label: 'Duration', constraints: 'w 130!' )
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Day', fString:new DelayedFormattedString( '%s', 1000, day ) )
		node( label:'Time', fString:new DelayedFormattedString( '%s', 1000, value { time.value.replace(' ',':') } ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%s', 1000, value { FormattingUtils.formatTime( duration.value ) } ) )
	}
}

settings( label: "Basic" ) {
	property( property: runsLimit, label: 'Runs')
}

validateDuration()
updateState()</con:property><con:property key="day" type="java.lang.String">* (All)</con:property><con:property key="time" type="java.lang.String">0 * *</con:property><con:property key="duration" type="java.lang.Long">10</con:property><con:property key="runsLimit" type="java.lang.Long">0</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Scheduler</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Scheduler.groovy</con:property><con:property key="_digest">0dfb5dd973a21ae17a167bf65239767b</con:property><con:property key="gui.layoutX">1195</con:property><con:property key="gui.layoutY">585</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="05458282-13f4-4c65-a2fe-0687b851e4cc" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">false</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">697</con:property><con:property key="gui.layoutY">1527</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="8a8cf6f5-e6f6-4421-9a9f-5ff5261affa5"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1284</con:property><con:property key="gui.layoutY">1536</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e36a65c3-b2e1-4db7-967b-bf70cb77182b/outgoingTerminal" inputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/stateTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/stateTerminal"/><con:connection outputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/outgoingTerminal" inputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/stateTerminal"/><con:connection outputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/resultTerminal" inputTerminalId="05458282-13f4-4c65-a2fe-0687b851e4cc/inputTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/stateTerminal"/></con:scene><con:scene label="Complex Load Scenario" id="5dd7734e-f092-4152-b2e8-3663dac12bf0" version="41"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1332</con:property><con:property key="gui.layoutY">619</con:property><con:property key="miniature">iVBORw0KGgoAAAANSUhEUgAAALAAAAC8CAYAAADYdSQlAAAsxUlEQVR42u1dB5gUxdbdzGbYXRZw
WdLKLixIkLTknHMOIqCAYCCoCJhQghIEJYMgSXKUDIoIgggKAoKKATAhIgim955Pfe/99+9zZ2us
6enZnZntntj9fec7XVXd1el0dVV11b0hIeZi6HJPyUhS6CHzThi8XLuy+1/Xvt1NAYI/jbpPfx7b
Q67gnWPHaMTIkS7t8+eR7WQq0sXlu693kD/jylc7aP6cR+izj9dz2KDbNPjXR9vRxq61aGf/JvRi
5/p0YkgLenNgM7pwfytCmhoXn7mHbjzcTjNNjafqZ9GEBlm8birSxeXby69RIMEoAd9ql0qegKlI
Vz+Nv+2nQIJRAr548SJ17dqV9uzZQ08++SQhDCxbtoxeeuklunDhAvXp08ca7wzGjBljXf/www+Z
TUW6IeCrX26kP37d59f4/qtNhgu4YsWKLOC5c+e6JFRXYCrSR0rg33/eG3AlsBqff/65rjAF7EdV
iH/e2uN3Av7oo48c4rnnnqOVK1faxTdu3Jj69u1rg549e+I8KT09nRnAtqaACyjg7760fIYH3t3J
GnfxkzXUp1db+vcv+2jfzhn06Oj+1LlTCzp6cC6HxXaXP10b8HXgDz74gDF//nxavHixNQy88MIs
WrVqFZ06dcomvmbNmtSoUSNKG5NGMetjWaypqal2Asa2poDNRpyhAj5x4gRj37593Ghbs2aNNW7+
gsV0/PgJa1igQoUKFpFGhVjFqiVgbGsK2BSwoQJ+5513GFu2bGEBb9iwwRonBCzCAmlpaVS1alUb
VKtWzYYBbGsKuIAC/uPX/XRVac0vnv8YDR3cjQ4fmE19+7SjI2/NpW8vbuBtZs8cRb9c36nUYXfT
Y4/eTU8/MZhat2rEab/c2EnXvt5MzZrV4/BHp5fT11+sp/27XqDvv9rMcT9f30FbNkzm9S8/W0s/
fLuVvvh4NYe/vbSR6terRb8q+YhzQtUF4dXLn6LfftxFV5RtvCXgw4cPM9588006dOiQNQwIAWO9
f//+1vhixYpZS1mBlJQUZohbxGFbU8A6lMCDBnamq0pd+F8/7aF2bZvQsiWP09hHB3DazOkjqHu3
Vrz+yuLxLLxfb+yipx6/l9MWzR9DH59dwel39etA7ds14XXss2jeY5xnl84tmDeuncjdX/9W0Klj
c95OZncbeUYK+MCBA4bCFLAOAoa4/LknwkgBo+5rJEwB61gHRunonAh3O9j/7yqAVv+wiEcp76/9
wOaPDB+tQrz79gI6fmSBpkC6dmnJ3Wg7tjzP4cnP3kc9e7Shc6eWcVVh4dwx9OHJV+jxsYNo5EN9
eZu1qyYwo74Lvm9od96vcaMcG2Hf+G6bgq30j5u76acfdnA88vnh2y20ZNFYunn1NVqycCwdOzyf
OnRo5lEB59UHrIW3336b1q9fT67uZyrS7IUwZJk5cyaPeXAWB948SMOGD3dpH4y1MBVpCthXlr2m
ukwB+7OAJ5rq8qCATxxZyP2swOxZo+nK5Y3cTYZfyRc/WU3//GkPfXb+Vevv5o/PrKBb32+nt9+c
w2HsBx47ZgCnWfZbY22wiVFj5z9YRr//8vdAn/Onl3N/MdY/PbeKt0F9GHVgHBfriPvq83V8Puhn
bt6sPn1zcQN9+dk6ri+bAjYFbJbAOi9ly5Y1BWwK2H8FXKNGDVPAnhbwz9d30omjC+mJcYPorddf
4rhVy56kB4b14i4w/G27cWUb/+z410976dAbs6lb15b8OZfH//6mfNZRVRB9xPjUT5vyAG1eP4mu
X9nKI9cO7J1FdXNqWPfZtHYi/7pG15qobqBr7sjBuXThw5X8uxr5Pfv0UD72ta+3aI459qES2OxR
MEtg/y2B5yZvE+MczMUUsG4CTvly2U0yGt9u/JkOHTpMEzLmkieOd/mVm2QKODgE3HR/9gWqF1ef
wHOy19PS7N20PvsIh/XEroandM/TEV4su84UMOqaajF07tTcur41dwikK5iq1HsxCm3Ck0PsxlnI
szkcAfVdMOrNegl4S9RZCjQ8F7HKFLAnIAb4eLMEFoNmpk2bxhMpjxw5QvPmzSNPDdYpKDBlaerU
qTZx69aZJXDQVCH8RaiuIOgF/Mv1HXTjyha/xs8/bKdvL603BRx0Av51/9cBVALfckbAn376qVPY
unUrc/fu3Xkq/KRJk9j6DuKeeuop5nvuuYcGDx5MQ4cOdTpfZ445atQozlegdevWPAm0aNGibGAF
jG46bBvUAg6ypamw74Bp8fmNzd28eTMzRCXwyiuvMMOkFCZiymlqLF++PM90NV5//XWeMIpj4qWp
tq06RY2LoqhRUSzWxMRE5ttvv93GnoQp4CAT8NmzZ21w5swZmj59Os2aNYvXMTYXgtq0aROn79q1
ywrEgYWA5TQ18ALkla4GphWJY5YpU8ZuMqiWgLGtKeAgEzBa8o9kZjIDK1assK7LwLR5ddzIkSOt
6y+++KLmflrbyutagL018MaNG5mdFTC2NQUcZAJ+7733nAKmBDm7rV4Qx1SL1xGwrSngIBPw8ePH
HZaESBOAMOSwJwABO0r75JNP6OOPP2YGpkyZYj1P89EGkYDV1nMcYe3atU5vqxcgRkdpBw8eZKMq
YODpp5+27mM+2iASMGYMo64ZCMC1mAIOMgHDLFR+qF27Ntsug2VJZ7YX2LFjB+935513Uk5OjuY2
q1ev1oxv2LAhVa9enfdDI87ZY5oCDjIB4zOcH+Lj4yk2NpaKFy/u1PYC27dv5/3wowGstc2rr76q
GS+OB46IiHD6mKaAg0zAb7zxRr4YNmyYFc5sLwAB57cv7Ajnd0xXjmsKOMgEvH///oAB/t6ZAg4y
AZuDeczFbwXsjH2yo0ePumzTTI3333+/wHnA9ZYz28FSvPlog2NJzU8M+Jlx4r33edCOu8L77LPP
6IPTZ2j27NkFEvDBtw7R9Okz8t0Oo+TMR2suYimJXoKCZoLPemhoaIHywc8KeDkyH4m5uLTAg2ZB
8zDtQgT4UqFChf1jx451+JATExPbYlD3xIkTqUaNGvs9eW6RkZEbfEXAqampPU21+NgCUbqzX+nS
pXtjXwz2NvD0muiRiV4CdvdemYuPiVdryc7O7ov8cnJyjuiVZ15fBVeWKlWqrDSfdmAuYUZlXKpU
Ka5yKCX1cW+/XNWrV5+oV14PPfSQR0phpUA4joH3uA9q3H///TiH0KBWbkJCwj88eTxF0Pfg5mMC
ZkpKyklH202YMIGUbWvreWw9BYwFA4RCQ0NPFjSfypUrn8T15r7oEGVtb77ofrU8++yzQXPhGRkZ
E43IF9OJIKAiRYqcdbRNnTp1zo4bN463Q0M4PT29hwGngtL4vaAScJ+BTYJGwEFi4DrM62fwydUl
5Ans/LA1vf7GAVq6YSR56pjevK9KCRkMAvZ+dWLDqUp0o2JF6nlPJRo0qhIhPHVVJXpxUyXqeW8l
Wn7IEteiQzZzQbD+vSoFzsMVmAL2yOLdht2Sd2IoUOHtwsnscPLAIobk7dy5k60ePvroo/yjwJ+H
F2Lmrg+4bQ0aASv1/V+9LuBARDAL+MDp8XTw7BOG4+5hDWnvvn0eORagXNqfdgL+4osvAg7BLuDD
n99HnsDRC8/SXYObGn6c+8bUYWDdTsAXLlygY8eOMTdt2pT55MmT1L59ezp37hxP38awPthJOHHi
BH+iMZ0b2+mFJ598koGfDmJdDaThVy9m7latWtUGchzyC3YBrzqRRoEKOwGfP39eEzAZ6ihNb3Tu
3Jk69+hMo8aPor7/7suOrzt36cwzdJXTpNDEULqjZRWKeyeeoqIs1hrDbg+jsKwwinklloquS6WI
ThEUExPD+QW7gAOlGojJAXlWDREBi4xi+f3335lhbK5t27bW+P/7v/+zrv/5558sbtgvQIMPy3ff
fUfq5dq1a8ywvOhowbGBJk2aUJNmTdgWLtbDw8Pt7IBVrlyZGQKO/yjeJg02c8EQMPLzAQGHmgL2
QNsGEaguiOWOO+6wirVDhw7MLVu2tMY9/PDDvA3QoEEDGj16NF2/fp2uXLlCt27d4m1gs0tedu/e
7VDAODYAQyAAqgAQYn4CVqfJAkZ+PiBgr/cuXb58OeCgKWDUa70NNhkaHUKVKleikEKKgCMlAUco
CA+h7ErZHI5fk0AhkUpc1N8CrlChglXAyM8UsKVxjk8wGA5twGgfIA7GAT3RmB4yZAgNHz6cWQba
M+AHHnjALu3xxx9nK0UwLiMXUpqNc0SgAQdDye+++y7z6dOn2Wwn+oQhBmG5EWnY1gikpqbySeaO
kKKwsDC7UlakwWqNOg3m90XpjPxMAVvqj3q3VZCnK+jVqxcNvDaQWQa+3HDbgAInrPzfzzpmZSyV
L1/eUlCpBCzqw3YXimnksA7uDLCtEeCTjA2hpKQkS6PNMiHSBiIN4pYvWk6DuJGfKeCLXMqiOoWC
CaUgCiWYY0WhBJ8bMEt13333cRjbAEuWLOF9EFe3bl1eh4kAUdUTpl2dBY6D3iww0KJFC7sqH/Mr
MdZn6UjAyE9TwIcPH+ZPjF5Afq4iMjIyX6B01UKhQoUoOjqaGUB+poAtvUtos+gJV0tsvASNGjdi
dtRmkeNjlsQ4FLBm7xIi3nrrLe7XhV2vu+++m99K/FYeNGgQxwvMmTOHedu2bdzNhbrKjBkzOA5v
FnoksI78PAX0SX/55Zc2QLwp4ItsGAXVPhg+wfrzzz/PJSvWPQV0j6I+iwa4DAzQB6MzwJk0WOtE
fpoCPnDggN8Cnz1424ShZ/EZRLwp4IvclnniiSc8ivHjxzNwbABtk5iuMRTRNYLCq4VT3AeWUhWT
XuPej6fo9GgOxx6Ms1QdU0KpXL8Mij0QZ/0HIID8NAUcSMbuBEwBW5zZYEG1Dguc0uAFF339Riw/
/vgjQzT80R1aqGQhZhlotINR9UO7RSBuTzynYV2YmQWwLfLTFLA5mCcwBYxGG6YWeQPCaY2jBrko
XbV6m0SaurcJ+dk914IaoPNlBLuA1X3tsB7fpk0bbr+IOPjEM7J/f+nSpbpBs3/fGSFs37GTXaoW
REzow9v/+uvcTVOQfFDPWrRosSlgJwQs2gNg9AJgajyGByDcqlUrdk8A+2sDBw7kxrdoQ/gCMIjs
kUceYYbHUzDi3fqywhvOa6+95uqONTB92zowQPmMvLyE56kVaGr4iBEjeLxEiLnkK2A0bD29iDpw
Qb01wXC3DLRrEO+RqqGjiX59+/Y1hedBAeOHDhb8QEAhhKrD5MmTCQUL/laiX9coARv1w8tQASuV
7npJSUkOreLg829Ky3MCRrXAWyWw/P9AT7gt4MjIyDwtuDzzzDOmOH1MwK64B/MXuC3gvOb/4z+7
KRnfEzD+SKLvFANn0IDDOmbVYLgr/qLu3buX48Ce/HtaEBSkCjFLHeGGqaguuTAXDwgYg3XQgs8P
ELArvvC8CS0B77r5z3PkCex//Q1atmw5eep4IcFmu0slYPiQczRKDONeXB1ZJuCK3zy9YSfgpWsf
pzcu9Gb0HFCHedCD9axxauw738thWn5Yd6IWvbyjmdv7O4vJCxsyDxtbjYJZwOh+Eo7B1Y7C0S0q
1tFXLKcB6LGQwzLUXVyehJ2A56y4l1YcT7XDyOdKacb7E3qPiAtqATs7xtufYCfg+fPnW8cO3Hvv
vX499gGDVsCbN29mvuuuu4JawEExxkUWcKAhmAWc1y92VBlc/YWPIauu7oMZHPgF7Mo+2B5/3Jwe
IiAEfOnSpYDC+vXrTQFrAGNqz5w9SytXrnRaVF999RV99PEnLnsfPaoIccqU51zaB+Nu1qxd6zAd
Nvw0BayejAcLOHIYbwZma+B3nqsT+/LDp59+yowxDqjGyMBvTzDsUKjT4NE9JSWFx5SGSMPuVqxY
waOXglnAeS0Qoqv74CeCQrNd2Qe2RRRyyfAfTCv06dPH+fMTAsbUnFmzZhGc/KEIRxguTDG6Huto
pS5YsIDHZOIfOvoPEa8H8GaBIeABxwdQv0X96N4h99Kg0YN4ZvTdvw2gpC5JFN81gVGsWDFGVo8s
SuiYQGkl0yhhSCKlpqdyPM7NVwWM6TIDBgyg3r17U2ZmJs6vmqfPIaB8XAgBY76RNxb8xcO8LRwf
Q/xkoDTFvKgQB1Pps7MtdiLUJfCyZct8SsAYypienn4or20KFy48FcLCVHOjzwfenAJOwB988IFV
VKgnYcFkwJs3b/I6RCaWGzduMP/3v//lGy5MUsEyD0pRpP/1118c365dO66TwvjeH3/8wUCdShYw
fmfi+HjQOe1zbMQIAcesifFbAeML4s5+sbGxkyBopcTeqPc5lStX7nLACRhVA2+VwGL6iRCkWsCu
lsDwNO8jAp6gV0ZoA+T6ajOrD1oCxmh3NKbyA0wCGTUKH4PeY/fFUXiOxaxU5LAoyiiXQVHjClGh
IdEUNSKKwhtEUETHSE5PG57G5qhi77OdvSqmoHhbwEaJJSMj4wnknZWVtd6V/QLSzZkQMBpuaGmi
EQdrkpgrhTD+mWN969atHEajrqCj7R0hLi6OEl5IZBYoXrw4xW9NYCMXcrxIAycmJnJ6fHwcs68I
uEePHh45fpkyZS5D0A8++CAlJyfPVCXPRI+SInpS1bmXBpSAMVgY0661kFdaXvu4CnUVIUSaoerK
zFbMu/MFASvnNcFXn3vAVCWEgDHWEvVQdHDjTw0Ge4i6qUjDzwGkYR3WeWDCCba2IBSU0ljv2LGj
dR9vwk0BL9QLI5qMp7lz55Geeer53PVyau4zAkY/L0ouLeSVltc+noKwpolp11hHnDsCPv/EVdIL
D9d+hiZNnkx65lmrdF3zx4wjAXtziFxBgQHZMhDnjoB3lfyI7o4fSKMynqG7yg+j1lmdaG2pI4R4
X0Bm1B16C7hUwAg40IbdwRiyqwL29cFJbATcrAdrC9gcjWYrYFixwb98YRXcG8AvdjDGLhghYPQt
B4SA8xshhGkkjz32WIFNPeFBYDBQQfNBVx/qvPlt546A0dftq74h9BZwoCx1MOIrL8AIxr79+9nU
T37b5oUtW7fRwkWLCpTHzJkz6eBbh2jDhg35bqtcWyNXBaz3SDsZzZo1o/79+7sE/F7HWFy8+EYI
uHbt2sHxUuBm6lXHws+QAp5OOyOuUYzKc3YEnRhF5ywgYHQzAvg6gOGqLMSBKwXY0AXjB5JRAoYD
yaAQsCsV/kaNGv2hUCt/u0YIGIOWAPi4w4wCjKsQccDY8uVtwlrAfs37z+IuPTkeAsZ414jICCpa
tCiLM3dkmK2Ak20FjG5BowQcNIuzZqGcFXp4ePjbvihg4cwE8+rAGOYp4pzFqFGjqU7XSTyzV46H
gCHIiBaKgIsXZVdhagGH1wu3K4Fh2M5IAWOkYMALODQ0ND+rkptznXI4tcD/hi8KWNi1xV/FLVu2
sJ9o2d5t2ypVrOvwD4JxIzCYp7aLixcZP3TkOCFgIM8SWCVg9G0bKWBY6QmKUjgyMrKmXv2JvtgH
KXzmYVAM7B/gd+uoUaN4oJGz/u6wH0QPwa1bt45/v+vhR8+sQhRwyU6rQluGH9AFm0JPKw2Tw7rl
ByineFoPAaPF7yxQP8bAJTSE5s2b59K+rsJoAQe8ccaTg78hvXB22lfUq2cvXfIaV/85xuEBn5Ae
As7POqKjHxtGW2U0WsCVKlW6FdAC3lH0PMl4LfUsqeO8iQ0pJ3QRcH5uvTBFCD9S1DDanZiHqhBF
A1bAvvSLWEzFl+PQTaXHNfqq2zBPCDjgphv5soDVcXoJOJgG8wTVIm6iL1rhES5VC3qNvu42zBMC
7tChAwWsgJ2Z9FkQwNoO3HnJgHMS8JAhQ6xxwsujmJWMfX1NwGPHjqM1a9fpKuDcfmFDl379+gWu
gI0uYeCEDx51BEK0ptWH20+rx756CFjPBX3H7owf8ZElMSAFfObMGYboWIcBExEHoBEgh1GiwvO9
HAfjbNU7TKDklFSbeKBq1ao8QVNGlSpVmKOiouzSKlWqxALGvr4m4Nxlgj8+64BszImB1QCs6KAh
BQGLOGeBgeI1Oz9LqaWr2aXxzOPYEAqNUzjU3rBJaIlQTcMm2NcXBayc34QQc/EdAWN8gAAM6KF/
Uo5TA7OWMR5AKw0zh9VxMHynBgaaaMWLNAgY+/qigHv16uW3JRnaHgEnYNTr8FsTDPtjGLGFqoQw
TAKfu3kZLsGAeDCqEWiMYb19+/a6GEXxRQH786c4Ojr6HwEnYKO8L+oBH60Dy0uEvz1z9PQElIDz
MyYydepUOn/+vB3gHsloQyZ+IGC/WwJqgI8z4wS8CX8RMKpR5qvhJQH76jgBwF8E7G/14oDpUvP1
cQL+ImB/7pnw60Xvv24w/6RnfrAT4Q/30R+nscMniilgtYGTd45xH7FeecJBjT/cR9i1qNYwzK8E
Ua5cub/MIly1wCK7z7ycVxfQ2SszDQeOs23ba/TS7sIeOR6gXF5VPe5RVFRUtqlaaWncuLHPCHjd
yUw6kJNDq49n0oiJFWjerixC3JoTmczT1mRRv/sr8rq/QS8BB6R7AlcX+NdAq7Zp06Y+dTMC3K9w
VbO41Gep6Q89LJhpPHv2bL8VLAZLwYgKnFLqLeCAnnKU3zJ9G3sWqu+rAsZsY4zvCCQEfAn84z/O
0KUbmwzH1V+O0PsnT9GCgzEeOR7gj1UI2JcYOXKkLjCqCuFTMzZ2fNiE9vfpQ73uqU7PLqhHW081
JsQNH1eDecxzdahr3+r06qFG9OLaetStf3WOdwcbD/d1e19XMHpKFrOrAv7888/ZBjLMtsJmMqzq
IA424WCqde3atRw2EnXq1GGrlQAmAoBHjx5tjRPIdZkl5sjZAG7HwMjPCAFjGKvPCHjZscIUqHBV
wBcuXLDpV8ZEUVf7olH3lMPI0xVAwDC52m1Hd+r5YE/qPLYzDdg3kAf6R3SJpNhdsRT1SBTFjY2z
Cjh6UQxFL4yhiDYRFN40gmKbWtKQX8BXIeTPF0ocuM6CO1N/bcDgBwnchOU+OJfuA+z3ujJ4CAbx
8tvGFdvBAATcR/kiAqKkrVy5MnPq8lRmICsri7lS/UrWOIHMzExm5GeUgH2mMRfg3Ucu3Ydz5855
HRAwZplgvp/aQqUMeCbNrwqB/IKqBA52AasnmHoDEDCEm/hqIiUuLExJy5KpXLlyLNjChQtTcrdk
il+QQClHi1Ly5hQubROqJFCxdcU5HShWrBgz8jNSwD4xVljYeujWrRtNmzbNap/h+eefZ960aZM1
DnU6WGDEAHV8HvW0B4E6HqYjycBPDzBmNsvx8D8MvxEoZQoVKmRXAgmTU67eB0xUVS9wrmL08uOP
P/KxAQg4ROVGV9gRlhETE8MMX9HqNHFPkJ+RAs49jvcF7KhBgg5xT1mcgYBhzbzvT/2Ye0zrQfcv
up/XE95MpISbiRTZLZIie1m81Gc8nUExr8ZS4rzCFFo8lEIKhVBYqTCrjQh3BIz6szcWCFjMypYF
DDMCcpUg8t4oa1pkpOU+JCQk2AlY2M8QrrkMrkLc7XUBYxyt1vKf//zHuo76lDoNN/6bb76h//3v
f5r7f/3119Z1rdINi/AdAQE3b97cCjwY2IOQH4gMYQ9CqwRGfu4IWG1h3RuQBSycm6sdmctpWvdG
pCE/owXs9cYcLvDUqVMsJlglx+d53Lhx/FcKy4gRI1iosJLz0EMP0ffff8/raIFjNBnEC2coEDKE
g/5TmNvHgmoIHki7du2oRo0amgLGsQHcdMxOxrbp6ekM9DeCS5cubY0TgAEUcJkyZezSkJ87AsbU
/Jdffpm5ZcuWPGsag88RhiEX/JpFLw3CqErBcnteJgU8CdRH8cxkID4oGnEYCD5nzhyvAMcGIGB1
i1oYNCnU9u9SNnKA5TNaOaeywxIY+bkjYIgUrgE8DXT7FdT9AH60wNyBuK9YR7wnBOys8x/DBIyS
FPXGNWvW2NRLYTpfXVfFtkZAdA2JljSA1je4SJEiNvFyWnJyMqfLQH7uCBj2LeQFXxqxYICPUQv+
8OHYRsATAs5tUHtPwLhQV6yEGwF1KQqkpKQwR8+IsUtLHpFscUllsVtgA+nBuXQfUGp5qxFnlF+N
oKhCwCgIPruOfPSiTumKT19MG3fVKImWgEX1QDRKnE1Dfu4IGGawYGnIG8CxjYCnBOy1we7CWAlM
My1cuJBwIvv27eMwbJ8Js00YJYVBJfjdjKrGlClTuI9YpGNbfArRlwwBG23ERGD79u3sUV4G4t0R
MPaDU3Nn4KnrKyg8JeDo6OipXhOwLxsryQ9wrgI7a3jx0BLHlwTx7ggY/t20ADevjtJ8HUFRhcD0
dn/F1q1buUtLBuLdETCED9NYGE6phenTpztMywuTJk3y2gvuSQF7pU9YOEwJpFkIqM64I2AIH32n
Xbp04WoQqlIIY1yu6G8dPHgwjw9GnzhGi8GTJ6pWIh0DyV966SVatGgRV7cWL17M/cfeesE9KeDc
v4PmYB5vDebxZbNZ7iLgqxDOjFPAZxljhAs63uHV1au54VeQPDBgHCWcM9u68yL7c3vA21UILPih
4mkNt9TqwpIBs0Lzlc9gftvlh02bt/BNLUgeaLCtWLnS2e2dXlydOeFP8KSAfdnuW92QAF7yKsmX
Ln2F67yufCkwt27+/AUu7YP+drzkGDjl7D4Y87Br927+HZ3Hl8i0C1G2bNm6QXCZ/bQwefIU9o/s
KF0L6NZ71tIqd3qf1UoV6+WXl7i0D0aq4YuU+0PH0XYeXZRzueFzT7ZBgwamWSFz8d3uNL1OCgPQ
sW3u9kXMxxl8i0/Wg1NSUk44IfDYAH4uy53ZKDw8fI94gTH9KUg1nOqTZ4XB7q6WzIFiS2v8+PF5
XkeVKlU+x/R3dfzQoUPNqpevVSVcKV0iIiKuB8J152GNpseAAQMc3ovixYuvCVKp/GC+LT7cDsjI
yLiU2zNhLm58sczFj5akpKSnzJ4Ic/HbpVGjRmQK2PiFjADGLaxa9SoZlb8/PMw5j8UEnYCPLov3
7DX/64uxZAQ+2nobDR3YhozKXzn1S3pc/3//+RH9dXOf7lg6pQodfOstunxujSH5V6tcym2hLHlx
kCHn9MeNN+jM2Q/p+qF0Y/K/vt3+mn95N5M+21mOvno9ky7szKJLezPp2qHc9X1ZhHRfhF4C/u1s
J9p711304lP16eGhdWjmUw1o2+JmdGxzK0Ka++hMZ3Z3LmAe9pg4qiKd292cNs1x3+fcn9fW08zH
q3B+k8fUpymP1acmDapQv241qX2rarRnWTO3z+/TA90NuWYA63YX40/jfIXh5tyhgroI+OejJcgf
sWFaktsC/vc3s8hfrztPAcPCjrBu42vAhEoIGMan9RSwyB+Wd+B8EcdB/64vXTvs/eL8sI6pVGAY
QHT3mmFlSX7mslsCXwJmveQ7WQGRrkyd9wUYIWBfBoZOquP0ErDfz7ZB5KVLl9g2Lcx5ygwDIzI7
ioeVHC12B+o8YPMWnJaWxoxz1VvA/vYCr1q1qsAChi07Py247B8g3vCOHTpQJwWtmjen1i1bUYtm
zahVixZWhlE9GOoD33nnncywKA7G71atsGBXoN63Vq1azDBjBBalkd4lMKw99uregzq2a0/tWrdR
7kFLatemLXP7thaWgXuBc8O9gCFDcM2aNW3CguvVq8eMfmGZGzZsqMkiHUNZ5f3BOFcMYi+ogIW9
5149e1KvHj2pbavW1KNbd742wX1792Hu0qkzc5PGTfi64axSPr8mTZrYMAwkguGRVWb5OrQYztBl
FoB3pDxLYMxO7tyxI3Xp2Ik6tu9AHbq0Z7OoyFhG/fr17eKMxI0bN6hWl1q8jocLxrnqLWDUrWFU
umP79tSmVSsFrall8xYs5Nq1aluFKiCEKljccHVYMF4+MO6fKywerNgfjHPVS8BoT+Ca8exbt8gV
qsIdO3Tk4zVTCi8toYkXTB0WL6AQsvrFlK9Di8V9Vt9vCFjyvGT/ADF/qq5SWjRu2IiyMjMp8utI
aqGUuhUrVOCw4ErZ2czZFSvaxFfIytIMC3YF8r44h9gPYzlcXSmRwZIHHt0EDMvusLXWRLn+RvUb
UC2llKmoXCOsZMosABvFMsOesVZYML5M4FqKwJmVBwSumRtWs0ivkXseYn8wznXFihW6CBgNuMaK
uFopLyuuG18MHEdwQ6WElc9DcE5Ojk1YvV8D5QUE4wWWWb4OLXZ0v/v27evY+r5o5VZWbj78LsD6
IxifCZg9RViwSC9fvrxNPDzjaIUFuwJ5X5xDBeWlQBhDFsGSBx7dBIyeBwi4fk5dvraU+SnMuHky
C8BTkMzZyoutFRaMBwLGS8isPDBwtdywmkU6qkypz6Ra9wfjXPUS8OnTp6lenRx+0ZA/BClzXUWo
4jxkxosmh9X75ShCBqP0lFm+Di12dL8hYFy3QwGjLlS6VCnKUAQiGNPYy5Uty+GyZcrYpIt4dbrg
MqVLa3JeUG+LvH766Scqr7wU6XeW5NId8ThXvQWMCZAQcEa5DOW4Za1c/vbyFi5vYQG8XODbM25n
ziyfaRvOzLRhPBDwHcpLaOE7mCvnhtWMBwpGiS7vD8a5woCLHgJGNRH54kUDQ5Ay44shn4dgvGhy
WL1fTUXIYLwYMovjyNcjs7jP6vsNATt0H4FI1IXQyodFdHCxgcXY1i6sniMsWKSXUoQkx5csWVIz
LNgVyPv+8MMPlPJ4CqWVTOOLQrwR/cCYDYxJksIifIkWJSw3W3lBERYsILYTjC+DVlgwzh2MByUz
vi5aXLGCJR0letEhRa37g3GuegkYhRTyxYsGhiBlxpdAnIfMeNHksHo/YWEf91Bm+Tq0WH2/ExYn
MMN3nuQ6zP4Bwi1TJtc7KzCXvL8kW/nGCSIsuIIq7DQryHSALCvb73v16lUq9nwqZeRkKPXubI6X
XEjpJmDUBfFyVFFKvtsHZTAbCqVEcndfnCvMaOkhYDiDkfOumntealZDHe9ov/zyyQ9hv4YxQ8AO
/Z8IN1Po4y1RogRz9Olo9luBPliEBYt0uHiS41NTUzXDgl2BvG+nTp0o/KdwSq6QzKUb4iUXUroJ
GHVBlMAllOtKfCiBubhyLWm33UbFlPMQLIB0mUviq2UTLmnDpUuVZkYVTOZyZbVZpOPzadm/lJVx
rnoJGM5gkG/x7pbzRpVJZjTa5fMQjCqTHFbvh0Y+GFUqmcV9cMTq+12kV2FmCBjX7VDA+JQk46eB
sjE4pXEyX1zRlBQOCxbpEJIcn5KcrBkW7ArkfW/dukVJ/YpQ0m1FKF2pUiAe56q3gIWzGbw0Yd+H
WV8ivKj4WSNYAOky48XWCgtGdQiM+j2zUr8Hl84Nq1lsh6qavD8Y5wq3B3oIGEYJkW/4D2HMqPLI
jC+ufB6C0QaQw+r98FUFoyogs3wdWqy+34ndE5l79+7t2IGPcPZSpHAR3hiclJ3EFg7ZD4USTk5K
tkm3xucy/pDJzD4rtFgLDrZFXvhpkZJtOeZtylsJlhy56CZgfErRiMMLiBcnpXQyNWrYkF9YhAUL
pCrilhmltVZYMEoUcCmlPseMBy+HHTC/tLclWfcH41z1EjCqicgXXxAwv1gKl81l7pHJPQ+ZRbo6
LBi9UZwfXsRky9dTvg+O2NH9hoAl33f2DxClLfyzQTSC9+7dy85UEBYs0iEkOR5OWrTCgl2BvC/6
/vDSIIy3Eiz5QNNNwMJbEl4eHBeMm44XFGHBAvJ2YC4tNMKCUbUCo54tM15KLRbpKMHl/cE416VL
l+omYOSLewtGg0lmlLTyeQjGCyiH1fsJF7koWWWWr0OLHd1vCNihByrhJw1vAd5EcPjlcOrZs6c1
/DeXVIUtnOYgbGVXIO0LO7xRp6M4zD0fCks+0HQTMF6K5NySCMdNHmgpBR31pqjj0x2EBZdS9eJY
uZSKVem45tjlsdZeHzDOVS8Bw0WE3KukPj6EKKcLLlO6jGZY7Icqg6PrsdwPNefdewUBSwWX/QNE
l1lsTAwlKiUcOD4znq1B6ukT2R2g3hPfII7PCZ93sORKSzcBI0+UwAnx8RQXG0vxt8XxvSisvP0I
CxYQ2wkuonx5tMKC8RkEo0ohMz6VWizSUSWJLRdj3R+Mc8WwTz0EDG9GyBf3FnybUqLKjCqAOA+Z
UZDIYfV+aGyC0aiVWb4OLXZ0vyFghy7UhKM/3HzccHBsuxjm+KpxzAl3xtuk8wFqxlLskBgKuxxG
cdVjrfFgPHzBYV+EUXxabj4Swr5XBJMQTyH/C7GJl/cFo+EGxs0CS078dBMw8oSA4ZuYX+BcFi+0
YIF49XbKdcvhwrlhMFdFlGtAGI08G4ZAtTg3Xby0Yn8wzlUvAcOrE/KFgMAQWrxyj8EI8xdAOg/B
EKocFtsLRlUCjBdRZvk6tNjR/YbJKum52z9A+FeLiY5mgcgM9cvsKB4H0QoLdgXqfSECMG4yWPIF
p5uA8SlFIw4PD4N6wBGTIyimTQyHBQuI7aI7RVPkzEiKWhxlE4+2QOSwSIqcEcnpaDtg29SiqZwO
Rjx3WbaNZo582BJGumDUocHYXzDOVS8Bwx0X8kX1KeKFCAr9OZQiXoqg5BaKoIvEKlWgdOt5RE2L
Yo5cF8l15qiGUdbzQxiM/aOaK1W+mmkUuSSS67aIF4zjxNyuCLRuIkXMjrC5LnBiQiIz2jry/YaA
cd0OBYxPCfyvoQSSOUYRkcwiHpnK8dGKsLTCgl2Bel9cDBgXCZac+OkmYLwUoSEh/NJE4/pyGSWq
zALq7fBia4UF48sFxgMHF81lvJRaLNJRMsn7g3Guegn40KFDnG+S0vgEowojM+qi8nkIRokqh9X7
od4KxhdFZvk6tNjR/YaAHTqxFA4PcRG4gTLjBGV2FK9mPSDywsME4+aAJWeGugkYL0URPlZRG6Ck
lPnveFvGuWmFBeOBg0sUL6Hi4k6x2B+Mc4Vjcj0EDH9ylnwtx0HVQGY0QrXOR6Srw4LRGNaKl69D
i/++j7b3GwKWCi77B2iUt0g9oHaQLXmh1E3AyBO2JlBFKRQVZWVUiWQWUG+HEkMrLBjVIDAKAJnx
kmqxSMcLK+8PxrnqJWD4k0O+KAHBeAFlhhDl8xAMoclh9X5o5IFR+MgsX4cWO7rfELD03O0foKte
IGecncHAOj4z+LSLtLMzZjAwFBJOwxG3a9cuad+zDKzjBuZ3LHRgYzsYSsG65IVSNwHjU+qrwAB+
GYiDCy+9qhD+cM3wuoR4hwL2ZY+TbLJfguSFUjcBF8Sl6/Dhw9lJolYa4gGct6P9He0rgJIHXZow
mod1xOkl4IJcN/7UasXjXOED2tF1oY/YmWseNWoUuy/GOvzuyW6E/x/ETWCsd//4dQAAAABJRU5E
rkJggg==
</con:property><con:property key="gui.note.0">211;204;497;242;This TestCase shows you how to use the Splitter and Delay components to combine multiple runners into one larger Load Scenario.

- An initial splitter is used after the Load Generator to divide load between three paths: 
1) The first with 3 web requests, with a delay between the second and third
2) The second running a soapUI TestCase after an initial delay
3) The third first running a seperate soapUI LoadTest after which it will join the path of the second option.

Statistics components have been added for both soapUI Runners and the last WebPage Runner. 

As always the soapUI mockservice is used to provide a stand-in for the relate target systems and services.

This LoadTest will run for ten minutes or 10000 requests (whichever comes first)</con:property><con:property key="limits">Requests=10000;Time=600;</con:property><con:property key="gui.note.1">246;2226;248;54;The standard soapUI MockService used in our samples.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="551df37b-ca36-4721-a266-33d59cff8bd3" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">208</con:property><con:property key="gui.layoutY">729</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (1)" id="326df2a4-1c3f-49a2-b54c-692b08aff9fa" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/search.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">1492</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="0ef58711-1bba-4b7d-8f61-3d1793b613c3" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
waitingDisplay = new DelayedFormattedString( ' %d  ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
waitingCount = 0;
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    waitingCount++;
    waitingDisplay.setArgs(waitingCount);
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                 waitingCount--;
    			waitingDisplay.setArgs(waitingCount);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        					waitingCount--;
    						waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        						waitingCount--;
    							waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display' ) {
        node( label:'delay ', fString:display, constraints:'w 60!' )
        node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display, constraints:'w 60!' )
		node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">500</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">35a1e49382a3c7fd2c2c87873711ac7c</con:property><con:property key="gui.layoutX">309</con:property><con:property key="gui.layoutY">1255</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="04f2b993-146a-4b70-b022-94456e361e46" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">96</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">946</con:property><con:property key="gui.layoutY">200</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter" id="2bde326b-ab20-48e8-ab2b-5913ee042048" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 * 
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */
 
 import java.util.concurrent.Executors
 import java.util.concurrent.TimeUnit

 import com.eviware.loadui.api.events.PropertyEvent
 import com.eviware.loadui.util.collections.ObservableList
 import com.eviware.loadui.util.layout.DelayedFormattedString
 import com.eviware.loadui.api.events.ActionEvent
 
 // one output minimum
 
 createProperty('selected', String, "Round-Robin" )
 createProperty('outputs', Integer, 1 )
 createProperty('total', Integer, 0 )
 createProperty('counterUse', Boolean, true )
 createProperty('updateCounterDelay', Long, 500)
 
 // locals

 total.value = 0
 
 def roundRobinNext = 0
 ObservableList outputStats = new ObservableList()
 outputStats.add(0)
 for( i in 1..9 ) {
    outputStats.add(-1)
}
 cnt = 0
 while( outputs.value > cnt ) {
 	createOutgoing()
 	outputStats.set( cnt, 0 )
        cnt++
 }
    
 display = new DelayedFormattedString( '%d', 500, 0 )
 outputDisplay = new DelayedFormattedString( '%s', 500, value({ outputStats.findAll({ it >= 0 }).join('          ') }) )

 executor = Executors.newSingleThreadScheduledExecutor()
 future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 

 onMessage = { incoming, outgoing, message ->
 	super.onTerminalMessage(incoming, outgoing, message)
   try {
    def next = 0;
    switch( selected.value ) {
        case "Round-Robin": 
            next = roundRobinNext
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            if( roundRobinNext + 1 == getOutgoingTerminalList().size() )
                roundRobinNext = 0
            else
                roundRobinNext++
            break
        case "Random" :
            random = new Random()
            next = random.nextInt(getOutgoingTerminalList().size())
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            break
    }
    total.value++
    display.setArgs( total.value )
   } catch ( Exception e ) {
 	println e.printStackTrace   
   }

} 
 addEventListener( PropertyEvent ) { event ->
    if( event.event == PropertyEvent.Event.VALUE ) {
        switch( event.getProperty().getKey() ) {
            case 'outputs': 
                while ( outputs.value != getOutgoingTerminalList().size() ) {
                    if ( outputs.value > getOutgoingTerminalList().size() ) {
                        createOutgoing()
                        outputStats.set(getOutgoingTerminalList().size() -1, 0)
                    } else {
                        total.value = total.value - outputStats.get(getOutgoingTerminalList().size() -1)
                        display.setArgs( total.value )
                        outputStats.set(getOutgoingTerminalList().size() -1, -1)
                        deleteOutgoing()
                    }
                }
    		outputStats.update()
                break;
        }
    }
 }
 
 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
	  executor.schedule( { 
		executor?.shutdownNow()
	  	executor = Executors.newSingleThreadScheduledExecutor()
	  }, updateCounterDelay.value, TimeUnit.MILLISECONDS)
	}
	
	if ( event.key == "START" ) {
           if ( future == null )
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
	
	if ( event.key == "RESET" ) {
	    future?.cancel(true)
	    executor?.shutdownNow()
	    roundRobinNext = 0
	    selected.value = "Round-Robin"
	    total.value = 0
	    display.setArgs( 0 )
            for( i in 0..9 ) {
	     if( outputStats.get(i) > -1 )
	          outputStats.set(i as Integer,0)
	    }
	    outputStats.update()
	    executor = Executors.newSingleThreadScheduledExecutor()
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
}

 onRelease = {
   display.release()
	outputDisplay.release()
   future.cancel(true)
   executor.shutdownNow()
 }

 
 settings( label: "Counter Settings", layout: 'wrap 2' ) {
	box( layout:"wrap 1", constraints:"growx" ) {
		property(property: counterUse, label: 'Enable Counters' )
		property(property: updateCounterDelay, label: 'Time interval for refreshing counters(ms)' )
	}
 }
 
 layout ( layout:'gap 10 5' ) { 
    node(widget: 'selectorWidget', label:"Type", labels:["Round-Robin", "Random"], default: "Round-Robin", selected: selected)
    separator( vertical: true )
    node( widget: 'sliderWidget', property: outputs, constraints:'center, w 270!' )
    separator( vertical: true ) 
    box( layout: 'wrap, ins 0' ) {
	    box( widget:'display',  constraints:'w 100!' ) {
			 node( label:'Count', fString:display, constraints:'wrap' )
	    }
	    action( label:'Clear', action: {  
	       total.value = 0
		    display.setArgs( 0 )
			 for( i in 0..9 ) {
			     if( outputStats.get(i) > -1 ) outputStats.set(i as Integer,0)
			 }
			 outputStats.update()
	    }, constraints:'right' )
	}
    separator( vertical: false )
    node( widget: 'counterWidget', counters: outputStats , onOff: counterUse, constraints:'span 5,center')
  }
 
compactLayout() {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', fString: display )
		node( label: 'Distribution', fString: outputDisplay )
	}
}</con:property><con:property key="selected" type="java.lang.String">Round-Robin</con:property><con:property key="outputs" type="java.lang.Integer">3</con:property><con:property key="total" type="java.lang.Integer">0</con:property><con:property key="counterUse" type="java.lang.Boolean">true</con:property><con:property key="updateCounterDelay" type="java.lang.Long">500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Splitter.groovy</con:property><con:property key="_digest">b1f551a422f26b85a079314c971698fc</con:property><con:property key="gui.layoutX">806</con:property><con:property key="gui.layoutY">429</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="6002c29e-6cf9-4772-83cd-c862927e5aaa"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">861</con:property><con:property key="gui.layoutY">1439</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="bbdf5140-9253-4ead-9782-cbb0a742264e"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MockService 1</con:property><con:property key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">531</con:property><con:property key="gui.layoutY">2222</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5bf761b9-8f2d-44ed-adc9-72d49eb32927" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
waitingDisplay = new DelayedFormattedString( ' %d  ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
waitingCount = 0;
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    waitingCount++;
    waitingDisplay.setArgs(waitingCount);
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                 waitingCount--;
    			waitingDisplay.setArgs(waitingCount);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        					waitingCount--;
    						waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        						waitingCount--;
    							waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display' ) {
        node( label:'delay ', fString:display, constraints:'w 60!' )
        node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display, constraints:'w 60!' )
		node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">600</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">35a1e49382a3c7fd2c2c87873711ac7c</con:property><con:property key="gui.layoutX">877</con:property><con:property key="gui.layoutY">1137</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner (1)" id="1bc8e660-d490-4a74-a86e-b54c476cf501"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1387</con:property><con:property key="gui.layoutY">774</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (2)" id="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/userguide/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">213</con:property><con:property key="gui.layoutY">993</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="e9541fa4-a45a-48d2-a964-fe7086dc2511" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">860</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (1)" id="660696d8-1a52-40c2-9fdc-335d80d83bf4" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">217</con:property><con:property key="gui.layoutY">1807</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (2)" id="fd7c8cf3-894d-4297-8b24-fa3c3db378c1" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">1473</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:connection outputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/output" inputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/triggerTerminal"/><con:connection outputTerminalId="04f2b993-146a-4b70-b022-94456e361e46/triggerTerminal" inputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/incomingTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 1" inputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 2" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/output" inputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 3" inputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/triggerTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/resultTerminal" inputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/triggerTerminal"/><con:connection outputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/resultTerminal" inputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/incomingTerminal"/><con:connection outputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/resultTerminal" inputTerminalId="e9541fa4-a45a-48d2-a964-fe7086dc2511/inputTerminal"/><con:connection outputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/resultTerminal" inputTerminalId="660696d8-1a52-40c2-9fdc-335d80d83bf4/inputTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="fd7c8cf3-894d-4297-8b24-fa3c3db378c1/inputTerminal"/></con:scene><con:scene label="Web LoadTest with Assertions" id="e00b1ef7-ae48-48e1-972a-f8b8caefe44c" version="35"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">490</con:property><con:property key="gui.layoutY">624</con:property><con:property key="gui.note.0">200;452;282;93;Here the same Generator -> Runner -> Analysis setup as in the first example is set up, but the runner and statistics components have been minimized to make room for the assertions below</con:property><con:property key="miniature">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
EWIl8v8ycGVBvbhvigAAAABJRU5ErkJggg==
</con:property><con:property key="gui.note.4">577;200;898;97;This is the same Web LoadTest as shown in the first example but now with a bunch of assertions and a Table Log

As previously make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar

This LoadTest will run until either 100000 requests have been sent or there have been 100 assertion failures (whichever comes first).</con:property><con:property key="gui.note.1">403;689;379;75;This Assertion is connected to the request output of the Web Page Runner, allowing it to assert (validate) the contents of each requests. We will set it to check that the TimeTaken is never over 100ms</con:property><con:property key="gui.note.2">901;687;400;75;This assertion is connected to the second output of the Web Page Runner, which outputs the stats you can see in the display of the runner. We will use the assertion to make sure there are no Discarded messages.</con:property><con:property key="gui.note.3">1412;684;419;75;This last assertion is used to assert the avg response time as calculated and output by the statistics component. We will set the max value to 50 ms</con:property><con:property key="gui.note.5">440;1120;275;84;The TableLog is connected to the output of all assertions; it will contain all failed assertions which we can export or log continously while running</con:property><con:property key="gui.note.6">1588;1101;418;42;The same soapUI MockService is used here to give something to run against</con:property><con:property key="limits">Requests=100000;Failures=100;</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="597e6093-d97f-4f73-ab9d-de68f912b974" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">984</con:property><con:property key="gui.layoutY">442</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="d3bcc7bc-0cc5-4156-b35e-34b23d579654" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">637</con:property><con:property key="gui.layoutY">447</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="b612904b-3546-4a11-919c-2ff7d2f974b5" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">true</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">1286</con:property><con:property key="gui.layoutY">445</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="c1af622e-3b62-46db-b5ee-49dc008eaaa1"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1586</con:property><con:property key="gui.layoutY">1217</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion" id="23dd344a-2b24-47e7-9ffb-1d467cd98bb8" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">TimeTaken</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">100</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">390</con:property><con:property key="gui.layoutY">847</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (2)" id="a495e792-6895-451a-a483-1495eefdff1e" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Avg</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">50</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">841</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="b8551838-14d3-4e55-8fc8-06616eecae8b" category="output"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent

import com.eviware.loadui.api.summary.MutableSection

createProperty 'maxRows', Long, 1000
createProperty 'fileName', File 
createProperty 'saveFile', Boolean, false
createProperty 'follow', Boolean, false
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false

myTableModel = new LTableModel(1000, follow.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateFollow()
	}
});

saveFileName = fileName.value?.name

updateFollow = {
	follow.value = myTableModel.follow
}

rowsDisplay = new DelayedFormattedString( '%d', 500, value { myTableModel.rowCount } )
fileDisplay = new DelayedFormattedString( '%s', 500, value { saveFileName ?: '-' } )

onMessage = { incoming, outgoing, message ->
	super.onTerminalMessage(incoming, outgoing, message)
	message.keySet().each { k -> myTableModel.addColumn k }
	lastMsgDate = new Date();
	
	result = myTableModel.addRow(message) 
	if( result && saveFile.value ) {
		try {
			char sep = ','
			
			writer = new CSVWriter(new FileWriter(saveFileName, true), sep);
			String[] entries = myTableModel.lastRow
			writer.writeNext(entries)
			writer.flush()
		} catch (Exception e) {
			println(e.printStackTrace())
		} finally {
			writer.close()
		}
	}
}

onRelease = {
	rowsDisplay.release()
	fileDisplay.release()
}

addEventListener( PropertyEvent ) { event ->
	if( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property.key == 'maxRows' ) {
			myTableModel.maxRow = maxRows.value
		}
		else if( event.property.key == 'follow' && myTableModel.follow != follow.value as Boolean) {
			myTableModel.follow = follow.value
		} else if( event.property == fileName ) {
			saveFileName = fileName.value?.name
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "START" ) {
		saveFileName = fileName.value?.name
		if( !appendSaveFile.value && saveFileName != null) {
			def ext = saveFileName.substring(saveFileName.lastIndexOf("."), saveFileName.length())
			def name = saveFileName.substring(0, saveFileName.lastIndexOf("."))
			def timestamp = new Date().time
			saveFileName = "${fileName.value.parent}${File.separator}$name-$timestamp$ext"
			println saveFileName
		}
	}

	if ( event.key == "RESET" ) {
		myTableModel.reset()
	}
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', fString:rowsDisplay )
		node( label: 'Output File', fString:fileDisplay )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: fileName, label: 'Log File (Comma Separated) ' )
		label('If not appending file, its name will be used to generate new log files each time test is run.')
		property(property: appendSaveFile, label: 'Check to append selected file', )
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property key="maxRows" type="java.lang.Long">1000</con:property><con:property key="fileName" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="saveFile" type="java.lang.Boolean">false</con:property><con:property key="follow" type="java.lang.Boolean">false</con:property><con:property key="summaryRows" type="java.lang.Long">0</con:property><con:property key="appendSaveFile" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\TableLog.groovy</con:property><con:property key="_digest">562c50d74a0719706524bbc1298995a9</con:property><con:property key="gui.layoutX">782</con:property><con:property key="gui.layoutY">1114</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (1)" id="17f403d2-0707-4f26-8c0f-00fe25d5a1fd" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Discarded</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">0</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">901</con:property><con:property key="gui.layoutY">845</con:property></con:attributes></con:component><con:connection outputTerminalId="d3bcc7bc-0cc5-4156-b35e-34b23d579654/triggerTerminal" inputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/triggerTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/inputTerminal"/><con:connection outputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/output" inputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/inputTerminal"/><con:connection outputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/statisticsOutput" inputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/inputTerminal"/><con:connection outputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/></con:scene><con:sceneAssignment sceneRef="f53a7146-d347-4f03-81d7-bfff0caa41a0" agentRef="fcd1b36a-f644-40c1-9d7d-04ea66aa5f4a" agentLabel="Agent 1" agentAddress="https://192.168.100.90:8443/"/></con:loadui-project>