<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="SampleProject" id="d119b449-df9e-4d99-97c7-a8164d9230db" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property key="ModelItem.reportFolder" type="java.lang.String"/><con:property key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="gui.note.0">200;202;220;273;1. Getting Started
------------------------------------------------
This is a simple Web LoadTest that uses a soapUI MockService as its target. It illustrates the basic Generator -> Runner -> Analysis concept of loadUI components

Double-click the TestCase and run it to see what we're talking about!</con:property><con:property key="miniature">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
2TNCEmXCYvwf6pJdzXYSNxgAAAAASUVORK5CYII=
</con:property><con:property key="gui.note.1">205;626;200;150;2. Assertions and Logging
-------------------------------------
This TestCase extends the first by adding a couple of assertions and a TableLog to catch failed responses. </con:property><con:property key="gui.note.2">997;621;263;153;4. Controlling Flow 
-------------------------------------
This TestCase shows how flow-control components can be used to combine multiple runners for creating complex Load Scenarios. It also introduces the soapUI Runner for running a soapUI TestCase as a part of your LoadTest</con:property><con:property key="gui.note.3">1003;200;265;173;3. Schedulers and Generators
---------------------------------------
This TestCase shows how multiple generators can be combined within a LoadTest to generate varying load over time. Schedulers are used to add bursts of simulated Load</con:property></con:attributes><con:scene label="Simple Web LoadTest" id="f53a7146-d347-4f03-81d7-bfff0caa41a0" version="11"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">488</con:property><con:property key="gui.layoutY">202</con:property><con:property key="gui.note.0">200;407;252;75;This FixedRate runner is configued to issue 10 request triggers per second</con:property><con:property key="gui.note.1">200;637;224;150;The WebPage Runner issues a request to the specified web page address each time it receives a trigger message. 

The display to the right shows ongoing statistics</con:property><con:property key="gui.note.2">201;922;222;305;The statistics component is connected to the output of the Web Page Runner which outputs the response-time for each issues request. 

Some thing to try:
- openthe settings dialog and select which values you want to show
- try minimizing the component (with the top-right [-] button)
- try increasing or decreasing the load generated by the FixedRate trigger (by turning the knob) to see how the statistics change

</con:property><con:property key="gui.note.3">1241;627;350;100;The MockService is used in this tutorial to have something to test against . It is started when the LoadTest starts and the number of Requests will be the same as the Requests sent by the WebPage Runner</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">395;200;966;109;This is a simple Web LoadTest showing you how to connect a basic Generator -> Runner -> Analysis LoadTest. 

Make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then run the LoadTest by pressing the Run button on the top left toolbar (Next to the "TestCase" menu). You will see the WebPage Runner starting to send requests and statistics being displayed in the Statistics Component. 

This LoadTest has no configured limit, it will run until you stop it manually with the Stop button. Once you have stopped it, be sure to generate a report with the report-button at the top right</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="0b1546d7-feeb-4d93-b3c9-f6ac151594fc" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2de883b82ad336b678de15dbe30b7622</con:property><con:property key="gui.layoutX">533</con:property><con:property key="gui.layoutY">626</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="2cb44449-032c-4163-8408-e5b61bce2d3f" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">677</con:property><con:property key="gui.layoutY">395</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="7c508081-aa40-49c4-8722-246670b4a417" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">5a209e25b9d2723849766176f6f19457</con:property><con:property key="gui.layoutX">583</con:property><con:property key="gui.layoutY">919</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="f01e8c30-2fd1-417c-87bf-f8c3ae153c4b"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1205</con:property><con:property key="gui.layoutY">809</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="2cb44449-032c-4163-8408-e5b61bce2d3f/triggerTerminal" inputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/triggerTerminal"/><con:connection outputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/resultTerminal" inputTerminalId="7c508081-aa40-49c4-8722-246670b4a417/inputTerminal"/></con:scene><con:scene label="Complex Load Generation" id="234ea2c5-c94b-4e44-aeae-bd37cd09069b" version="19"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1325</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
</con:property><con:property key="limits">Time=600;</con:property><con:property key="gui.note.0">228;402;352;65;The first scheduler starts a Ramp Generator that will ramp from 0 to 100 req  / sec over the first 2 minutes of the LoadTest</con:property><con:property key="gui.note.1">742;390;341;87;Once the Ramp-up is finished, a Random Load Generator is started for the remains of the Test, which will generate a base load fo 100 requests / sec with Gaussian random distribution</con:property><con:property key="gui.note.2">1206;396;448;75;This schduler will add an additional load of 100 req / sec every 10 seconds at the start of each minute. The scheduler will itself be started at the same time as the random generator.</con:property><con:property key="gui.note.3">508;200;798;82;This TestCase shows how to use schedulers in combination with Generators to generate varying load over time: it first Ramps from 0 to 100 requests / sec over the first two minutes, then maintains a randomized base load with reoccuring Burst of requests for the rest of the Test.

The TestCase has its execution limit set to 10 minutes (see toolbar above)</con:property><con:property key="gui.note.4">200;1268;315;114;All Generators are configured to trigger the same Web Page Runner, but you could just as well trigger different ones. 

Its output goes to a standard stastics component as usual</con:property><con:property key="gui.note.5">1426;1298;420;58;Our trustworthy soapUI MockService is once again used as a standin for a real service.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="133d26ad-1f1d-44b0-849c-c9dc31549d48" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2de883b82ad336b678de15dbe30b7622</con:property><con:property key="gui.layoutX">642</con:property><con:property key="gui.layoutY">1244</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="e6588efe-e0c8-463b-b604-398edb7881d5" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">1241</con:property><con:property key="gui.layoutY">917</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="d9d3b5d3-00e3-4654-b75f-4276c0135340" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )
direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

display = new DelayedFormattedString( '%d %s', 500, currentRate.longValue(), direction )
scheduled = false
future = null

onRelease = {  display.release() }

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
		if (start.value != 0) {
			if (msPerUnit/start.value > period.value * 1000) {
				targetReached = true
				currentRate = end.value
			}
		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	display.setArgs( currentRate.longValue(), direction )
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			else 
				currentDelay = 1 //Handling edge cases
		} 
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			display.setArgs( currentRate.longValue(), direction )
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		display.setArgs( currentRate.longValue(), direction )
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
		started = false;
		scheduled = false;
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	if ( event.key == "COMPLETE" ) {
		reset()
	}
}


//Layout
layout  { 
	property( property:start, label:'Start', min:0 ) 
	property( property:end, label:'End', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', fString:display, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="start" type="java.lang.Long">0</con:property><con:property key="end" type="java.lang.Long">100</con:property><con:property key="period" type="java.lang.Long">120</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Ramp.groovy</con:property><con:property key="_digest">becdfee00487f8aa9960b15f779e4ef2</con:property><con:property key="gui.layoutX">229</con:property><con:property key="gui.layoutY">906</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

display = new DelayedFormattedString( '%d/%s', 200, rate.value, unit.value )
randomDisplay = new DelayedFormattedString( '%d %s', 200, factor.value, "%" )

random = new Random()

timer = new Timer(true)

future = null

onRelease = {  display.release() }

schedule = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			schedule()
		}
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel()
		if (stateProperty.value)
			future?.cancel()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		display.setArgs(rate.value, unit.value)
		randomDisplay.setArgs(factor.value, "%")
		schedule()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
	}
	
	if ( event.key == "START" ) {
		future?.cancel()
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Base Rate', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	
	node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
			images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
	
	separator( vertical:true )
	property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1 )
	separator( vertical:true )
	box( widget:'display', layout:'align center') {
		node( label:'current rate', fString:display )
		node( label:'random', fString:randomDisplay )
	}
}

//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'current rate', fString: display )
		node( label: 'random', fString: randomDisplay )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if (running)
	schedule();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property><con:property key="type" type="java.lang.String">Gaussian</con:property><con:property key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Random.groovy</con:property><con:property key="_digest">33856beef7937e0da8eb86d296f83602</con:property><con:property key="gui.layoutX">678</con:property><con:property key="gui.layoutY">915</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval" id="e36a65c3-b2e1-4db7-967b-bf70cb77182b" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">0</con:property><con:property key="duration" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">387f400ca1a8c62df8cd212db436e30f</con:property><con:property key="gui.layoutX">230</con:property><con:property key="gui.layoutY">570</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval (1)" id="f491d887-a1e7-4b12-8174-0b4a9f584525" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">2</con:property><con:property key="duration" type="java.lang.Long">8</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">387f400ca1a8c62df8cd212db436e30f</con:property><con:property key="gui.layoutX">735</con:property><con:property key="gui.layoutY">576</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Scheduler" id="ee825185-22ab-42ed-852a-c87859ffbc47" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop at a specified day &amp; time
 *
 * @help http://www.loadui.org/Schedulers/scheduler-component.html
 * @category scheduler
 * @nonBlocking true
 * @dependency org.quartz-scheduler:quartz:1.8.3
 * 
 */

import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.FormattingUtils
import com.eviware.loadui.util.layout.DelayedFormattedString
import org.quartz.Scheduler
import org.quartz.CronTrigger
import org.quartz.CronExpression
import org.quartz.impl.StdSchedulerFactory
import org.quartz.JobExecutionContext
import org.quartz.JobExecutionException
import org.quartz.Job
import org.quartz.JobDetail
import java.util.Calendar
import java.util.Date
import org.quartz.listeners.JobListenerSupport
import com.eviware.loadui.util.layout.DelayedFormattedString
import java.text.SimpleDateFormat
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.layout.SchedulerModel

def counter = 0
def durationHolder = 0
def runsHolder = 0
def startSent = false

def schedulerModel = new SchedulerModel()

createProperty( 'day', String, "* (All)" )
createProperty( 'time', String, "0 0 0" )
def duration = createProperty( 'duration', Long, 0 )
def runsLimit = createProperty( 'runsLimit', Long, 0 )

def canvas = getCanvas()

sendStart = { 
	sendEnabled( true ) 
	startSent = true
	counter++
	if(runsHolder > 0 &amp;&amp; counter >= runsHolder){
		unscheduleStartTrigger()
	}
	//setActivityStrategy(ActivityStrategies.BLINKING)
	pauseTotal = 0
}

sendStop = { 
	sendEnabled( false ) 
	//setActivityStrategy(ActivityStrategies.OFF)
	unscheduleEndTrigger()
	endTrigger = null
	pauseTotal = 0
}

class SchedulerJob implements Job {
	void execute(JobExecutionContext context) throws JobExecutionException {}
}

def startTrigger = null
def startJob = new JobDetail("startJob", "group", SchedulerJob.class)
startJob.addJobListener("startJobListener")

def endTrigger = null
def endJob = new JobDetail("endJob", "group", SchedulerJob.class)
endJob.addJobListener("endJobListener")

def paused = false
def pauseStart = -1
def pauseTotal = 0
def endTriggerStart = null //this is the time when latest enable event was sent
def rescheduleAfterPause = false
def endTriggerTimeLeft = null

def maxDuration = 0;

def scheduler = new StdSchedulerFactory().getScheduler()
scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"startJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStart()
		scheduleEndTrigger(new Date(), durationHolder)
	}
})

scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"endJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStop()
		schedulerModel.incrementRunsCounter()
	}
})

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION) {
		if(!paused){ 
			scheduleStartTrigger()
		}
		else if (rescheduleAfterPause){
			def now = new Date()
			pauseTotal += now.getTime() - pauseStart.getTime()
			scheduleEndTrigger(now, endTriggerStart.getTime() + durationHolder + pauseTotal - now.getTime())
			rescheduleAfterPause = false
		}
		scheduler?.start()
		paused = false
	}
	else if( event.key == CanvasItem.STOP_ACTION) {
		scheduler?.standby()
		paused = true
		pauseStart = new Date()
		if(endTrigger != null){
			unscheduleEndTrigger()
			endTrigger = null
			rescheduleAfterPause = true
		}
	}
	else if( event.key == CanvasItem.COMPLETE_ACTION) {
		reset()
	}
	else if(event.key == CounterHolder.COUNTER_RESET_ACTION){
		reset()
		scheduleStartTrigger()
		scheduler?.start()
	}
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ day, time, runsLimit, duration ] ) {
		validateDuration()
		if( !canvas.running ){
			updateState()
		} 
	}
}

validateDuration = {
	def expr = new CronExpression(createStartTriggerPattern())
	def calendar = Calendar.getInstance()
	def nextDate = expr.getNextValidTimeAfter(calendar.getTime())
	calendar.setTime(nextDate)
	calendar.add(Calendar.SECOND, 1)
	def dateAfterNext = expr.getNextValidTimeAfter(calendar.getTime())
	def diff = dateAfterNext.getTime() - nextDate.getTime()
	if(diff/1000 &lt; duration.value){
		duration.value = diff/1000
	}
	maxDuration = diff
}

updateState = {
	def expr = new CronExpression(createStartTriggerPattern())
	schedulerModel.setSeconds(expr.seconds)
	schedulerModel.setMinutes(expr.minutes)
	schedulerModel.setHours(expr.hours)
	schedulerModel.setDays(expr.daysOfWeek)
	schedulerModel.setDuration(duration.value * 1000)
	schedulerModel.setMaxDuration(maxDuration)
	schedulerModel.setRunsLimit((int)runsLimit.value)
	schedulerModel.notifyObservers()
}

createStartTriggerPattern = {
	def startTriggerPattern = "${time.value} "
	startTriggerPattern += "? * "
	if(day.value.equals("* (All)")){
		startTriggerPattern += "* "
	}
	else{
		startTriggerPattern += "${day.value.substring(0,3).toUpperCase()} "
	}
	startTriggerPattern
}

scheduleStartTrigger = {
	runsHolder = runsLimit.value
	durationHolder = duration.value * 1000
	
	def startTriggerPattern = createStartTriggerPattern()
	unscheduleStartTrigger()
	scheduler.addJob(startJob, true)
	startTrigger = new CronTrigger("startTrigger", "group", "startJob", "group", startTriggerPattern)
	scheduler.scheduleJob(startTrigger)
	
	def now = new Date()
	def next = startTrigger.getFireTimeAfter(now)
	if(now.getTime() &lt;= next.getTime() - maxDuration + durationHolder){
		sendStart()
		scheduleEndTrigger(now, next.getTime() - maxDuration + durationHolder - now.getTime())
	}
	else{
		sendStop()
	}
}

scheduleEndTrigger = {startTime, durationInMillis ->
	if(durationHolder > 0){
		def calendar = Calendar.getInstance()
		calendar.setTime(startTime)
		calendar.add(Calendar.MILLISECOND, (int)durationInMillis)

		def endTriggerPattern = ""
		endTriggerPattern += "${calendar.get(Calendar.SECOND)} "
		endTriggerPattern += "${calendar.get(Calendar.MINUTE)} "
		endTriggerPattern += "${calendar.get(Calendar.HOUR_OF_DAY)} "
		endTriggerPattern += "${calendar.get(Calendar.DAY_OF_MONTH)} "
		endTriggerPattern += "${calendar.get(Calendar.MONTH) + 1} "
		endTriggerPattern += "? "
		endTriggerPattern += "${calendar.get(Calendar.YEAR)} "
		
		unscheduleEndTrigger()
		scheduler.addJob(endJob, true)
		endTrigger = new CronTrigger("endTrigger", "group", "endJob", "group", endTriggerPattern)
		scheduler.scheduleJob(endTrigger)
	}
}

reset = {
	counter = 0
	durationHolder = 0
	runsHolder = 0
	paused = false
	pauseStart = -1
	pauseTotal = 0
	endTriggerStart = null
	rescheduleAfterPause = false
	endTriggerTimeLeft = null
	unscheduleStartTrigger()
	unscheduleEndTrigger()
	startTrigger = null
	endTrigger = null
	startSent = false
	//setActivityStrategy(ActivityStrategies.OFF)
	schedulerModel.resetRunsCounter()
}

unscheduleStartTrigger = {
	try{
		scheduler.unscheduleJob("startTrigger", "group")
	}
	catch(Exception e){}
}

unscheduleEndTrigger = {
	try{
		scheduler.unscheduleJob("endTrigger", "group")
	}
	catch(Exception e){}
}

onRelease = {
	scheduler.shutdown()
}

layout {
	node( widget: 'schedulerWidget', model: schedulerModel, constraints: 'span 5, gaptop 10' )
	separator( vertical: false )
	property(property: day, widget: 'comboBox', label: 'Day', options: ['* (All)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], constraints: 'w 100!' )
	separator(vertical: true)
	property( property: time, widget: 'quartzCron', label: 'Time', constraints: 'w 130!' )
	separator(vertical: true)
	property( property: duration, widget: 'time', label: 'Duration', constraints: 'w 130!' )
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Day', fString:new DelayedFormattedString( '%s', 1000, day ) )
		node( label:'Time', fString:new DelayedFormattedString( '%s', 1000, value { time.value.replace(' ',':') } ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%s', 1000, value { FormattingUtils.formatTime( duration.value ) } ) )
	}
}

settings( label: "Basic" ) {
	property( property: runsLimit, label: 'Runs')
}

validateDuration()
updateState()</con:property><con:property key="day" type="java.lang.String">* (All)</con:property><con:property key="time" type="java.lang.String">0 * *</con:property><con:property key="duration" type="java.lang.Long">10</con:property><con:property key="runsLimit" type="java.lang.Long">0</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Scheduler</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Scheduler.groovy</con:property><con:property key="_digest">9302c34b6e77db8f25c1126791029307</con:property><con:property key="gui.layoutX">1195</con:property><con:property key="gui.layoutY">585</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="05458282-13f4-4c65-a2fe-0687b851e4cc" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">false</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">5a209e25b9d2723849766176f6f19457</con:property><con:property key="gui.layoutX">697</con:property><con:property key="gui.layoutY">1527</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="8a8cf6f5-e6f6-4421-9a9f-5ff5261affa5"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1418</con:property><con:property key="gui.layoutY">1432</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e36a65c3-b2e1-4db7-967b-bf70cb77182b/outgoingTerminal" inputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/stateTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/stateTerminal"/><con:connection outputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/outgoingTerminal" inputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/stateTerminal"/><con:connection outputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/resultTerminal" inputTerminalId="05458282-13f4-4c65-a2fe-0687b851e4cc/inputTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/stateTerminal"/></con:scene><con:scene label="Complex Load Scenario" id="5dd7734e-f092-4152-b2e8-3663dac12bf0" version="41"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1332</con:property><con:property key="gui.layoutY">619</con:property><con:property key="miniature">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
LMPvnuxG+P8BHCmiberGgtwAAAAASUVORK5CYII=
</con:property><con:property key="gui.note.0">211;204;497;242;This TestCase shows you how to use the Splitter and Delay components to combine multiple runners into one larger Load Scenario.

- An initial splitter is used after the Load Generator to divide load between three "paths": 
1) The first with 3 web requests, with a delay between the second and third
2) The second running a soapUI TestCase after an initial delay
3) The third first running a seperate soapUI LoadTest after which it will join the path of the second option.

Statistics components have been added for both soapUI Runners and the last WebPage Runner. 

As always the soapUI mockservice is used to provide a stand-in for the relate target systems and services.

This LoadTest will run for ten minutes or 10000 requests (whichever comes first)</con:property><con:property key="limits">Requests=10000;Time=600;</con:property><con:property key="gui.note.1">246;2226;248;54;The standard soapUI MockService used in our samples.</con:property><con:property key="gui.note.2">210;627;350;38;This is the first execution path</con:property><con:property key="gui.note.3">902;710;337;38;This is the second execution path</con:property><con:property key="gui.note.4">1483;640;320;55;And this is the third execution path which "joing" the second one after first running a soapUI TestCase</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="551df37b-ca36-4721-a266-33d59cff8bd3" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2de883b82ad336b678de15dbe30b7622</con:property><con:property key="gui.layoutX">208</con:property><con:property key="gui.layoutY">729</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (1)" id="326df2a4-1c3f-49a2-b54c-692b08aff9fa" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/search.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2de883b82ad336b678de15dbe30b7622</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">1492</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="0ef58711-1bba-4b7d-8f61-3d1793b613c3" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
waitingDisplay = new DelayedFormattedString( ' %d  ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
waitingCount = 0;
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    waitingCount++;
    waitingDisplay.setArgs(waitingCount);
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                 waitingCount--;
    			waitingDisplay.setArgs(waitingCount);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        					waitingCount--;
    						waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        						waitingCount--;
    							waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display' ) {
        node( label:'delay ', fString:display, constraints:'w 60!' )
        node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display, constraints:'w 60!' )
		node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">500</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">35a1e49382a3c7fd2c2c87873711ac7c</con:property><con:property key="gui.layoutX">309</con:property><con:property key="gui.layoutY">1255</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="04f2b993-146a-4b70-b022-94456e361e46" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">96</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">946</con:property><con:property key="gui.layoutY">200</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter" id="2bde326b-ab20-48e8-ab2b-5913ee042048" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 * 
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */
 
 import java.util.concurrent.Executors
 import java.util.concurrent.TimeUnit

 import com.eviware.loadui.api.events.PropertyEvent
 import com.eviware.loadui.util.collections.ObservableList
 import com.eviware.loadui.util.layout.DelayedFormattedString
 import com.eviware.loadui.api.events.ActionEvent
 
 // one output minimum
 
 createProperty('selected', String, "Round-Robin" )
 createProperty('outputs', Integer, 1 )
 createProperty('total', Integer, 0 )
 createProperty('counterUse', Boolean, true )
 createProperty('updateCounterDelay', Long, 500)
 
 // locals

 total.value = 0
 
 def roundRobinNext = 0
 ObservableList outputStats = new ObservableList()
 outputStats.add(0)
 for( i in 1..9 ) {
    outputStats.add(-1)
}
 cnt = 0
 while( outputs.value > cnt ) {
 	createOutgoing()
 	outputStats.set( cnt, 0 )
        cnt++
 }
    
 display = new DelayedFormattedString( '%d', 500, 0 )
 outputDisplay = new DelayedFormattedString( '%s', 500, value({ outputStats.findAll({ it >= 0 }).join('          ') }) )

 executor = Executors.newSingleThreadScheduledExecutor()
 future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 

 onMessage = { incoming, outgoing, message ->
 	super.onTerminalMessage(incoming, outgoing, message)
   try {
    def next = 0;
    switch( selected.value ) {
        case "Round-Robin": 
            next = roundRobinNext
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            if( roundRobinNext + 1 == getOutgoingTerminalList().size() )
                roundRobinNext = 0
            else
                roundRobinNext++
            break
        case "Random" :
            random = new Random()
            next = random.nextInt(getOutgoingTerminalList().size())
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            break
    }
    total.value++
    display.setArgs( total.value )
   } catch ( Exception e ) {
 	println e.printStackTrace   
   }

} 
 addEventListener( PropertyEvent ) { event ->
    if( event.event == PropertyEvent.Event.VALUE ) {
        switch( event.getProperty().getKey() ) {
            case 'outputs': 
                while ( outputs.value != getOutgoingTerminalList().size() ) {
                    if ( outputs.value > getOutgoingTerminalList().size() ) {
                        createOutgoing()
                        outputStats.set(getOutgoingTerminalList().size() -1, 0)
                    } else {
                        total.value = total.value - outputStats.get(getOutgoingTerminalList().size() -1)
                        display.setArgs( total.value )
                        outputStats.set(getOutgoingTerminalList().size() -1, -1)
                        deleteOutgoing()
                    }
                }
    		outputStats.update()
                break;
        }
    }
 }
 
 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
	  executor.schedule( { 
		executor?.shutdownNow()
	  	executor = Executors.newSingleThreadScheduledExecutor()
	  }, updateCounterDelay.value, TimeUnit.MILLISECONDS)
	}
	
	if ( event.key == "START" ) {
           if ( future == null )
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
	
	if ( event.key == "RESET" ) {
	    future?.cancel(true)
	    executor?.shutdownNow()
	    roundRobinNext = 0
	    selected.value = "Round-Robin"
	    total.value = 0
	    display.setArgs( 0 )
            for( i in 0..9 ) {
	     if( outputStats.get(i) > -1 )
	          outputStats.set(i as Integer,0)
	    }
	    outputStats.update()
	    executor = Executors.newSingleThreadScheduledExecutor()
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
}

 onRelease = {
   display.release()
	outputDisplay.release()
   future.cancel(true)
   executor.shutdownNow()
 }

 
 settings( label: "Counter Settings", layout: 'wrap 2' ) {
	box( layout:"wrap 1", constraints:"growx" ) {
		property(property: counterUse, label: 'Enable Counters' )
		property(property: updateCounterDelay, label: 'Time interval for refreshing counters(ms)' )
	}
 }
 
 layout ( layout:'gap 10 5' ) { 
    node(widget: 'selectorWidget', label:"Type", labels:["Round-Robin", "Random"], default: "Round-Robin", selected: selected)
    separator( vertical: true )
    node( widget: 'sliderWidget', property: outputs, constraints:'center, w 270!' )
    separator( vertical: true ) 
    box( layout: 'wrap, ins 0' ) {
	    box( widget:'display',  constraints:'w 100!' ) {
			 node( label:'Count', fString:display, constraints:'wrap' )
	    }
	    action( label:'Clear', action: {  
	       total.value = 0
		    display.setArgs( 0 )
			 for( i in 0..9 ) {
			     if( outputStats.get(i) > -1 ) outputStats.set(i as Integer,0)
			 }
			 outputStats.update()
	    }, constraints:'right' )
	}
    separator( vertical: false )
    node( widget: 'counterWidget', counters: outputStats , onOff: counterUse, constraints:'span 5,center')
  }
 
compactLayout() {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', fString: display )
		node( label: 'Distribution', fString: outputDisplay )
	}
}</con:property><con:property key="selected" type="java.lang.String">Round-Robin</con:property><con:property key="outputs" type="java.lang.Integer">3</con:property><con:property key="total" type="java.lang.Integer">0</con:property><con:property key="counterUse" type="java.lang.Boolean">true</con:property><con:property key="updateCounterDelay" type="java.lang.Long">500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Splitter.groovy</con:property><con:property key="_digest">b1f551a422f26b85a079314c971698fc</con:property><con:property key="gui.layoutX">806</con:property><con:property key="gui.layoutY">429</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="6002c29e-6cf9-4772-83cd-c862927e5aaa"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">861</con:property><con:property key="gui.layoutY">1439</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="bbdf5140-9253-4ead-9782-cbb0a742264e"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MockService 1</con:property><con:property key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">531</con:property><con:property key="gui.layoutY">2222</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5bf761b9-8f2d-44ed-adc9-72d49eb32927" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
waitingDisplay = new DelayedFormattedString( ' %d  ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
waitingCount = 0;
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    waitingCount++;
    waitingDisplay.setArgs(waitingCount);
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                 waitingCount--;
    			waitingDisplay.setArgs(waitingCount);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        					waitingCount--;
    						waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        						waitingCount--;
    							waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display' ) {
        node( label:'delay ', fString:display, constraints:'w 60!' )
        node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display, constraints:'w 60!' )
		node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">600</con:property><con:property key="selected" type="java.lang.String">Uniform</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">35a1e49382a3c7fd2c2c87873711ac7c</con:property><con:property key="gui.layoutX">877</con:property><con:property key="gui.layoutY">1137</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner (1)" id="1bc8e660-d490-4a74-a86e-b54c476cf501"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1387</con:property><con:property key="gui.layoutY">774</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (2)" id="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/userguide/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2de883b82ad336b678de15dbe30b7622</con:property><con:property key="gui.layoutX">213</con:property><con:property key="gui.layoutY">993</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="e9541fa4-a45a-48d2-a964-fe7086dc2511" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">5a209e25b9d2723849766176f6f19457</con:property><con:property key="gui.layoutX">860</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (1)" id="660696d8-1a52-40c2-9fdc-335d80d83bf4" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">5a209e25b9d2723849766176f6f19457</con:property><con:property key="gui.layoutX">217</con:property><con:property key="gui.layoutY">1807</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (2)" id="fd7c8cf3-894d-4297-8b24-fa3c3db378c1" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">5a209e25b9d2723849766176f6f19457</con:property><con:property key="gui.layoutX">1473</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:connection outputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/output" inputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/triggerTerminal"/><con:connection outputTerminalId="04f2b993-146a-4b70-b022-94456e361e46/triggerTerminal" inputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/incomingTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 1" inputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 2" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/output" inputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 3" inputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/triggerTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/resultTerminal" inputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/triggerTerminal"/><con:connection outputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/resultTerminal" inputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/incomingTerminal"/><con:connection outputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/resultTerminal" inputTerminalId="e9541fa4-a45a-48d2-a964-fe7086dc2511/inputTerminal"/><con:connection outputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/resultTerminal" inputTerminalId="660696d8-1a52-40c2-9fdc-335d80d83bf4/inputTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="fd7c8cf3-894d-4297-8b24-fa3c3db378c1/inputTerminal"/></con:scene><con:scene label="Web LoadTest with Assertions" id="e00b1ef7-ae48-48e1-972a-f8b8caefe44c" version="35"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">490</con:property><con:property key="gui.layoutY">624</con:property><con:property key="gui.note.0">200;452;282;93;Here the same Generator -> Runner -> Analysis setup as in the first example is set up, but the runner and statistics components have been minimized to make room for the assertions below</con:property><con:property key="miniature">iVBORw0KGgoAAAANSUhEUgAAAMoAAACSCAYAAAAEuFUyAAAgvklEQVR42u1dB1QVR9sOJSpENEaN
JYktKrHEaNT8xi+JLdWoiZrYK6jYQVHBXjGCYkNFEQULXUGQrmjsPXaNvfcGms+U/5z//fcZmc3e
ywL3wq0w7znPmdm5s3NnZueZtrPv+9prQoQIESJESLGTuzcSSMByIFqkhcqta3G0cb0fwRUwPVYF
elFM5ByKDJvJrkWLtFC5cWUzCVgORIu0UPn7eQoJWA5Ei7RgovyVlSwaqZnBn4FokWJEERAjStEh
yrkTIXTyyGqKi55Dc2a60Znf1rLwm5cjKOthPG2OnE2BAeNY+OF9gZQQO5eGDfmZdqYvpt8OBrG4
T+9vod0ZSyg9aQEFrZigkf7ju7G0Z8dS8vcdRUcPrGJhR/avpIN7VtCGkCl06ex6OipdJ8f7st9S
t/pRwOKxNG2yK6UlLqBYKV+DXbvQ4b2BdPncRkpO8KNTx9bQ76dCWfyzx0MoYNEY+qFTO+rUsS2N
ce8l5+GPJ1uZO2RQV0EUIWJEESOKEEEUQRQh5iTK80cJdONSBPM/uRdHO9MW0cpl42mh32g6fzKU
NkfNZr9lPoinX+YMY9MfXL94nEBTJg6k2dI0DQtSTIkQfv9mDIUGT5KnT78dCpKnXnCXSdMpuJO8
BtIwt59p36/L2DWmVosWuNOi+aPZ9eiRPVge9u4MoPbftqKXmUl0cPdyiomYxX73+2UEcx/e3ixN
B9fQ7BlDaGPoVJYGL9szKc+npekZn86dPBJMCZvnyuVGfJQJ1wP7/0AvnyXRxdPr6OGtTSwsIfYX
5v73aSIFr/Ri08YdaQvZVO7I/kC5bFFhM5g7bYqrxgL92YMtFL5+Om2V0lm2ZKwgihhRBMSIIogi
IIgiiMKxavmrHaLdGUvJ328UjRzenU0hrpzfwHbExo3pw1wev3WrFjRLmu4gbKxHbxbmPqonm2IF
r/RmUzHshmFqkxzvR5fObWBTvIDFY2hbij9LOy7ah6WLe5HW/ZubpCndqx2qE4dXs10vTIf+KwH5
QXjvXt9L14kaed+1bQldPLM+e0o3gLzH96dn97ew3TeEYfqI6dsXn/8P9ezeXt4Jw39i1w67Y2tW
edN4z75sl89TytMfTxIFUYSIEUWMKEIEUQRRhAiiFD0c2B0giCJEiBAhQoQIESJEiBAhQoQIESIk
D+nYsSPZ2tpOEjUhRIiKTJ8+XWOLtWXLllmWlL8ZM2bQRx99xPM4ANfiqQkxmfTv3x8NroF2+IAB
A8hSCJLbb1OmTBFkEWLeRihJHUsa4dTE2dlZEEWIWUliNrG3t5/2xRdfCAIIUZerbcqQZ43XjdlA
bD78+D3SFfEJW2nNmrWkzz2mJu9gl64UNLtx8SXVvZtbyZy4fzNxZSGy3+HvjGjSF+nbttOqoCAq
yL26ZOrm03Taf2WcznAZ3JsGDP1Or3s6dPswz7y8fLyb/roVaDBEx8TQsuXLDZrm7i0e1kO829e3
0MVz0QTXVNizcwVlpAdQ3KZf2HUhsk9Z4zuS31cfMTdTwrKfWtGZ4d/SKQn3x3Zg4dq4NrUvHRiu
/psafFrXp8Vfv/oPXTJ18vZi2nCwBsPwqXUoMLUW809cUpvW7a9Jo2fXpp5udSloe03yWlRbjqsP
WnVyyjMvf90Ooge7m1LmoWaUsroJczfOb0xnEprSgciP2bU+eHqwBT072Fzv+/LCsik1rIcoN6/G
krlRGKI86VjZpNAlU6dOnaJLly4ZFa1bt84zL39en09Pd1WyaAR4lbEeopz6bR2ZG4UhChqNr68v
denShZKTkw3WEE+fPk2hoaHydXp6OnN1mftzoqxcudIo0IUod+/eNTpZC4shQ4ZYD1Gs/EMgVuEz
Z86ktm3b0s8//0y///67wYiiFq7LApkT5cKFC0aBrkQxVF0YA+fOnRNEMTVRsrKyGJQP4vLlywZH
XkRR7iJxopw9e5bwMnHcuHHMBdzc3GQ/MHDgQI3fXn/9dQa8Gef+9957T/YjTX2Icv78eXJxcSF3
d3fmAlOnTpX948ePl/34f+4H0JC5H2Xg/mnTpsl+Dw8P6tOnD3Xt2pXq1KmDPMkoU6aM7Ff+hjxZ
LVES4+bRob0r6NTRNUwH1J2rUUw31Z1r0ez32TPc2O9/ZibT1fMbmf6pk0eDmWKDBg0aMAUIULiA
OJpfxC1n7hXpHmMRBZWuLzBiHDt2jDWayZMna2BStosGgYZcv359dk9uRNHeauVEOXHiBP344480
MNyFOo/uzPzdB3Wnzq6v/I5xb5CNvQ3ZVLUlm7dsqMLHFeTG1KBdA3rjaGlyCHckxxVvUMlZpVg4
0syPKMg3Jwry8tNPP1Ef3z7UbUI36ja2G41cOoqFAcOGDaPuM7pTN/du1MurF3UbI8UZ14391qFD
ByrvKuXJ/jWq1rwa+3+7Fnb04Ydsx41s3rChikFvk0OwA9lWt9UgCVDyi5KqREGexIiighfZ+nSN
RRQ0nrwAQqiFHTx4kLp37044nAjUrl1b40G//fbbsp83UO0MjB07lnJbzB89epTatWtHffv2ZS5Q
tWpVjf+wtf23gVWuXFn2Z5+1YnjnnXdkP9LMiyictJwoKGfv3r0Z4eECLotcZP+gQYOYW716dYZ3
331XhvL6gw8+kP3IG/eDAMp7lKhVq5bsR2fK/ciT1RIFqnYwWnBl0ZkP4+lJtsbE5Us9mduiRTMa
Mawbi7t8iScFLhtHvj4jmHbC7Sn+NHHCAFri7yGnsXiBO00Y14/5sx4lGI0ohw8fZnj8+DFrSCEh
IXIY4O/vT2fOnKHAwEBGDoQdOHCA9uzZQ61atSK75nZk/9PrOXpEJVFwjzZRpIb/T167XvivTz75
hL4P+541GqRTunRpOU2HEAdVotg2tMuVKEgzN6K4urqS9tTr0KFD1LJlS/p207fUOqw182Oq9Oab
b7L0qlWrRqX8Xo1WpUqV0ih/iRIlqNTsV2GY/vFwPqKUcClBFadVzFFvgH0beyo9rLTqiII8FdkR
hZMmL3C1nRzQGG+KNcr+/fsZPD09GVEePnwohwGh6zYwomDnioeBJDt37qS6detS9U+qs4Zc4/Ma
VOv9WswPoBflftyjJIo0/36W3/bwvn37qHnz5lSvXj02XwcqVaok+4GyZcvKfvTg3A+icH/NmjVl
P9JUIUq8g4PDLbU1CvLdqFEj1iHAZdM6qXfnjRZE4X41onC/GlG0OxNt5LZGQZ7E1MsMi/ndu3cz
oBGBKFhf8DCAE0UZ9uuvv9L27dtZQ83tQSsbAe5REMVHQqn8iIJ7qlSpQu81kBbjg19nc3qHsg5y
mnb/sSPHaGmdUtaGHGMdqULFV2sU+2/sybmRM9lJvXJu+eBE6devH1yb3BbzfNSstLEy1fmsDpte
Ys0FF0BnUMW/CtWpL02hpr9LtVvVZo0awEHIqjOrUl3nulTDqwZV86rGOhYQ5f3336eanWuRc0Nn
OS0lqnetTs4fONNb28pThb0V2X/ydJEnq17Mw4WGRGguhDLniPXTKSN1Ie3evoTuXo9mSqYx9Vq/
doq8QH96L06asiUxJdnQjDhkUBc6c3wtfdnuP/T5Z59Qj+7fsbjBgV5MiTXXomhIouzYsYPh008/
lf1KcKIow0CS1NTUXEmiDdyTTRQbOzu7Qbq8cMSIhXvLnn7z3wVuyX8XuCXnlSIbG5scPTAW9srp
Fp8mAUiTEyWv81qcKOgQcJ+Tk5PqVK58+fKyH7tqGtMne3vVeBj51EYNbUijnOxHh8H9yJMYUcww
omBKpS9AEn3vwX9JDeOprm/mQUasSdBI4XJ/blBOw0AONT/S1Gd7OCMj4xUpm/1L0HLlysl+5Mmm
4iuySh2ARkNXXivXVjJp7HJO13KbuilHbuRJEMUMRElJSTEJdHkzryRKWlraqxFCMWoo/dpQ/qZs
pMoFP9LUhyggOO5HenABNGDuxyjC/co4ed0DcuR2jxIYkdTuR54EUfTAH9lKrgtLFFNCH6LgSI0x
oA9RTNWJ6AtBFD1x5rfgQhEFLw71BbZ6d+3aVaB7reVQpDjrJUQp3gVp7DukBfHq4GCjEkX7PvSi
uaXJ3+nk9vu2bdtyhOlClIKUz5QQRLFw2bhxI2uc+cXDy7mCpI+tU2WDwHmoPXv30apVq1QbzG6J
JAHLluU6+h0/cZL27t2rEZ69oM5Vbt26ZdBGHRERSd7e3oIoQjQ5Uq5cuecGTO9/O3funGujWLNm
DUVHa349qdj67YtzYTgIUID/fW4orF4dTGM9PcmQaYpmZgXi5OT0uVp49ptqg4vamTA1KVmyZAbO
hOVCGiFCTCtqjc+YDbJx48ZUkDwJoggxu+BEreRMx5GXihUrxpjgL8epBWbr1equL4HMICNFqxFi
NOFaFm1tbd1GjhyJt9Rh+N4jmwB2BR1pTC0KNatChBheHB0dRxh6mmgp01UhQiymcUEXgCWUBdvc
4okKsdgeuFmzZmNEbRZRMbcGSr1wLaWGruW6eyOBdAFIomtcU0DX8t25EU95YdKkSZRfHHPC6ohi
Ss2TBUFKoj/5zh0uX+tcrmtSfAkXzkYT9yuBt9d9en2j+ltBsMB3ZIHuO38qnBJifcln1hB2rWv5
bl2Lo7wweWJ/yi+OKbE+ZKrGtdURxRI0UBpDW+WNK5tJG2Pce7IRZOe2AFL7vTBAuoZIR+fyXZbi
54OhQ4eSLvHMAasjytmT68iaoGu5cOJ5rEc/1oC9vLwoJX6uUU9Xf9++pUm/+dE1vfVrJzLtMpbw
PZOBvm0yj1haBepRwedwMhcK30AGAMdPsr/Qq87j374SYXQgD4VN4+61KKMQhePkkSDCC1PUU7Nm
zcz2/J5lKzIRRDEAevToITd+AJ/YcjVN+pTrmY7aZQoK57rvsXyZo6c1xH8h76hfR0cHMaLoU+Fe
4/tT394daNDAzuQ+qicLg6IJZZyfun4j9X7R0kK4A7kM+JGFrQ2aSFkP46l1609p/65l7B6Eha+f
Tr8dDCJ/v1EUGDCOXKV04fbu+T1TgtH+uy+YlkcAD+uTTz6m9KQFNGemm0EakpIoaBS7M5bQk7tx
TLlG5oN4muQ1QP4tNXE+rQnypk6d2rEwzzF9mLtr22LmzpoxhOlFU+YFp4URtmi+O8vz/l+XsfDI
jTOYMo97N2LYdbefv6WzJ0JYGsOG/ExJW+YxDZ4vM5MMRpRJ3gOpf79O9PhuLI0e2YNpEvWWnqe/
32iNeNDp9ldWMvPHRMySntE0chvclY020CYasGgM0xXH70MdNf24MW0MnUrBq7zpyP6VdOLwakrZ
6sfKPsa9F82fN5Iy0hbSBM9+9MvsoTTYtQudPraG3Y/fxdSrgEAv1rbNF0bvcZVE2RLjk/+04MEW
psEmrziPbmvqTbt9NVrj+ublyFzv5Q0UOLw30CAjCh/RPvvsE/KdO4I1/CcSSZGPcWP70jmJoGM9
erOO6fdToTRZIpTH6F504fS67IbcWyp3PHlLBAJZRg7vxjorkAi/434QCYoTZ04bTP36dmTE0CYB
/HsyljI/72SL7IiCwq5Y6kmzpg2h6LCZ9NWXn5HXuH60VOpl+IPenrKQ3Ef2ZD3YUal3SZN6YvSO
Hdq3piP7Aik6fCaL+/DWZpor9S54ON4T+tP1i+GMIF999R+maskjuzIx2jxSNM7NUbNZAz+V3SMZ
iigcmL69KkveDVkN/F4AloOVjVX73vzSsoSplxqgulVMvfKocCjvxvCKKUKUNHVgqlb93eWCRUnE
2Zm+iA27Z4+HkL/vKDb0Bq/0kkaHlvJQuyFkCj24uYmRC9OP2Og59PxRArVv3571VKsDveSGdOpY
MJuyHDuwiv3XfN+RRhlRbl+Nou/bt2HTLkwvwtZNkxa3wayBYwqGONCLhk4BBGr5aXM2bUQPDZ1o
KC/iPH+8lZIT/FjvCtJj9Dl6YCWbrmKaw0bLqYOkzmMBIxV61ulTBlkVUaD4ThDFDFOvW5fD6T+f
NjTLYteYi3kQxZwNyJjPzN/XTRDF1ERp0qSJ2RqSMYnSpk2bIksUHH8RRDFhhWNxaM6G9PxxApvi
GQNQhm3I9DL1fL9g7M0WY6Z/8vAqQRQlHuugWV9XGPuFnL6I3zTH4GlePKvHyYMXKSeNha+//pqM
mf5fWanfiuPI2WJnZ7eniBexa1EtmLOz81DRgk0k/LNaQRSrFEEUU0kx+By1yBIlY2VpKv+mjfhK
0tiy3NuBNm4MQ0UfMnNWyBgICQ2ldes3kLHS16Vgfz3dT/88TjM8nmbQ7j17afnyFcZJ/zGzHHDB
mtrznD9vLiVj4HjUOxSzaTMlhg0nY/1HfoX758kOenl5mlEwsF93GjN2rNHS3xM3KN/yvTjVnRKC
WhNcNZxJ/THX3/LD7d2t6NfIzgW+PzdEB3zO3JZNK1rVaDUn82ATiitXji6nNqZtaz+iGe4NCWGn
tjRmriUj3x731nLK3F+f4XhMfRrrUp/cetWja6mvwp7tq0+9fqgnx7EkpK+qkW/5nu2pRtaKTz8q
aV1EebqrIlkr8ivc5cuXLd6cQm4ICwvLt3zK+DAhZ+llgpVkbtcS9iitiii8EAkJCTR//nxmgHTC
hAkWVcEXL15kttf59dmzZ3UyFKQkCh4SjPVwWx+W1ogSExOZy/OoL1EsHbBnyc2JWzVRLBkgSkEs
ahWHEQUmMVBOa4IgioWZnuMPBUSzJmzatElnosTHx9P58+f1QmhoqN73cODLU4buPf716wCcHIcp
b6RhtUSBjb4VK1awSud2xY2Fpk2bsu8dYHMdwDfu3D9x4kTZP2LECHaY0tHRMcfWKdLRhyiYqgGw
cDtgwAD52hjo2bOnKlBm7octeW4stWbNmnK5UNaYmBhmf0VXosTFxRGshsHSF6Zv8OeHkJAQneKp
oVOnTgzQx8z9KBu3JNygQQO5PBUqVMjx7LgpQKskysmTJ00GEKVDhw6Es0RAnz59ZEu6vJLf2PuG
XMncXLQSSEcfopw4cYL++eeffAETcb6+viy+En5+fjnCAKzptMNcXV1pgOcAch3mSgM9BtI7Ce9S
jbk1CEqzGzVqxFB3RF1q2KIhNWrSSCMc/qioKIqMjNSZKBh95s6dS/kJrGY9evSIjh07RmvXrmUu
gE4Hv/FrDpBeLbx58+YMNTvXIseEN6ikbyl687d/TXzjGTrdKEOOGW9Q6XVOOZ4d0rBaomABD3nx
4gXduHGDsR6Vit5PKQgDEJ/j2rVrbBS6d++eRjjSQfj9+/c1wkEUWLRChQJoINyPhsL9GKa5n6H+
K/ftt99m6ehDFJiMy8rKYiPVs2fP6M6dOzRq1ChWXqXAdiNIgfgc6LHxcLFboxaO3SZlOBrAO++8
k6OBvPXWW7K/Xr16sl97RImIiGAk0ZUoGH18fHxY/gcPHpwvUQ4dOkSwGgYXzycpKYn9BvIgDIBx
WVg0RjiPy4H8lihXgpycnJg5bwBh3I9nxP2VKlWS/RxIw2qJggWhLsKJgvgcmM4cOXKEEUUZjqkA
Gg6IogwHUWD7nDeO6tWra/RGcEv6lFIdtjmQjj5EQXxdpoXYlZk5c6ZGfoOCghghNm/erBEeGBjI
wjFVUoajMZRa7pAnUd5KLp8rUUAQ2K3UlSgYffbt26cXgoODZT837LpgwQKNOKmpqSzc399fI5zn
Nb9nmNvUC2lYLVFgnLMw2LJlC+EApC7huhAlt0rmQDr6EKWw5ZszZw4bUdTC0Ssrw5BvNaCc3N+w
YUPZ7+zsLPurVq3KSLJ+/XqdiRIeHs7ypg9AFO6PjY2ltLQ0ne/lzwAdglonUKVKFdlfunTpHM/O
qt+jYKgtDLCg69q1a45w7K6sXr1aIwxz6sIC6ehDFEyPCgqoUYJaUu1wbELMmjWrUGnnhnXr1ulM
FMTDOwp9gGei7z0FgdqOHsKtlig7duywWCh3XDA1gotwfYiC6aElAlM3qDodNmwYA64Rjg5GV6Js
2LCBTXP1AaaT+t5TEGC0VXaSuEa41RIlPT3dYqH2ABCuD1EstWw4DYFFsxIIx8JaV6Jg9MF6wppg
tUTBgs7aoA9RtBujpQPvs/Q5woKdOmuCeDNvoW/mi8OhSGuD1REFW4DWCl2IYqz/xktP7OAYK32s
PfIrnzHrdurUqUYtnyBKNrB7k5ScwhaO5iIKzF8b67/jpfVFRGSU0dLH1nN+5StfvjyLZ2jMmzeP
UlLTyGfuXKOkn122xq9ZmQw2BrDIDA5ew/fPjfEf5cxZaVu3bqXly5cX5W/K8Ql3/deEGF+Ecgnr
FbwUFS3YROLp6SmIIjo5IVYqTm3btpUtecGkXNmyZZ+rRXRwcHiORW12o3HKjyjOzs5OiItj59Jl
xbwyUa1atec43sPzUaJECUtrmItFUykmPVPlypVZI4SZbCcnp6OFTQ+KqyWngcpPTceMGWOwcuI4
EPKN73Pef//9pmI0KSZSpkyZR8b+jxo1arDGlT3dCzcm/6SRZrM8PDk53TVFHdatWzecGyqFcnBB
kiIqUFhhqLTwDQvvce3t7WeYuizSVC2K+x0dHQPMOWDjrBjqAta/pOnb9IImhG91cJJZtFQLkAoV
KkTioVapUiVJh+hhMI3N1whYV0hhvSylLDhVjLxZaFX3qlWrloZZcYxG7u7uDJiK8nB8LCdapuWL
g9Q7N2vSpEkziUTNpOtm1pJxGBFq3LixaGRChBQnuXdz6/9KIGuFeIIWKpUXt6PSIW2KzAO6fX0L
WRM2Rc2h7elL6RefoezaXL2LxfUOXTz6UuilJItBwtZEWhUUZFF5auvSqcAN5ubVWLJmmIUod67H
kylx9UIM7dq+jG5ciWXXankKkRpC6+QRMhoP+5Iau33J/B/3b6vxmynQPXEitQkfYvL/VUP9ad++
cid+U+AGc/q3ULJmmIUo5ugRQJK8ege/0xupYvh3AnmgjHuTAjcYU9iVL3IWhs+c2EDmhFqeuGJu
rtDOmj9aMqQ+ZtQFFF3AP3r0aEEUU4olFlpJFIFLqp2GoYjStk1LOn8ylB7diSW3IT+Ry4AfydOj
N4337EdpSQvo+KHVtGShB/Xs3p46dWjL7pk7exjt2bGUxZ022ZWFXb8YTj17tKehUhqDB3VhYf37
dqLevb6nrEcJ7Bq/D+j3A505vpbiN81l/4fwfn06MnfKJBfq07sD3b0eTX9lpdC4sX0FUXQhypUr
VwRUAOXX1jKi/JWVXPRGlHs3YmT/jUsRrJfIfBBP1y6E060rkewacW5ILuL8mZlE8Zvn0nOpx5g8
cSC9fJYkV8zNyxH05G4c8z+4tZnOnQjRmyj4vLc4S2ZmJoO2KQWMLGLqZYEjyoqAcXoX5no2mQoz
omBu/vLPv4stOFG0FcsVZ6Ls3r7Q/ERJjvejqZNcKSH2F/pTGhkwb+W/bQydSgGLx9Dv0nwW1316
daBe0pxzns9wClk9kZLifenqhTB6/jiBThxeTX88TZRGnGR5+I2L9tGbKLBIlfX8j2ILThTUgxKF
Jco/z5MH//MidbFV4nnKQrMTBdOlwrB9Z/pi2e83dwRzO3Zok+c8NS+iYC5enAWmKUAUbQM/hSWK
EDMMwwvmjTLaYh6uIEpmDgNGlkwUOzs7KlmyJBVpokyRFuQZqQtp5fLxbEvQ3LteUOUjiJKZQ71R
YYny4MEDZjvGGIDaqvCISKOlDxs9YntYiyhQ0i2IkpnDZFxhiQKdzjAqpNTxDEtecKGaCS7MRRRE
WTeU+RlDMfjs2bMZ4BdE0SIKGoQgSqaqqbzCEAV62JRwcXEh7TBLRrEjyv6dS/IkyvHjxwVRJKKg
HpQoLFGs/YSC2FnQIgpsiAiiZOYwQmoMoljTmTrBEC2iwF6kIEomqwclDEEUmJu4evWqVQHrJ0EU
FaLAqqwgSqaGpV6gqE69YAw2L4gRJReiwDydIEomqwclDEGUCxcuWBygDJADBmHt7e0ZYKLcxsaG
xRFEUSGKrqa+izpRlCa7AUMQhZsRR1rQfOnr68tsS/JwDw8PGj9+vE6myA2FFi1aEPS42TW1I9sS
tmRT2obsWtrJ1ocRRxBFhSj79+8XRJGIgnpQwhBEOXPmDAP0fWmfJTMEePr6QGle3dbWNoeZbsQR
RFEhyr59+wRRJKKgHpQwBFFgRQyYPHkys+ILw6RLly5l/vnz55OPjw+tXLmSYKAJmil5OICvLHG9
ZcsW6tmzJ7N2HBISwl4I4h78xtPXB9WqVZMB0nA/tFo6OjqyOIIoKkTZu3evIIpEFNSDEoYgiva7
GUsAH0G0RxQoYIeLOIIoKkSBrXJBlExWD0oYgihHjx6VsX37doqJiaHo6Gh2jREEIwVGDlx7eXmx
0SIiIoJiY2OZvcfw8HCNNEwFQRQVouCBCKJksnpQwhBEOXz4MAOIh/cTUVFRrPHD3bRpEzsLlp6e
zuLgfBWIhN/4PYiLjQWejqkgiKJCFMx1BVEyWT0oYQii8K1m7HaZSx49esSgvf2dFwRRVIgCa8OC
KJmsHpQwBFH4VjOIghO/rq6u5ObmxiwJwIgStOPDmhhGG7zXMCZRtLe/84IgigpRdu7cKYgiEQX1
oIQhiMJ30CxhRNHe1csLgigqRNmxY4cgikQU1IMShiCK9k6atUAQRYUoGRkZgigSUVAPShiCKHxj
AO8/8D2K9oaBITB48GCDpymIokIUbFsWd6KEhYWxelDCEETh6x1jTb30WV/ipab2Oiw3CKKoEAXb
kn///XexBf9OXPuzWEMQha93jEUUpI08vnz5kr755pt8iaK9DssNgigqRME+/uPHjwnKEJ48eVKs
wKddAOpBCUMQRXs6Zy0QRFEhCs4fwRqwNvQJxzYnwosSDEEUPo2DBWddP5zCW3ldXwxqTxcNBUEU
FaKkpKSwD5VwWC8xMZHt6eOahwPQ+AGFA8rwBQsWsMN5OIrBw/E2GS5Oy8JFHLjWCEMQhY9OU6ZM
oYSEBHYIcuDAgex0ckBAAM2ZM4fVEa7xjgUu1gh4DnBxr3LtgDSwIxcXFyf/bgwIoqgQJTk5mZYs
WZID+oTPnDmThRclGIIoaWlpDDi/xU8F54fIyEgWXxfw9A0NQRQVouC8kUBOFNY+Ch+trRGCKCpE
EcgdhSXKmjVrrK6DwPROEEWLKNpqRAU0IfR6CXmtdOnSggz5QKqm/yto/RozX1CnhC8fjVx2IUKM
L9i+NVYjTkpKpvDwCKOlj9038QSFWL1gK9nb21s0ZiFChAgRYiXy//1LoWoBzihqAAAAAElFTkSu
QmCC
</con:property><con:property key="gui.note.4">577;200;898;97;This is the same Web LoadTest as shown in the first example but now with a bunch of assertions and a Table Log

As previously make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar

This LoadTest will run until either 100000 requests have been sent or there have been 100 assertion failures (whichever comes first).</con:property><con:property key="gui.note.1">403;689;379;75;This Assertion is connected to the request output of the Web Page Runner, allowing it to assert (validate) the contents of each requests. We will set it to check that the TimeTaken is never over 100ms</con:property><con:property key="gui.note.2">901;687;400;75;This assertion is connected to the second output of the Web Page Runner, which outputs the stats you can see in the display of the runner. We will use the assertion to make sure there are no Discarded messages.</con:property><con:property key="gui.note.3">1412;684;419;75;This last assertion is used to assert the avg response time as calculated and output by the statistics component. We will set the max value to 50 ms</con:property><con:property key="gui.note.5">440;1120;275;84;The TableLog is connected to the output of all assertions; it will contain all failed assertions which we can export or log continously while running</con:property><con:property key="gui.note.6">1588;1101;418;42;The same soapUI MockService is used here to give something to run against</con:property><con:property key="limits">Requests=100000;Failures=100;</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="597e6093-d97f-4f73-ab9d-de68f912b974" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2de883b82ad336b678de15dbe30b7622</con:property><con:property key="gui.layoutX">984</con:property><con:property key="gui.layoutY">442</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="d3bcc7bc-0cc5-4156-b35e-34b23d579654" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">637</con:property><con:property key="gui.layoutY">447</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="b612904b-3546-4a11-919c-2ff7d2f974b5" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">true</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">5a209e25b9d2723849766176f6f19457</con:property><con:property key="gui.layoutX">1286</con:property><con:property key="gui.layoutY">445</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="c1af622e-3b62-46db-b5ee-49dc008eaaa1"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1586</con:property><con:property key="gui.layoutY">1217</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion" id="23dd344a-2b24-47e7-9ffb-1d467cd98bb8" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">TimeTaken</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">100</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">390</con:property><con:property key="gui.layoutY">847</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (2)" id="a495e792-6895-451a-a483-1495eefdff1e" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Avg</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">50</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">841</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="b8551838-14d3-4e55-8fc8-06616eecae8b" category="output"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent

import com.eviware.loadui.api.summary.MutableSection

createProperty 'maxRows', Long, 1000
createProperty 'fileName', File 
createProperty 'saveFile', Boolean, false
createProperty 'follow', Boolean, false
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false

myTableModel = new LTableModel(1000, follow.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateFollow()
	}
});

saveFileName = fileName.value?.name

updateFollow = {
	follow.value = myTableModel.follow
}

rowsDisplay = new DelayedFormattedString( '%d', 500, value { myTableModel.rowCount } )
fileDisplay = new DelayedFormattedString( '%s', 500, value { saveFileName ?: '-' } )

onMessage = { incoming, outgoing, message ->
	super.onTerminalMessage(incoming, outgoing, message)
	message.keySet().each { k -> myTableModel.addColumn k }
	lastMsgDate = new Date();
	
	result = myTableModel.addRow(message) 
	if( result && saveFile.value ) {
		try {
			char sep = ','
			
			writer = new CSVWriter(new FileWriter(saveFileName, true), sep);
			String[] entries = myTableModel.lastRow
			writer.writeNext(entries)
			writer.flush()
		} catch (Exception e) {
			println(e.printStackTrace())
		} finally {
			writer.close()
		}
	}
}

onRelease = {
	rowsDisplay.release()
	fileDisplay.release()
}

addEventListener( PropertyEvent ) { event ->
	if( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property.key == 'maxRows' ) {
			myTableModel.maxRow = maxRows.value
		}
		else if( event.property.key == 'follow' && myTableModel.follow != follow.value as Boolean) {
			myTableModel.follow = follow.value
		} else if( event.property == fileName ) {
			saveFileName = fileName.value?.name
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "START" ) {
		saveFileName = fileName.value?.name
		if( !appendSaveFile.value && saveFileName != null) {
			def ext = saveFileName.substring(saveFileName.lastIndexOf("."), saveFileName.length())
			def name = saveFileName.substring(0, saveFileName.lastIndexOf("."))
			def timestamp = new Date().time
			saveFileName = "${fileName.value.parent}${File.separator}$name-$timestamp$ext"
			println saveFileName
		}
	}

	if ( event.key == "RESET" ) {
		myTableModel.reset()
	}
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', fString:rowsDisplay )
		node( label: 'Output File', fString:fileDisplay )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: fileName, label: 'Log File (Comma Separated) ' )
		label('If not appending file, its name will be used to generate new log files each time test is run.')
		property(property: appendSaveFile, label: 'Check to append selected file', )
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property key="maxRows" type="java.lang.Long">1000</con:property><con:property key="fileName" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="saveFile" type="java.lang.Boolean">false</con:property><con:property key="follow" type="java.lang.Boolean">false</con:property><con:property key="summaryRows" type="java.lang.Long">0</con:property><con:property key="appendSaveFile" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\TableLog.groovy</con:property><con:property key="_digest">562c50d74a0719706524bbc1298995a9</con:property><con:property key="gui.layoutX">782</con:property><con:property key="gui.layoutY">1114</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (1)" id="17f403d2-0707-4f26-8c0f-00fe25d5a1fd" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Discarded</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">0</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">901</con:property><con:property key="gui.layoutY">845</con:property></con:attributes></con:component><con:connection outputTerminalId="d3bcc7bc-0cc5-4156-b35e-34b23d579654/triggerTerminal" inputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/triggerTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/inputTerminal"/><con:connection outputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/output" inputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/inputTerminal"/><con:connection outputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/statisticsOutput" inputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/inputTerminal"/><con:connection outputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/></con:scene></con:loadui-project>