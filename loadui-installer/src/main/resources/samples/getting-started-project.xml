<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="SampleProject" id="d119b449-df9e-4d99-97c7-a8164d9230db" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property key="ModelItem.reportFolder" type="java.lang.String"/><con:property key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="gui.note.0">205;202;220;278;1. GETTING STARTED
------------------------------------------------
This is a simple Web LoadTest that uses a soapUI MockService as its target. It illustrates the basic Generator -> Runner -> Analysis concept of loadUI components

Double-click the TestCase and run it to see what we're talking about!</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.1">200;617;200;150;2. Assertions and Logging
-------------------------------------
This TestCase extends the first by adding a couple of assertions and a TableLog to catch failed responses. </con:property><con:property key="gui.note.2">996;623;263;153;4. Controlling Flow 
-------------------------------------
This TestCase shows how flow-control components can be used to combine multiple runners for creating complex Load Scenarios. It also introduces the soapUI Runner for running a soapUI TestCase as a part of your LoadTest</con:property><con:property key="gui.note.3">1035;205;200;150;3. Schedulers and Generators
---------------------------------------
This TestCase shows how multiple generators can be combined within a LoadTest to generate varying load over time. Schedulers are used to add bursts of simulated Load</con:property></con:attributes><con:scene label="Simple Web LoadTest" id="f53a7146-d347-4f03-81d7-bfff0caa41a0" version="11"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">499</con:property><con:property key="gui.layoutY">202</con:property><con:property key="gui.note.0">200;407;229;98;2. This FixedRate runner is configued to issue 10 request triggers per second</con:property><con:property key="gui.note.1">200;637;224;150;3. The WebPage Runner issues a request to the specified web page address each time the FixedRate generator sends a trigger to it. 

The display to the right shows ongoing statistics</con:property><con:property key="gui.note.2">201;922;222;305;4. The statistics component is connected to the output of the Web Page Runner which outputs the response-time for each issues request. 

Some thing to try:
- openthe settings dialog and select which values you want to show
- try minimizing the component (with the top-right [-] button)
- try increasing or decreasing the load generated by the FixedRate trigger (by turning the knob) to see how the statistics change

</con:property><con:property key="gui.note.3">1290;617;350;100;5. The MockService is used in this tutorial to have something to test against . It is started when the LoadTest starts and the number of Requests will be the same as the Requests sent by the WebPage Runner</con:property><con:property key="miniature">iVBORw0KGgoAAAANSUhEUgAAAMQAAACMCAYAAAAjrQZqAAAfMklEQVR42u19B3gVRfc+gZBAIPQi
RUEUaVIURGo+ekB6UyB0IlKk9yqYQKQTQUqA9AAJSUgCCU16F0RAepUqHQEV/3/9nvPb9ySz397N
jbk35ZZkzvO8z86cnS03Oe/MmdmZMzlySJEiRYoUKVaV+7fiSMJ+IS04g+XuzRgCJk0cTSItYbvY
mbCUjhxYTeuDZ3FeWnAGy+0b0SRhv5AWnMFy9lQwSdgvpAVnsPy/l9tIwn4hLVgSQkISQhJCQhLC
4oT460WCmu7etRUfJ4ztQ/Ex82jiuL506Wwg9e3dniI3evG5GdMG0c74hZx+9XQLjR/Tm9PTJg+g
vTuX0OvfEujQ3mU0a8bntGPrAtq3cymff3QnilYuG0/Llo6llcvH06ljfuS7eDTN9RpKD29Hkvfs
L5LeZxutUs7fubaR0zGb5lB42Cw+98OhlbQtbj69Vt756P7v6O71cDqw29fAWE4eWUW+i0ap+T+e
bVV+lzttVX7PmZNrlfeLZzRuVJcmju9Lj+9GUWzUXL7nF593k4SQLYSEbCEkIaRhSUJIMUaI+vXq
0L2bEfT7062cv34xjAb068hp6KZO6k+Xfw6iOV8PYV2vnm1p25b55O83hcYrrlVC7Dx2g3p81obP
XTkXTMt9x3LZboqrMtdriOpeDRncTXF/ZtODW5Fc7tPurdmdwRFl+ni0p+bNGnJZ5M+dWkdjR3nQ
TMVN6+3RjnUtWjSiCeP60DdzhnF+04avyXNQF1qxbBzFRfvQwzuRNH3KAD7XX/kd7u5u7CIhj+fj
WSEB02n/Ll92BaEPXDOV+ijpaVMGskt44XSg4j51pVClHN6ld6+2/Ld4+TiOntyPpvk+w+nZgxj6
znccX/fiUSzN9R5KDRt8RE9/3Zz4d+rxCa36bgK7ZHj3m5fD6HPPLnyuX5/E544e0ZP8VkykX3+J
oP59O1Js5FzWT1H+5ud/8peEkC1E+oE+jLnXxEX5UKRCLL0e/Z7MfFdBfNlC2BAhUHv+qeC+0kps
DJ1F1y+E0vMHsfTySRyNHe1B1y6EcI2MzinKo6OMo9/KiTR6ZE9Ob47wpqtKOXR0cQ/o5vt8SYFr
p9Gfz+O5dRE1HloP3HPhvBGMkIAZ9EipRS+eCeRnooZeoXS+ly4ardTGm/nZqEUXfjOC33W70jpd
PR9Cz36NUWrjGDpxeCWT4NSx1XTjUhg9fxhDXw77jH/T8YMr+Jno5Ldp/R86dvA7HhBA/t7NcG4Z
Bw7oRG3bNOFyGEjAsWXzRtS5UwtuDfoqtTn+Nv9xq8e/fZRSq188G0jDh35KF84E0BHlN59VOusX
TgdIl0m2EBkPkCKz7v3kXrTsQ0iRnWrZqZYiCZFFcWSfryREZgg921VQwj4hrVeKFClSpEiRIkWK
FClSpEiRIkWKFClSpEjJfHErkovecckpP1RJyTry98UT9PflU2nCnr37aGN4RJqvB+R/wA4kG0WF
o999xyTDq6Wjjer18Gjfmga3bWZSWS2eLRrJQBrvIC3OxkVEbBs8eHCmR4W7cTmSjyGBM6wRFY6e
fVaJvq1Uib5qXJlCWlWmW90q0eImlcnLrTKfu9+9Eh8zC5IQdiC3r0eTtWBpQjzuUNaqkISwA7ly
PpSsBUsT4urVqww/Pz+KiYmhhg0bqjpgx44dNHToUIqMjOT8gQMHDM6nFbgvjpIQdiDZaK69aqBI
w0hDQkIyxOBNhSSEnRDi9zSut7VXQrx8+TKZsV67di1TIQlhR4QQa5gRReLZr5vpt4exnMdaYGG8
1y+Gptnwb1/dYDOECAwMpIsXL5qEc+fOGeTDwsL4WKBAAZOQL18+cnBw4GskIeyQEOOSIuPdUgwY
C9wRtgXhVCZN6EcxkXPo7o1wmj51IJf5fFAXDvuC6HatWjamYwdX8CL/EcN60K6ERRwJDxH1EOZk
z44lHErFFghx9uxZk9C/f39asWKFgS40NJSPo0aNMsDYsWPJzc2NqlatmgyOjo58jSSEPbYQtyPp
xaP/LbxH9AoR5hEkAdCKIDrEraRaH0eEqASETpRH+llS7CBbaSFOnjypAga+detWAx0Qtn4jXbly
JZk+ODiYj40bN6aWZ1tSlZFVKFcTR6pUqRLlzZtXGHwy4BpJCDskhLlAyBY17s+TLXbRhzh27Bgj
Pj6edu7cST///DPFxsaqeiA0dD2f1+qAoKAgPlauXNnA4FMjBK6RhMgGhLDHTvWhQ4cYcXFxPKwK
QmzYsEHVA8EhYbR9+w5OY4j24MGDnEb/A0fV2B1ykKO7I1WsXZHyN82fIiFwjSSEJIRNEmL//v0q
0DKgo7x+/XoDfVBwKBNCqwMCAgL4qDf41FoIXCMJIQlhk4TYs2ePCnSav/zyS9q1a5eBPiIikvbt
22+gA/z9/flYqlQps4BrJCEkIWySEOg3pBXr1q1L87WSEJIQNkmIbdu2WQWSEJIQNvul2lqQhLAT
Qjy7H50tCIERJWtCEsJOCGGVuKF7fe2KEAMHDqQBAwZIQkjJOuLl5UULFiwwG2vXrqWt8QkUHBxC
3t7eabrH7NmzJRmkZB2pWLEiFStWTBq1FCkaaSH/BFKkSEJIkSIJIUWKJIQUKZIQUqRIQkiRIglh
rlgzsqMdRYXMfjJ4yEDqN6hrtvtD3/0lhuwBfism0cF9K2nCuF6cT/MPfnh7q/u921t7WBpmvOKC
i7/6kzVx4/Fm2rI1noKCQ+j4peVk7fdBxW0pQty+EU32iDT/4Hu/xJK1YOIrUvzPbcmzalWasqAR
jfNuSB171KZZy9xoSVgL8t3Qgs/PWvYfCtrlTr4bW1DksTasy0hEH+lBq2NaZ/h9TcUY71oMpHNY
cE7UlQsbyB6R5h985+ZmsgTWrp5MF38OM9CZSoiAo6VSxOdTyv/r+awISxLCXjedT/MPvnU9iqwF
Uwlh7XUMtgZLE+LBrYjsQwg7eGkDY5g7dy5Hybh8+TLHVcrqxo/fa21CPLkXlf0I8fzBZoshPYSQ
sB4hosO9+bhm5SR69XQLvf4tgV6/SPhfbC5F9+3i0bRty3w+9/JJHG3d/A1NHNeXPAd25jL+flP4
KPJHD3xHZ0+upS6dWtLO+IVqoLsr54Lp+MEV9MPhlZyHfmPoVxz/q27dDzkwXvdurTmC5Lw5wzKW
EDa+hNQiwYjtBbbcQsB4Uzr3RLcq88GtTcnK7ExYqMYV1sYW/ktDusRokDGZ20IIQnRo34yPcdE+
dPFMICMuai7t3r6YQ1JGhXuptcTV8yEGtUbE+tl8H+Qf3Ymim5fDONYr9McPrVBahhg6cXhVmglx
6dIl+uabb/ioxalTp5LpgPDwcBo+fLjRc5mFN954g6ZNm0ZffPEFDRo0KBlmzpxJnp6eRs/NmjWL
j+3atSOsvUgyeo4NW61aNU7jGdYkxBmlJl+3enKiQd/eRH5KS7FFsZVVy8ezLj52Hh9XLhtPKxSI
ssH+05V7RFN42Gx6qthRwJqpdOLIKtq7Y4lq8EHrppHv4jGcD1w7jY+H9y6jx3ejKDRwBufn+wxX
zk0l30WjlRYoPvMJkRpAFGu1EOfPn6dNmzZRly5dOK2FCDiMNJZ64oiIe+3bt+eVavrymQUQAu/R
u3dv+uyzz5Jh/Pjx1LNnT06/+eabBsHMatasaTTImZYQeIY1CYEKEQaKSg55uEbhYbM4fXDPt+zy
XDobxAYetdErkUQn1tKYkb04/+JRLD1Srt+uXIf86RNr+F5wg14lbcmACvX3p1vVihYV6YXTAdTj
szZ05/pGvvfBPcu4sgUSn71MraAzlBCXfw7iI/y/pk3q8wNbu7vxS6BM/Xp1WIcf8NujWAPfsd7H
tamJcs0FpVW5cSmM9n/vy+U2hHxFh5KYnh5CIII2gg3bIkR0cBBiyJAh1G1hN2r3aTvqerobdfTu
SO06t6Na42pR9erVySF/TnJ9VYCNusD/L0hOQ5wSCfFBTXLydKK8oS7k2Ck3ucTnI8fWjuS63VUl
hDWiiGfLTrU99CHgGgn5448/SCsYcdLKwoULDfKvX7+mI0eOqPn//ve/lJGCdwNAiL59+1KrUa2U
yqEJQ1vbgxC5cuUy2hLUrJV6C4FnWJMQSxaOorleQynIfxpFR3jTVzM8yXv2F5xGRxtlvlE6uOnZ
S8TmCBEWNINr9peP4+jkkVWqj4fmavLEfvSn4rvtjF/AerQW1apV5R2Ievb4hFuWjz76gPscOI99
Iwb278RNZHoJceLECdUAkYfMmTOHF/3/+eef5OHhQRs3buQjXCgh9+/fpzt37tC4ceM48t7du3c5
nmtGCt4NACF69OhBbb3bUvny5alEiRIGqFGjBpfR64FatWoZ1aM8iIT13HiGLbUQcVE+2bOF+MsG
WgiElLdVEeHyYbwdO3bk/oGxGK8gRJkyZYyeAyGM6VEe14Ec1girn61dJnRg+vbuwL392Ki5rBsx
vEeyYS9rEAIuD1oDhKQ3FQj/gussBRACI0ROTk7kNNiJ8t925T5Cbs/cbMTvvfceOY9wJofSOSl3
z9yUq5kj5T+Zn/JucKEq1atwH8KhhAPlv+5q4DLhOqTxDEkI2YdQ93WAy4BI3cuWLaORI0fyiM6i
RYtYP3/+fHahJk+eTGPGjKGoqCjWa/d9yGyAEACM2Fh/ALV9zpw5jZ4rV66cUT36HGJEyhr7TEhC
2CghsLkJtr9C4ODNmzebFGAYuwDhOksBZChUqBDlX29885QiRYqQg5OD0XNFGxY1qgeBihZNPCf2
zbbG5L6n96PtBhlGCGyqKIZHO3dsQe7ubjwUO3lCP+rcqSV/YscHEYwo+K+Zwltq9er5CX9a37xp
Dk0Y14dGj+ip7lfnt3Iif6SJCvemjh2ap4sQ+/bt4xYA85dSAoZA/+18asAz0gMQwtnZmXceNWbc
efLkSfGci4uLUT3Ki3N4hrUIYU+4eTk0c1oIMXwmvk/ogXkq//Zi2vOnjvmlixDYdESM5nz77bfs
KuGjG44JCQmsF+6TCDeJL9v4CObr68tfiXHu66+/5vPCzcKoEPZvQF6/QYq5wChXZkJuvGKhGkD7
YQ5fENu3a8otwWDPrnTjUqhNuEzff/+96jKlBHx/MMWVwuaJIr106VI1jWfYAlL6Eo5zkhAWJIQt
9yF27NiRbYA96Xbv3k0+Pj7Up08fWrJkCetwThJCEsKqO//YGrI4IR4pWCQJYQIh8F0Bo0bZGXAZ
rUCIVpiUaAns23+AVq/2s8izMGxv14SQsM4CIUx1+eGHHzIdmLi4bp0/efTubZHnAcrPu2CUEL8n
Tb21VUJkxHZW+KBn7S210Aewt6258Dzs4/1u7tw8k3f69Olcu0IHYMQOfZ1evXrxqB90+Dgqztsy
UiSEra+pTq8B4fvE4SNH+FuDtciA3YsOHjrMX5vtiRCYYYsdlLIijBPixbbbdvBp3TM9wGKhgIBA
WrlyJaX3XmkFRon8AwJ4WkkG3M9icv36ddVVw4q+rOBynj59WrieF7LtaBqWaMoxxfQRwp5x5coV
Y32x7EsIjCyk4bKRIJKAk5NTtexKCKznvnHjRpaAZpJk9iVEw4YNzSHEl8ZalHLlyp2TLYRtA+vu
U4NsIRJljhmu1VvS9TIkBJbp2gP0gR3q1q1L77//vsGESZSThFCkefPmKRpz165dxUKcfxUsT82O
hLh48SJjxowZPIlyypQpPL8KI3eRkZHsUp45c4aX6Yqy1gCimgAVKlYg16WuVGxkcareoDoVHVGU
l/WCECgnCaFIv379khlz4cKFr+OfbOo9HB0d92RHQugnGmJ2sKXC+5iD+vXr85oUoGDxgrwGBWvS
hS6HYTif7E0I0RKITnL37t3lyJOJhBDfQDBkKbBq1SqeOq/VAcuXL0+mSwlr1qxJpkvPNxpekZjL
MGqJ3mVCOUkIKekiBNwhQExRHzx4cIrT1zErQJ8Xus6dO/PR39/faFlAPCstyGEkjI+eECiX1Qmx
1VIIC1tPS5f6kiWfaQuE+Omnn+wCOYysOHR1dTXQoVyWJcTrO8vJUvjrfhCFR2yi1X5r6NmVxWTJ
Z1ubECdPnmRgnQZWKIojVi8i5hXOIW7t8ePHOY3Jc5ihK647ePAgAy2A0FkTKRLC3neJfHGiMfWq
V4NwvLOvIX018gPymVCbxnrWpFmjPqRHRxrxuYzC/SMd6cbuJhl6z5RwenNtBtLWJoSYIYp+F+Lr
Iv5Uq1at6OjRo2zkIAjOI3/48GGKi4vj0SdxXWxsLI9ATZo0iWJiYiw2ozUlpEgIS+0SuW3LIo4W
ffanYKE7kxH/sOcHylJ2gLUJIYKx2Zo8fvyYId7PVKRICCvuFJkhhMhK6xy08230c2+sTQjU/AAE
bpEQ1PaYsKiV58+f099//81p/bnMIoR4P1ORIiF+uRZJVkKmEALrj/fu3WvXhIC7gbT4omoLhBDR
CYW8ePFCJQRGjIQMGzaMtmzZwnOGIJgyYwlCmBtlMUVCWG09xKttGUqIrDpn31YIIaITzps3z6aA
WF2AuVEW/5UQVglVmIGEQOcN/7isClsghBglEkBMK73OnvCvhLh7fYNdE0LMYOzt4UHdu3WjNu7u
1LJ5C2retBm1a9uO3Fu5c1qgbZtPGFpd69atqVGjRlS7dm368MMPGdjf4eOPP1bzgJubG9WpU0fN
Y/IYrtOWgZtQr169VHVNmzY1yAMtW7ZU07bUhxDhOrF8FEHTEPAgs0ODYplnZt3bJEJMmdifjy2a
N6QLZwJ4x8iRw3vwFkfnTvlzFHCxMQb2ghgzqhclJO0rdv50AMVGzuE9xKxBCPjcn3brTp06dKAW
zZpTsyZNGe0+aUvuipGJPLaughHD0BFmXgAGCzJodYIgWl2DBg04dL3Iw3Bh6NoyuDdIk5qucePG
BnkAJBFp/CbRr7A2IUS4TktIWp5jbtjRdLUQpobDP3l0Ff103M/ihIiIiOAFLB3atadPlJoehl/N
qyofGzZoyEarNbqPPvqIodVhUpgx49dfi3IGhPjgg2Tkwr3r6O4FEurvDxJq8zUVoAUSebGZoy0Q
AgMVgCUEz8GGmRipQgADU68xByYR4qvpnlzzo4VA+vnDWJo5bRDvKLRsyRhasmAUTZs8QDXqeXOH
0y9X1/M1C3y+ZB12EPIc2IU+qvMBb7CHAMiZTQjsOIopve4tWrKr5NaoMb3XoCJVq1qVjRCGhrQA
jBjQ6mDEaD20OhhxDd21KFf9/ffVfI3q1fkZBvdXSFRLdy/o9PcHkbR5ACQUaTGl2RYIIeLXIrJG
ZiMtzzE3Dq9JhEgpqLE5OLJ/ucVbCBACU3qbwL+vXYfeeecdKrK4CB9h0JUrV+a0ACZ7AVodav0q
VaoY6EAa/bUoh3UTIl+pUiWeXqy/v/5exnQgiZqv+A69++67TBKhE1OabYEQthL3NqOQJpcpNVdJ
7DAvypm101AGEgKdvHPnzrHBwYCxECT3tdx8xIaF2NUHaYEqShmU1epg1O/pyoFM+mvROrxToYKa
hxFXVWpzg/sr9wZpUtOhxVDz75Snt5Uj+hlCh98E2AIhxIxVU2edigVDuAbDnJi6oR/6RMfc2JCo
eFZmwiRCzJrhyW7R9CkD1Y2y42PmUdu2TalP73aKK9SZGjesyxsv7t6+hPeGgLvErcvZxNbl80Fd
+NivTweaqrhXcLewIWNmEmLDhg0c+Q3uCwwb7kaV+pUTXRrFqN/XuDgAytRIKicA46yuKwe3R38t
yr2vkEzkcV7vVmnfQ9UpZaobuZfeZcrzSx41Lbb7tQVCiEDMmLMEwMePjo7mj3D4OId1EejLYYAD
50EAHHENDHD79u1cRuSRFjpxXhirJQJKW2XYFftTW6KFACFQG6G2BopMLUIum1yobNmyXCu//fbb
nBYQ5bQ6tCz6cqIV0ergIr311ltqHufRiujvX0FpRfQ6Y/dX8+XL8tZZDv84qDpR29oCIWCwWQlZ
+jsExqux0goGx9vhVipBuW7n4h194N7A0MT+bwDKoKxWV1ExWH05kEmvg2GXLl1azcNwYfzaMrg3
SJOaDuRS82USj053nFSdWEFmC4TIolHUsy4hEHKxnGJwbykGnG9hPir2XlEqUbw4G38ZxYCRFnjr
zbe4rFYHo9aXe1fp2Op1Fd5WjL9kSTVfulQpKl+unEEZ3LtsmTKp6kBCbR5weOmgpsWG8LZAiKwW
Sd0kQmCYdNV3E2hbXOJG626NP+aOcpdOLWnEsB40Kmn/uE+7udsUIbAR+48//shGjZq4dJ3SlPNV
Tq7dMVoDg0VaAOUqJLUcAqj5QR6tjjvUumtRDjW9yGP3UP298A6A/pnG7q/myyceK1WupOrwmwBb
IEQWjaKevhbi1tUNNtlCIBQKokDAlcFm54ULFybnNc58hEuDTc+RFkCtjrJaHYy8pK4cjF1/LVqg
YkWLqvniSk2O7XYN7q/cu6TSiqSmA0HUfNHCVEQ5vlv9XVUn9tSzNiEsFRAa08oxiGCp55lEiKf3
N6tTM9A6vHwcR0/uRdOT+9H04NYmPuf11WAD436mma7x4lEsT/X4VSn74HYk5y1BCKyCgt8NoytY
sCAVKFuAjzDEYsWKcVoALg/KanUgTnFdOdTS+mvh9sBwRR5b5oKEBvdX7g2ipKYDCbV5AC2aSOtW
d1lFLGWc165do13f7+YlqTZDiIj1s6lbV3ca0L8TXTkfTH17d6BWLRqxgWMoFvtIfLtkjEoW/jJd
5wNqoZRB+vnDGOrcqQXFRM61eAuB2gU1PHzvAq6uKkophli0SBEDXYniJbisVoe+QtEiRQ10MH79
taVLlaZCIFxSHuQAwbRlcG+0Iqnp3lRIqM0DFRRXS6TxmwBrEiJJyBIICQ3j4VxLPc/oLzXHZcrQ
HUkzkBAhISG8LJBHZ0q+wcGpCpcszEfU3qiZkRYQozhaXRnu8JYw0JUtUzbZtWVKl+FWQeRxvtQb
pQzvr7wDXC2tDmX0ujfLvmmQB8qXK6+mdcsds4Pkt/obaAmxe/tiPmJGKz7SoSVAC4GPa9DXUVoD
uEA7ExZS5EYv9ev0n8/jOY1N2qMjvKnex7U5f+VcMLm3akxNmzTIdEJgWSBqYNTo+VxcKF8hFz6i
xUCNzrokoAzKanWo5QsVLGSgQ+uiv7ZkiZLkmj+/mi9YoAC7Wtoy3McoVChVHfoy2jyA0SiR1i13
lGJpQtjrsCt2CMKyQBg6XBiXvHkpt48jH7lfoBgt0gIog7JaHVwafTmQRK8DwfLny6fm4drA2LVl
cG8QKTUdCKfmXROP6LQLnW65oxRLE+K3h7G0Z8cSTkeFe9FjpTONdI9P23A/wsd7KO2KX0SvlL7E
5Al9lb5GR5o0vq9NEAKhT3j0SAF3mpOAvkEpdqX+pzNWDv0FfTljOtxPm8d5vS6l9zD2TG0eACFE
Gr8JkISwwRbiqKmzWK1AiKCgIJ4UVrhQYXZ78jjnoTzF8pDjLEcqUq4w5V2Ql/IUzZOoV4ByANKO
Xo7kcNWBcsflJsf5jpQrLBfl/DEnn0OfwjW/q3qdcw1nKty5sOLO5COnJk7kXNpZaS3yKy1OEbUM
4PDcgVzaulCO33NQnsKJuoJ10REvYFAO7pc2nzdPXiaJyOvW/0qxBiHu3YzgIdamTerTkC+6UYf2
zXiNA/Ji+96aNapTq5aNed1DtWpVWYfRpdof1qJxYzyUfoMbvXgcx/rpUwfSswcxmU4IrJOFjw63
JI+zswp0TuHza3Uog7JaHYZX9eXgHul1wj0SebhPcMG0ZXBvuFKp6eCmafNAGSZEYlq3/leKpQkh
pnOL9KiRPVOc8q2FmPGKc/t2LTUyPdzIdRlMCKyTRetQsEBBcnZyVgFjRS2u1aEMymp1MHR9ueLF
iifTYWgWNbnIo7VAa6Mtg3ujZUlNhxZImwfgWom0bv2vFEsTQtTqxoA+hKnuEO4zbOinFnOZAgMD
Cbt8okZHJxq1sQB06NBqdSgDvVYHn12MBGl1+muhA8lEHuf198L9jb2H/v7of2jzAFwmkcZvAiQh
rNipxnH82D48lLozYRHnWzZvRB/X/ZBev0igLdE+HEjg+22LklyscJ4DhW8UHj3bUh+PdqxvlfSx
zlKEMHeRuT1BEkIOu5pFiICAALMXmeuBOfJpKY/1uamVA1Irh3UPCCSsXXWmWxAvxdKE6NyxJYWH
zuL0ge99ab+Ctp80TQwz81MAz1nq69HeJglh7iLz9AK75ORVOterV6/OkPthdZlYOSZWpekWxEuR
LYTtEsKSkISQhDCbEKJWNRV+fn7qXnPIY13w5MmTOY2IfUJn7n0zA5IQkhBmEULsV5ZVIQkhCWE2
ISwRusRakISQhDCLENiqSYQ4wQJyhEbBulmEQkHsn5kzZ/KeCziPcyiDECq4BmlxxLkVK1ao4VFs
BZIQkhBmE8ISsXysBUkISQizCIGNRVCr//PPP8mC4IqtnYztOoNrzN2pxooxhKRIQphOCLg88Le9
vLzY9RkxYgS7TfjAhaFLY8aNa+BSTZs2jePDmkIIK8YQkiIJYTohsGdyVoUkhCSEWYTAHgpZLZCW
AAIoSEJIQphFiOwAaakWJMS9G/ZLCEvF8BFAJD2sc7b0c6WlWpAQlgbHdLJDQsA1S9i2nUJCEiMF
SkJkVVK82vajpZHBP+FHS8HPbw3Nmz+fLPlMaaFSpEiRIkWKFClSbED+D0awOm5pfE9zAAAAAElF
TkSuQmCC
</con:property><con:property key="gui.note.4">395;200;876;81;1. This is a simple Web LoadTest showing you how to connect a basic Generator -> Runner -> Analysis LoadTest. 

Make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar (Next to the "TestCase" menu). You will see the WebPage Runner starting to send requests and statistics being displayed in the Statistics Component. </con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="0b1546d7-feeb-4d93-b3c9-f6ac151594fc" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = "test"
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
		def message = newMessage();
		message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
		message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
		message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
		message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
		message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
		message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
		send( currentlyRunningTerminal, message );
	
}, 1000, 1000, TimeUnit.MILLISECONDS );

def currentlyRunningSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]
setSignature(currentlyRunningTerminal, currentlyRunningSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">09cec4700740c03df51b17a78c4e1ee0</con:property><con:property key="gui.layoutX">524</con:property><con:property key="gui.layoutY">630</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="2cb44449-032c-4163-8408-e5b61bce2d3f" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">668</con:property><con:property key="gui.layoutY">401</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="7c508081-aa40-49c4-8722-246670b4a417" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )


createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'



ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id']
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">true</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">0dc50f557bb93c25e53d4f5e15a26165</con:property><con:property key="gui.layoutX">583</con:property><con:property key="gui.layoutY">909</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="f01e8c30-2fd1-417c-87bf-f8c3ae153c4b"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1291</con:property><con:property key="gui.layoutY">803</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="2cb44449-032c-4163-8408-e5b61bce2d3f/triggerTerminal" inputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/triggerTerminal"/><con:connection outputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/resultTerminal" inputTerminalId="7c508081-aa40-49c4-8722-246670b4a417/inputTerminal"/></con:scene><con:scene label="Complex Load Generation" id="234ea2c5-c94b-4e44-aeae-bd37cd09069b" version="18"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1336</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
zDoAAAAASUVORK5CYII=
</con:property><con:property key="limits">Time=600;</con:property><con:property key="gui.note.0">228;402;341;75;The first scheduler starts a Ramp Generator that will ramp from 0 to 100 req  / sec over the first 2 minutes of the LoadTest</con:property><con:property key="gui.note.1">742;390;341;87;Once the Ramp-up is finished, a Random Load Generator is started for the remains of the Test, which will generate a base load fo 100 requests / sec with Gaussian random distribution</con:property><con:property key="gui.note.2">1206;396;448;75;This schduler will add an additional load of 100 req / sec every 10 seconds at the start of each minute. The scheduler will itself be started at the same time as the random generator.</con:property><con:property key="gui.note.3">508;200;798;82;This TestCase shows how to use schedulers in combination with Generators to generate varying load over time: it first Ramps from 0 to 100 requests / sec over the first two minutes, then maintains a randomized base load with reoccuring Burst of requests for the rest of the Test.

The TestCase has its execution limit set to 10 minutes (see toolbar above)</con:property><con:property key="gui.note.4">200;1268;315;114;All Generators are configured to trigger the same Web Page Runner, but you could just as well trigger different ones. 

Its output goes to a standard stastics component as usual</con:property><con:property key="gui.note.5">1674;923;385;75;Out trustworthy soapUI MockService is once again used as a standin for a real service.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="133d26ad-1f1d-44b0-849c-c9dc31549d48" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = "test"
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
		def message = newMessage();
		message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
		message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
		message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
		message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
		message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
		message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
		send( currentlyRunningTerminal, message );
	
}, 1000, 1000, TimeUnit.MILLISECONDS );

def currentlyRunningSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]
setSignature(currentlyRunningTerminal, currentlyRunningSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">09cec4700740c03df51b17a78c4e1ee0</con:property><con:property key="gui.layoutX">655</con:property><con:property key="gui.layoutY">1246</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="e6588efe-e0c8-463b-b604-398edb7881d5" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">1300</con:property><con:property key="gui.layoutY">914</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="d9d3b5d3-00e3-4654-b75f-4276c0135340" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )
direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

display = new DelayedFormattedString( '%d %s', 500, currentRate.longValue(), direction )
scheduled = false
future = null

onRelease = {  display.release() }

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
		if (start.value != 0) {
			if (msPerUnit/start.value > period.value * 1000) {
				targetReached = true
				currentRate = end.value
			}
		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	display.setArgs( currentRate.longValue(), direction )
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			else 
				currentDelay = 1 //Handling edge cases
		} 
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			display.setArgs( currentRate.longValue(), direction )
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		display.setArgs( currentRate.longValue(), direction )
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
		started = false;
		scheduled = false;
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	if ( event.key == "COMPLETE" ) {
		reset()
	}
}


//Layout
layout  { 
	property( property:start, label:'Start', min:0 ) 
	property( property:end, label:'End', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', fString:display, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="start" type="java.lang.Long">0</con:property><con:property key="end" type="java.lang.Long">100</con:property><con:property key="period" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Ramp.groovy</con:property><con:property key="_digest">becdfee00487f8aa9960b15f779e4ef2</con:property><con:property key="gui.layoutX">229</con:property><con:property key="gui.layoutY">906</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

display = new DelayedFormattedString( '%d/%s', 200, rate.value, unit.value )
randomDisplay = new DelayedFormattedString( '%d %s', 200, factor.value, "%" )

random = new Random()

timer = new Timer(true)

future = null

onRelease = {  display.release() }

schedule = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			schedule()
		}
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel()
		if (stateProperty.value)
			future?.cancel()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		display.setArgs(rate.value, unit.value)
		randomDisplay.setArgs(factor.value, "%")
		schedule()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
	}
	
	if ( event.key == "START" ) {
		future?.cancel()
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Base Rate', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	
	node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
			images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
	
	separator( vertical:true )
	property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1 )
	separator( vertical:true )
	box( widget:'display', layout:'align center') {
		node( label:'current rate', fString:display )
		node( label:'random', fString:randomDisplay )
	}
}

//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'current rate', fString: display )
		node( label: 'random', fString: randomDisplay )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if (running)
	schedule();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property><con:property key="type" type="java.lang.String">Gaussian</con:property><con:property key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Random.groovy</con:property><con:property key="_digest">33856beef7937e0da8eb86d296f83602</con:property><con:property key="gui.layoutX">691</con:property><con:property key="gui.layoutY">905</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval" id="e36a65c3-b2e1-4db7-967b-bf70cb77182b" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def startMessage = newMessage()
startMessage[TriggerCategory.ENABLED_MESSAGE_PARAM] = true
sendStart = { send( outputTerminal, startMessage ) }

def stopFuture = null
def stopMessage = newMessage()
stopMessage[TriggerCategory.ENABLED_MESSAGE_PARAM] = false
sendStop = { send( outputTerminal, stopMessage ) }

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit >= 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime = startTime + duration.value * mult
	if( limit >= 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( sendStop, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( sendStart, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendStop()
		} else if( currentTime < stopTime ) {
			sendStart()
		}
	} else {
		sendStop()
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">0</con:property><con:property key="duration" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">ea272f4a06076c9f0cf1ffe3dbe1f351</con:property><con:property key="gui.layoutX">230</con:property><con:property key="gui.layoutY">570</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval (1)" id="f491d887-a1e7-4b12-8174-0b4a9f584525" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def startMessage = newMessage()
startMessage[TriggerCategory.ENABLED_MESSAGE_PARAM] = true
sendStart = { send( outputTerminal, startMessage ) }

def stopFuture = null
def stopMessage = newMessage()
stopMessage[TriggerCategory.ENABLED_MESSAGE_PARAM] = false
sendStop = { send( outputTerminal, stopMessage ) }

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit >= 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime = startTime + duration.value * mult
	if( limit >= 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( sendStop, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( sendStart, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendStop()
		} else if( currentTime < stopTime ) {
			sendStart()
		}
	} else {
		sendStop()
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">2</con:property><con:property key="duration" type="java.lang.Long">8</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">ea272f4a06076c9f0cf1ffe3dbe1f351</con:property><con:property key="gui.layoutX">747</con:property><con:property key="gui.layoutY">576</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Scheduler" id="ee825185-22ab-42ed-852a-c87859ffbc47" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop at a specified day &amp; time
 *
 * @help http://www.loadui.org/Schedulers/scheduler-component.html
 * @category scheduler
 * @nonBlocking true
 * @dependency org.quartz-scheduler:quartz:1.8.3
 * 
 */

import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.FormattingUtils
import com.eviware.loadui.util.layout.DelayedFormattedString
import org.quartz.Scheduler
import org.quartz.CronTrigger
import org.quartz.CronExpression
import org.quartz.impl.StdSchedulerFactory
import org.quartz.JobExecutionContext
import org.quartz.JobExecutionException
import org.quartz.Job
import org.quartz.JobDetail
import java.util.Calendar
import java.util.Date
import org.quartz.listeners.JobListenerSupport
import com.eviware.loadui.util.layout.DelayedFormattedString
import java.text.SimpleDateFormat
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.layout.SchedulerModel

def counter = 0
def durationHolder = 0
def runsHolder = 0
def startSent = false

def schedulerModel = new SchedulerModel()

createProperty( 'day', String, "* (All)" )
createProperty( 'time', String, "0 0 0" )
def duration = createProperty( 'duration', Long, 0 )
def runsLimit = createProperty( 'runsLimit', Long, 0 )

def canvas = getCanvas()

def startMessage = newMessage()
startMessage[TriggerCategory.ENABLED_MESSAGE_PARAM] = true
sendStart = { 
	send( outputTerminal, startMessage ) 
	startSent = true
	counter++
	if(runsHolder > 0 &amp;&amp; counter >= runsHolder){
		unscheduleStartTrigger()
	}
	setActivityStrategy(ActivityStrategies.BLINKING)
	pauseTotal = 0
}

def stopMessage = newMessage()
stopMessage[TriggerCategory.ENABLED_MESSAGE_PARAM] = false
sendStop = { 
	send( outputTerminal, stopMessage ) 
	setActivityStrategy(ActivityStrategies.OFF)
	unscheduleEndTrigger()
	endTrigger = null
	pauseTotal = 0
}

class SchedulerJob implements Job {
	void execute(JobExecutionContext context) throws JobExecutionException {}
}

def startTrigger = null
def startJob = new JobDetail("startJob", "group", SchedulerJob.class)
startJob.addJobListener("startJobListener")

def endTrigger = null
def endJob = new JobDetail("endJob", "group", SchedulerJob.class)
endJob.addJobListener("endJobListener")

def paused = false
def pauseStart = -1
def pauseTotal = 0
def endTriggerStart = null //this is the time when latest enable event was sent
def rescheduleAfterPause = false
def endTriggerTimeLeft = null

def maxDuration = 0;

def scheduler = new StdSchedulerFactory().getScheduler()
scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"startJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStart()
		scheduleEndTrigger(new Date(), durationHolder)
	}
})

scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"endJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStop()
		schedulerModel.incrementRunsCounter()
	}
})

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION) {
		if(!paused){ 
			scheduleStartTrigger()
		}
		else if (rescheduleAfterPause){
			def now = new Date()
			pauseTotal += now.getTime() - pauseStart.getTime()
			scheduleEndTrigger(now, endTriggerStart.getTime() + durationHolder + pauseTotal - now.getTime())
			rescheduleAfterPause = false
		}
		scheduler?.start()
		paused = false
	}
	else if( event.key == CanvasItem.STOP_ACTION) {
		scheduler?.standby()
		paused = true
		pauseStart = new Date()
		if(endTrigger != null){
			unscheduleEndTrigger()
			endTrigger = null
			rescheduleAfterPause = true
		}
	}
	else if( event.key == CanvasItem.COMPLETE_ACTION) {
		reset()
	}
	else if(event.key == CounterHolder.COUNTER_RESET_ACTION){
		reset()
		scheduleStartTrigger()
		scheduler?.start()
	}
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ day, time, runsLimit, duration ] ) {
		validateDuration()
		if( !canvas.running ){
			updateState()
		} 
	}
}

validateDuration = {
	def expr = new CronExpression(createStartTriggerPattern())
	def calendar = Calendar.getInstance()
	def nextDate = expr.getNextValidTimeAfter(calendar.getTime())
	calendar.setTime(nextDate)
	calendar.add(Calendar.SECOND, 1)
	def dateAfterNext = expr.getNextValidTimeAfter(calendar.getTime())
	def diff = dateAfterNext.getTime() - nextDate.getTime()
	if(diff/1000 &lt; duration.value){
		duration.value = diff/1000
	}
	maxDuration = diff
}

updateState = {
	def expr = new CronExpression(createStartTriggerPattern())
	schedulerModel.setSeconds(expr.seconds)
	schedulerModel.setMinutes(expr.minutes)
	schedulerModel.setHours(expr.hours)
	schedulerModel.setDays(expr.daysOfWeek)
	schedulerModel.setDuration(duration.value * 1000)
	schedulerModel.setMaxDuration(maxDuration)
	schedulerModel.setRunsLimit((int)runsLimit.value)
	schedulerModel.notifyObservers()
}

createStartTriggerPattern = {
	def startTriggerPattern = "${time.value} "
	startTriggerPattern += "? * "
	if(day.value.equals("* (All)")){
		startTriggerPattern += "* "
	}
	else{
		startTriggerPattern += "${day.value.substring(0,3).toUpperCase()} "
	}
	startTriggerPattern
}

scheduleStartTrigger = {
	runsHolder = runsLimit.value
	durationHolder = duration.value * 1000
	
	def startTriggerPattern = createStartTriggerPattern()
	unscheduleStartTrigger()
	scheduler.addJob(startJob, true)
	startTrigger = new CronTrigger("startTrigger", "group", "startJob", "group", startTriggerPattern)
	scheduler.scheduleJob(startTrigger)
	
	def now = new Date()
	def next = startTrigger.getFireTimeAfter(now)
	if(now.getTime() &lt;= next.getTime() - maxDuration + durationHolder){
		sendStart()
		scheduleEndTrigger(now, next.getTime() - maxDuration + durationHolder - now.getTime())
	}
	else{
		sendStop()
	}
}

scheduleEndTrigger = {startTime, durationInMillis ->
	if(durationHolder > 0){
		def calendar = Calendar.getInstance()
		calendar.setTime(startTime)
		calendar.add(Calendar.MILLISECOND, (int)durationInMillis)

		def endTriggerPattern = ""
		endTriggerPattern += "${calendar.get(Calendar.SECOND)} "
		endTriggerPattern += "${calendar.get(Calendar.MINUTE)} "
		endTriggerPattern += "${calendar.get(Calendar.HOUR_OF_DAY)} "
		endTriggerPattern += "${calendar.get(Calendar.DAY_OF_MONTH)} "
		endTriggerPattern += "${calendar.get(Calendar.MONTH) + 1} "
		endTriggerPattern += "? "
		endTriggerPattern += "${calendar.get(Calendar.YEAR)} "
		
		unscheduleEndTrigger()
		scheduler.addJob(endJob, true)
		endTrigger = new CronTrigger("endTrigger", "group", "endJob", "group", endTriggerPattern)
		scheduler.scheduleJob(endTrigger)
	}
}

reset = {
	counter = 0
	durationHolder = 0
	runsHolder = 0
	paused = false
	pauseStart = -1
	pauseTotal = 0
	endTriggerStart = null
	rescheduleAfterPause = false
	endTriggerTimeLeft = null
	unscheduleStartTrigger()
	unscheduleEndTrigger()
	startTrigger = null
	endTrigger = null
	startSent = false
	setActivityStrategy(ActivityStrategies.OFF)
	schedulerModel.resetRunsCounter()
}

unscheduleStartTrigger = {
	try{
		scheduler.unscheduleJob("startTrigger", "group")
	}
	catch(Exception e){}
}

unscheduleEndTrigger = {
	try{
		scheduler.unscheduleJob("endTrigger", "group")
	}
	catch(Exception e){}
}

onRelease = {
	scheduler.shutdown()
}

layout {
	node( widget: 'schedulerWidget', model: schedulerModel, constraints: 'span 5' )
	separator( vertical: false )
	property(property: day, widget: 'comboBox', label: 'Day', options: ['* (All)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], constraints: 'w 100!' )
	separator(vertical: true)
	property( property: time, widget: 'quartzCron', label: 'Time', constraints: 'w 130!' )
	separator(vertical: true)
	property( property: duration, widget: 'time', label: 'Duration', constraints: 'w 130!' )
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Day', fString:new DelayedFormattedString( '%s', 1000, day ) )
		node( label:'Time', fString:new DelayedFormattedString( '%s', 1000, value { time.value.replace(' ',':') } ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%s', 1000, value { FormattingUtils.formatTime( duration.value ) } ) )
	}
}

settings( label: "Basic" ) {
	property( property: runsLimit, label: 'Runs')
}

validateDuration()
updateState()</con:property><con:property key="day" type="java.lang.String">* (All)</con:property><con:property key="time" type="java.lang.String">0 * *</con:property><con:property key="duration" type="java.lang.Long">10</con:property><con:property key="runsLimit" type="java.lang.Long">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Scheduler</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Scheduler.groovy</con:property><con:property key="_digest">13e5700a5d24c807842eec5f9f6f27bd</con:property><con:property key="gui.layoutX">1206</con:property><con:property key="gui.layoutY">585</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="05458282-13f4-4c65-a2fe-0687b851e4cc" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )


createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'



ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id']
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">false</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">0dc50f557bb93c25e53d4f5e15a26165</con:property><con:property key="gui.layoutX">697</con:property><con:property key="gui.layoutY">1527</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="8a8cf6f5-e6f6-4421-9a9f-5ff5261affa5"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1674</con:property><con:property key="gui.layoutY">1088</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e36a65c3-b2e1-4db7-967b-bf70cb77182b/outgoingTerminal" inputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/stateTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/stateTerminal"/><con:connection outputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/outgoingTerminal" inputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/stateTerminal"/><con:connection outputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/resultTerminal" inputTerminalId="05458282-13f4-4c65-a2fe-0687b851e4cc/inputTerminal"/></con:scene><con:scene label="Complex Load Scenario" id="5dd7734e-f092-4152-b2e8-3663dac12bf0" version="33"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1343</con:property><con:property key="gui.layoutY">619</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.0">255;200;392;289;This TestCase shows you how to use the Splitter and Delay components to combine multiple runners into one larger Load Scenario.

- An initial splitter is used after the Load Generator to divide load between three paths: 
1) The first with 3 web requests, with a delay between the second and third
2) The second running a soapUI TestCase after an initial delay
3) The third first running a seperate soapUI LoadTest after which it will join the path of the second option.

Statistics components have been added for both soapUI Runners and the last WebPage Runner. 

As always the soapUI mockservice is used to provide a stand-in for the relate target systems and services.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="551df37b-ca36-4721-a266-33d59cff8bd3" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = "test"
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
		def message = newMessage();
		message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
		message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
		message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
		message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
		message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
		message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
		send( currentlyRunningTerminal, message );
	
}, 1000, 1000, TimeUnit.MILLISECONDS );

def currentlyRunningSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]
setSignature(currentlyRunningTerminal, currentlyRunningSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">09cec4700740c03df51b17a78c4e1ee0</con:property><con:property key="gui.layoutX">208</con:property><con:property key="gui.layoutY">726</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (1)" id="326df2a4-1c3f-49a2-b54c-692b08aff9fa" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = "test"
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
		def message = newMessage();
		message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
		message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
		message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
		message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
		message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
		message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
		send( currentlyRunningTerminal, message );
	
}, 1000, 1000, TimeUnit.MILLISECONDS );

def currentlyRunningSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]
setSignature(currentlyRunningTerminal, currentlyRunningSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/search.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">09cec4700740c03df51b17a78c4e1ee0</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">1489</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="0ef58711-1bba-4b7d-8f61-3d1793b613c3" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout (layout:'center') { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display',  constraints:'w 100!' ) {
        node( label:'delay ', fString:display, constraints:'wrap' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">500</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">9fefbba5d27edc9a8ef8fb0c488276ee</con:property><con:property key="gui.layoutX">281</con:property><con:property key="gui.layoutY">1246</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="04f2b993-146a-4b70-b022-94456e361e46" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">854</con:property><con:property key="gui.layoutY">215</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter" id="2bde326b-ab20-48e8-ab2b-5913ee042048" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 * 
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */
 
 import java.util.concurrent.Executors
 import java.util.concurrent.TimeUnit

 import com.eviware.loadui.api.events.PropertyEvent
 import com.eviware.loadui.util.collections.ObservableList
 import com.eviware.loadui.util.layout.DelayedFormattedString
 import com.eviware.loadui.api.events.ActionEvent
 
 // one output minimum
 
 createProperty('selected', String, "Round-Robin" )
 createProperty('outputs', Integer, 1 )
 createProperty('total', Integer, 0 )
 createProperty('counterUse', Boolean, true )
 createProperty('updateCounterDelay', Long, 500)
 
 // locals

 total.value = 0
 
 def roundRobinNext = 0
 ObservableList outputStats = new ObservableList()
 outputStats.add(0)
 for( i in 1..9 ) {
    outputStats.add(-1)
}
 cnt = 0
 while( outputs.value > cnt ) {
 	createOutgoing()
 	outputStats.set( cnt, 0 )
        cnt++
 }
    
 display = new DelayedFormattedString( '%d', 500, 0 )
 outputDisplay = new DelayedFormattedString( '%s', 500, value({ outputStats.findAll({ it >= 0 }).join('          ') }) )

 executor = Executors.newSingleThreadScheduledExecutor()
 future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 

 onMessage = { incoming, outgoing, message ->
 	super.onTerminalMessage(incoming, outgoing, message)
   try {
    def next = 0;
    switch( selected.value ) {
        case "Round-Robin": 
            next = roundRobinNext
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            if( roundRobinNext + 1 == getOutgoingTerminalList().size() )
                roundRobinNext = 0
            else
                roundRobinNext++
            break
        case "Random" :
            random = new Random()
            next = random.nextInt(getOutgoingTerminalList().size())
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            break
    }
    total.value++
    display.setArgs( total.value )
   } catch ( Exception e ) {
 	println e.printStackTrace   
   }

} 
 addEventListener( PropertyEvent ) { event ->
    if( event.event == PropertyEvent.Event.VALUE ) {
        switch( event.getProperty().getKey() ) {
            case 'outputs': 
                while ( outputs.value != getOutgoingTerminalList().size() ) {
                    if ( outputs.value > getOutgoingTerminalList().size() ) {
                        createOutgoing()
                        outputStats.set(getOutgoingTerminalList().size() -1, 0)
                    } else {
                        total.value = total.value - outputStats.get(getOutgoingTerminalList().size() -1)
                        display.setArgs( total.value )
                        outputStats.set(getOutgoingTerminalList().size() -1, -1)
                        deleteOutgoing()
                    }
                }
    		outputStats.update()
                break;
        }
    }
 }
 
 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
	  executor.schedule( { 
		executor?.shutdownNow()
	  	executor = Executors.newSingleThreadScheduledExecutor()
	  }, updateCounterDelay.value, TimeUnit.MILLISECONDS)
	}
	
	if ( event.key == "START" ) {
           if ( future == null )
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
	
	if ( event.key == "RESET" ) {
	    future?.cancel(true)
	    executor?.shutdownNow()
	    roundRobinNext = 0
	    selected.value = "Round-Robin"
	    total.value = 0
	    display.setArgs( 0 )
            for( i in 0..9 ) {
	     if( outputStats.get(i) > -1 )
	          outputStats.set(i as Integer,0)
	    }
	    outputStats.update()
	    executor = Executors.newSingleThreadScheduledExecutor()
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
}

 onRelease = {
   display.release()
	outputDisplay.release()
   future.cancel(true)
   executor.shutdownNow()
 }

 
 settings( label: "Counter Settings", layout: 'wrap 2' ) {
	box( layout:"wrap 1", constraints:"growx" ) {
		property(property: counterUse, label: 'Enable Counters' )
		property(property: updateCounterDelay, label: 'Time interval for refreshing counters(ms)' )
	}
 }
 
 layout ( layout:'center' ) { 
    node(widget: 'selectorWidget', label:"Type", labels:["Round-Robin", "Random"], default: "Round-Robin", selected: selected)
    separator( vertical: true )
    node( widget: 'sliderWidget', property: outputs, constraints:'center, w 270!' )
    separator( vertical: true ) 
    box( layout: 'wrap, ins 0' ) {
	    box( widget:'display',  constraints:'w 100!' ) {
			 node( label:'Count', fString:display, constraints:'wrap' )
	    }
	    action( label:'Clear', action: {  
	       total.value = 0
		    display.setArgs( 0 )
			 for( i in 0..9 ) {
			     if( outputStats.get(i) > -1 ) outputStats.set(i as Integer,0)
			 }
			 outputStats.update()
	    }, constraints:'right' )
	}
    separator( vertical: false )
    node( widget: 'counterWidget', counters: outputStats , onOff: counterUse, constraints:'span 5,center')
  }
 
compactLayout() {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', fString: display )
		node( label: 'Distribution', fString: outputDisplay )
	}
}</con:property><con:property key="selected" type="java.lang.String">Round-Robin</con:property><con:property key="outputs" type="java.lang.Integer">3</con:property><con:property key="total" type="java.lang.Integer">214</con:property><con:property key="counterUse" type="java.lang.Boolean">true</con:property><con:property key="updateCounterDelay" type="java.lang.Long">500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Splitter.groovy</con:property><con:property key="_digest">adf89eac97b7c15f2a890516dfb8677e</con:property><con:property key="gui.layoutX">727</con:property><con:property key="gui.layoutY">434</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="6002c29e-6cf9-4772-83cd-c862927e5aaa"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">861</con:property><con:property key="gui.layoutY">1436</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="bbdf5140-9253-4ead-9782-cbb0a742264e"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MockService 1</con:property><con:property key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1399</con:property><con:property key="gui.layoutY">242</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5bf761b9-8f2d-44ed-adc9-72d49eb32927" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout (layout:'center') { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display',  constraints:'w 100!' ) {
        node( label:'delay ', fString:display, constraints:'wrap' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">0</con:property><con:property key="selected" type="java.lang.String">none</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">9fefbba5d27edc9a8ef8fb0c488276ee</con:property><con:property key="gui.layoutX">894</con:property><con:property key="gui.layoutY">1134</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner (1)" id="1bc8e660-d490-4a74-a86e-b54c476cf501"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1334</con:property><con:property key="gui.layoutY">747</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (2)" id="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = "test"
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
		def message = newMessage();
		message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
		message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
		message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
		message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
		message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
		message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
		send( currentlyRunningTerminal, message );
	
}, 1000, 1000, TimeUnit.MILLISECONDS );

def currentlyRunningSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]
setSignature(currentlyRunningTerminal, currentlyRunningSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/userguide/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">09cec4700740c03df51b17a78c4e1ee0</con:property><con:property key="gui.layoutX">213</con:property><con:property key="gui.layoutY">990</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="e9541fa4-a45a-48d2-a964-fe7086dc2511" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )


createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'



ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id']
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">0dc50f557bb93c25e53d4f5e15a26165</con:property><con:property key="gui.layoutX">860</con:property><con:property key="gui.layoutY">1810</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (1)" id="660696d8-1a52-40c2-9fdc-335d80d83bf4" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )


createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'



ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id']
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">0dc50f557bb93c25e53d4f5e15a26165</con:property><con:property key="gui.layoutX">217</con:property><con:property key="gui.layoutY">1804</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (2)" id="fd7c8cf3-894d-4297-8b24-fa3c3db378c1" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )


createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'



ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id']
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">0dc50f557bb93c25e53d4f5e15a26165</con:property><con:property key="gui.layoutX">1473</con:property><con:property key="gui.layoutY">1810</con:property></con:attributes></con:component><con:connection outputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/output" inputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/triggerTerminal"/><con:connection outputTerminalId="04f2b993-146a-4b70-b022-94456e361e46/triggerTerminal" inputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/incomingTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 1" inputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 2" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/output" inputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 3" inputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/triggerTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/resultTerminal" inputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/triggerTerminal"/><con:connection outputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/resultTerminal" inputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/incomingTerminal"/><con:connection outputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/resultTerminal" inputTerminalId="e9541fa4-a45a-48d2-a964-fe7086dc2511/inputTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="fd7c8cf3-894d-4297-8b24-fa3c3db378c1/inputTerminal"/><con:connection outputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/resultTerminal" inputTerminalId="660696d8-1a52-40c2-9fdc-335d80d83bf4/inputTerminal"/></con:scene><con:scene label="Web LoadTest with Assertions" id="e00b1ef7-ae48-48e1-972a-f8b8caefe44c" version="23"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">510</con:property><con:property key="gui.layoutY">623</con:property><con:property key="gui.note.0">200;409;282;93;Here the same Generator -> Runner -> Analysis setup as in the first example is set up, but the runner and statistics components have been minimized to make room for the assertions below</con:property><con:property key="miniature">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
TpqWjAhPwQAAAABJRU5ErkJggg==
</con:property><con:property key="gui.note.4">579;200;876;81;This is the same Web LoadTest as shown in the first example but now with a bunch of assertions and a Table Log

As previously make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar</con:property><con:property key="gui.note.1">401;639;379;75;This Assertion is connected to the request output of the Web Page Runner, allowing it to assert (validate) the contents of each requests. We will set it to check that the TimeTaken is never over 100ms</con:property><con:property key="gui.note.2">887;642;400;75;This assertion is connected to the second output of the Web Page Runner, which outputs the stats you can see in the display of the runner. We will use the assertion to make sure there are no Discarded messages.</con:property><con:property key="gui.note.3">1412;641;419;75;This last assertion is used to assert the avg response time as calculated and output by the statistics component. We will set the max value to 50 ms</con:property><con:property key="gui.note.5">476;1080;200;150;The TableLog is connected to the output of all assertions; it will contain all failed assertions which we can export or log continously while running</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="597e6093-d97f-4f73-ab9d-de68f912b974" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = "test"
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
		def message = newMessage();
		message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
		message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
		message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
		message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
		message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
		message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
		send( currentlyRunningTerminal, message );
	
}, 1000, 1000, TimeUnit.MILLISECONDS );

def currentlyRunningSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]
setSignature(currentlyRunningTerminal, currentlyRunningSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">09cec4700740c03df51b17a78c4e1ee0</con:property><con:property key="gui.layoutX">877</con:property><con:property key="gui.layoutY">398</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="d3bcc7bc-0cc5-4156-b35e-34b23d579654" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">551</con:property><con:property key="gui.layoutY">404</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="b612904b-3546-4a11-919c-2ff7d2f974b5" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )


createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'



ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id']
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">true</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">0dc50f557bb93c25e53d4f5e15a26165</con:property><con:property key="gui.layoutX">1200</con:property><con:property key="gui.layoutY">404</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="c1af622e-3b62-46db-b5ee-49dc008eaaa1"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1889</con:property><con:property key="gui.layoutY">373</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion" id="23dd344a-2b24-47e7-9ffb-1d467cd98bb8" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * An assertion checks for errors; if an assertion fails it increases the 
 * global assertion count (depends on the tolerance).
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">TimeTaken</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">100</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">85cd5ff6a495345c09f076be06f5b7be</con:property><con:property key="gui.layoutX">390</con:property><con:property key="gui.layoutY">804</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (1)" id="261d43c7-dd84-445b-ab9b-8c1cdf9cad13" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * An assertion checks for errors; if an assertion fails it increases the 
 * global assertion count (depends on the tolerance).
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Discarded</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">0</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">85cd5ff6a495345c09f076be06f5b7be</con:property><con:property key="gui.layoutX">889</con:property><con:property key="gui.layoutY">802</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (2)" id="a495e792-6895-451a-a483-1495eefdff1e" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * An assertion checks for errors; if an assertion fails it increases the 
 * global assertion count (depends on the tolerance).
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Avg</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">50</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">85cd5ff6a495345c09f076be06f5b7be</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">798</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="b8551838-14d3-4e55-8fc8-06616eecae8b" category="output"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent

import com.eviware.loadui.api.summary.MutableSection

createProperty 'maxRows', Long, 1000
createProperty 'fileName', File 
createProperty 'saveFile', Boolean, false
createProperty 'follow', Boolean, false
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false

myTableModel = new LTableModel(1000, follow.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateFollow()
	}
});

saveFileName = fileName.value?.name

updateFollow = {
	follow.value = myTableModel.follow
}

rowsDisplay = new DelayedFormattedString( '%d', 500, value { myTableModel.rowCount } )
fileDisplay = new DelayedFormattedString( '%s', 500, value { saveFileName ?: '-' } )

onMessage = { incoming, outgoing, message ->
	super.onTerminalMessage(incoming, outgoing, message)
	message.keySet().each { k -> myTableModel.addColumn k }
	lastMsgDate = new Date();
	
	result = myTableModel.addRow(message) 
	if( result && saveFile.value ) {
		try {
			char sep = ','
			
			writer = new CSVWriter(new FileWriter(saveFileName, true), sep);
			String[] entries = myTableModel.lastRow
			writer.writeNext(entries)
			writer.flush()
		} catch (Exception e) {
			println(e.printStackTrace())
		} finally {
			writer.close()
		}
	}
}

onRelease = {
	rowsDisplay.release()
	fileDisplay.release()
}

addEventListener( PropertyEvent ) { event ->
	if( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property.key == 'maxRows' ) {
			myTableModel.maxRow = maxRows.value
		}
		else if( event.property.key == 'follow' && myTableModel.follow != follow.value as Boolean) {
			myTableModel.follow = follow.value
		} else if( event.property == fileName ) {
			saveFileName = fileName.value?.name
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "START" ) {
		saveFileName = fileName.value?.name
		if( !appendSaveFile.value && saveFileName != null) {
			def ext = saveFileName.substring(saveFileName.lastIndexOf("."), saveFileName.length())
			def name = saveFileName.substring(0, saveFileName.lastIndexOf("."))
			def timestamp = new Date().time
			saveFileName = "${fileName.value.parent}${File.separator}$name-$timestamp$ext"
			println saveFileName
		}
	}

	if ( event.key == "RESET" ) {
		myTableModel.reset()
	}
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', fString:rowsDisplay )
		node( label: 'Output File', fString:fileDisplay )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: fileName, label: 'Log File (Comma Separated) ' )
		label('If not appending file, its name will be used to generate new log files each time test is run.')
		property(property: appendSaveFile, label: 'Check to append selected file', )
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property key="maxRows" type="java.lang.Long">1000</con:property><con:property key="fileName" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="saveFile" type="java.lang.Boolean">false</con:property><con:property key="follow" type="java.lang.Boolean">false</con:property><con:property key="summaryRows" type="java.lang.Long">0</con:property><con:property key="appendSaveFile" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\TableLog.groovy</con:property><con:property key="_digest">562c50d74a0719706524bbc1298995a9</con:property><con:property key="gui.layoutX">771</con:property><con:property key="gui.layoutY">1072</con:property></con:attributes></con:component><con:connection outputTerminalId="d3bcc7bc-0cc5-4156-b35e-34b23d579654/triggerTerminal" inputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/triggerTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/runningTerminal" inputTerminalId="261d43c7-dd84-445b-ab9b-8c1cdf9cad13/inputTerminal"/><con:connection outputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/output" inputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/inputTerminal"/><con:connection outputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="261d43c7-dd84-445b-ab9b-8c1cdf9cad13/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/></con:scene></con:loadui-project>