<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="SampleProject" id="d119b449-df9e-4d99-97c7-a8164d9230db" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property key="ModelItem.reportFolder" type="java.lang.String"/><con:property key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="gui.note.0">200;208;220;273;1. GETTING STARTED
------------------------------------------------
This is a simple Web LoadTest that uses a soapUI MockService as its target. It illustrates the basic Generator -> Runner -> Analysis concept of loadUI components

Double-click the TestCase and run it to see what we're talking about!</con:property><con:property key="miniature">iVBORw0KGgoAAAANSUhEUgAAAIUAAAA7CAYAAABVGkk5AAAOsUlEQVR42u1dd1wU1xY2sRuNsSsi
KmKLghBFBVuMmMSWookau8YKiFiQoEFFkRqQiBJKiO3FLopBE9EkRnlPjbF3USzYuzF54b1/zpvv
rHcyu8yuu7DrLr69v9/3++bOnRnu3PnmnDOzcw+lSr0Y5WQpeyn5JfvwbTpxtcAsOHrsOPWZ95vZ
jid1r2IJG84W+3P/TeZAn+DtxEe8fjmTLAm1s4jeeoeAtz8cQ2IZmL/mAgUn/4uiM29zfWzoCubP
lx3X2k6JPmGHpH3+qbfdWAwLTmcuU7Y8GXs1iNaXvn5FOs/nCLVuhKy9xQhafpF6DJhAH09OoKAV
eeTdcwCv79p7CHPfUbPJNyGHeg2dQV3eHSTvpwQfMT9vM5kTiQlTKSVpplxXG8yBCVfJVlG6jGmi
MPf46eLE4ZV06MA3hsaT+sdfMRv4iJcvbCRLQm0wc3NzCYiPjyexbG2kpaUxly1b1iRRWHr8jBhP
+RzCwsJo7969lJycTMuXLy/SOPAR//P792RJGBKFLcJUUVh6/IwYT7Oev1VFER0TR7FfLKL+/fvL
iImNl5fR9rxRkkWB/h87doxOnjwpY87c+cwjR45SPd/whZHMFStWlKEqijGjPpCXc35OpMm+g+jG
pfUUNmccBU7+hFZ+87lZRAEBoEMTJ/lTeno6zZgRLJ1EmFwXHZ86dTrNnj2boqOj5XUYiIYNGzKw
7OjoyDxt2jRuz8zkgEwLyn3VUFxRXDzzD+bw+RPo3w+3UXSEnzwGfft0p60Zkbzcq1c36tfvLfL0
9KD3JDanKBISEmjRIs2YYjl0jmY8hw0bLp//uHHjaOzYsby8IDyCuXz58oxKlSpZ11IIUcBiCCjr
SkUHSsJQ1mfNnqOqfCEKQ5gcEEiTfP1fSEthLMTYC1EEzQyhsPkLxU1jPVHAdEVFx9oOomJLtCjm
LwiXsLDYKCSK5KVBdPd6Bt2TINZNDxzKrmPwoF708PYWXrd7ZwLt3B7Hy8OG9KPl6bMpMGCISaJo
0qQJOTVoQJUqVqL69etTBcl8OdSrR+XLlaOaNWowN3Ry0rDkJsD16tYziiu/8gpzDek4GLQyZcow
V65cWYtfkbZTcnFFUfB4O21YE0YXTq2iKZKrRd3Lqx2PaUpSEJ05upy3yzurcTXX89bR7fyN9Oh2
JvlO/Jiyt31Bt69uJJ8encjfbxD19OlstCj69e5DbT3eoO7d3qSWzZqT5xttyaWxM73Rxp2aNGpM
bd09mNu3bafFHm5tmLE9uEiWYsK4AYXWHT2YZrKlcGvtSh3bt+eOuLu6kmM9B2rVoiU51KlLzZq4
MKPDSkZ7nZq15Iutj59eWL2i0BWDuUShC8QWyvq9Gxmq2/2ps11RLEXPt3pQU+cm1KmjFzVwqE9t
pPHFmLm1as3s7urG3E4SDhgiefnll6lWrVpacdkzRXHs4NcWcx/v+PSkt7p3p26du1DnTp34ZNTQ
tGlTatasGbOlUZLdB8axUQMn6ujZnupLFlOIQXAbSRTYtoFknZUiUD2+qCxLC6HPgkbSzOnD6cm9
7yjtq2Ca/dloSl4SRBdOr6KszVGs/KTEGRTgP5hNHurrV4cVSRTOkkuAmh0llyEsBLhGter06quv
cofrSW1gBwcHqlK5kuROHI1ia1iKk4e/oT8fZJGHRxv6434W/SEt+/ToTAVSm7/0BIdtOnZsR1P8
P5HH5pHkjrt27cBuOXHRNHrn7S70+G4m/fVoO/1+dytdk9yLsaLo2qkzubZqRV7tO/A4wh20bN6C
nCQXjHGACwY3btxYiyEScOtWLXn8tEQBQUQv9KVpU4bSkMF9aOoU7Rjhg/d78COqcl1czGTKlmKL
xfFTTRaFU31Hcn29lSwG5UVUE4W+4/9x/zseQOU6a7mPW1c18QHcxPdbY7hvItYAHt7SxGRZmyPp
idQGEZnLUnTw9GQLATHALdSpU4fPqXbt2sx169aVLYXKMdUthfqAZ1nMfYgYonTp0nzxXnrpJZkh
CjDEoGTd7fQxLqxaHaIwxCXZfXhLrhZBpYuLCwfusARKdnZ2ZkaAnys9utOCBYxdo0fz+oK1a6XT
Wa8uCghBqWCYMriJgsfa20H5xRFF1Sqv6g0UhaXIz9ukBdHu6+tLOTk58qtZWw00n6coGjVqxOcA
dwE2ZCn4RVVtZx6fFStW8PpabrVoyNdO1n1PofRnugzLAIY4/3q0TYZo/+mnn2jHjh2M06dPF9of
EbVaHe7IEJdkUYi3u8aI4vz58zLwwxnWnzt3jqElitBZY5iDZ4ww2KnD+1P0tu36Pp6O/JpqlCgM
PVKqxRSGtrdbCo2lQN8hDjDGTskYQzBEo2SIBS5ciMaqlsIYUegGQ7AMBn7d4/2Fy1Pu+/8gClMs
RUZGhjSW2XTw4EE6cuQIW9vdu3fzz+5aonh8J5OOH0rnp5A1K+dQWnIwxUVPljvzc/YifixN+2om
XTq3WrIKcbQ9M5q2bFhYJFEgQq5Zs6YqV61alVn58gd1iCIrK4t27txJe/bsYVSoUIFPFoEi9lfr
Ay409q9SpYoWQyRKLsmiQACJCy8YlkPJCDiV7Qg8le2ibvOW4vCBFDqQs4QZ9ddee03LHegy9l+3
bh1t3LhRC+J4dktR+OWVeKOJJxCruw9jAk3xwkUw2qtVq8Z+UpdFe2JiogyYRh8fH7477IHm36JQ
fskFUdjMRzamxBQpS4Pk9je7dCU3V9dCEO0FBQWkLPCV1atXfyEsxf49iQYDTbhSwbixlMw/OkoM
8YjXCWDcEBs2bKDU1FT68ccfrSsKdBBqVmNcRDD2x6+IYNFeXbIM+BVViRqNq8vtJ06cKATcLWiH
VQHDDamxqaKwkfLiuA88BiEwVGMEmmDxCIyAVrTjpJxUoNwfL2eU9XLlyjEjwDTEJVkUcJEQgGCI
RMmwIGAElEoW7cKFlrhHUrTD1KnBGu8pXiRLAWtZxcWlZAaaxvDzeqP5Ioli165dDJu3FLb+RtOW
RIH3EDg/wYgRlAwxgOFGwBARGGOrrFtVFPDj/J2ECkPdYJyIkvVtr8tsChV1xChg3BVgxBpqbA80
S9knAxV3MpAtiaLETwY6e/Ys2SpKoijUHsOLCquJwpwnYW7YRWFhUeSeWqFvgGdISLVR2Iu92Iu9
2Iu92Iu92Iu92Iu92Iu92Iu92Iu92Iu9aJdrw6dEkTmwI3sn+fn5kbmOJ/UtoaQN5qn8v2j70d/N
Aj7g9ctbh9y4spUsAX0nsfiHe2QMIlaffOY2fSctogExZ8nYY+rDxAVrNZi/1qTfPiydsRi4dmmL
wQzG3+Y8pLYuLvTpkrM0Iu4Q9R4fRx19BlLn3iNpbFIuDZ67nSakXaNPl+ZShx4f8fK45EvMunh6
UltS8y9tpvHjxxO4OFi1fA7zuVNrmfUN5JDEq2SreHPiCpNEcTUvgyyNKxc3yctqfUjKvk/vxV42
C/iAV/IyUvFHLQF9A2kr307s27ev0LqkpCSTRHHq6Ap6nlDrw40bN+T+I28mzgufART5e4r/Pvkh
9Xn+bP6iicIGJgNpicIsH9lYQhQ3Lq17pigiI6M5n6OtALk7MTW/pIpiwQJNHsz9+/erAm2hoaHM
c+eGMbAcFRVN9eo5KBPNFhbF1k0R8vKDm1uK1PGbl40QRVQMd2pmcAitXr1aC8gSq0kCqkmyGhgY
SCEhIaoZd728vOTvDUW7WsbdqOgvKCIiglq3dtWbcffMmTNFFkW/p9lzMVFbpHZ4cHMz5w5DCkqk
QrSoKJ4mSg0PDy8EMZ5CFLNmhTKMFoUxQDI0TT6KuGKLYuDAgTJGjBgpL2uJQifjblEBURhqL44o
bMVSGIIQhRIQRWRUrPRYH0DTpwdZzn0YI4romFi+6LYCuA97TKEnpkDCj8iFk3iq3oY187l+68oG
Tql45thyOpCTRJ+HjOE0gBnrw2n/3iTatiWKZgWPMkkUAPJjNm/eXIt10aJFC9Xt9HFxUFxR3Lm2
kXNqiDxh3t6e9GV8IB3al0LhYZpE7t5enpR/cS1vPy90HGfVXbp4Ote7d/em3u92K5Ioli1bRm1c
XalLp05yBl0kmwMrk6qK9JQi2apIwirYqpYCE3TQkdeli+7i3IScpRNp6NiAUykq0dipITMShwqu
XbMmzw/FR7a6XBzMmzevyKL4OTuBAgM+ocl+g2jqlKF0QLpZRo14n4WANIru7m70a85XdP/GZk3K
6yUaFzx96jCaFjiU7uRv4tTWSD95X4pFVq+cS3lnvzVaFAEBAdTZ25u6denC6Zi9OnTgC4+8mkpG
+uW71zdpZQBWJjUpJApMTf909IecyUaT7zGKc1ROGPcR/6sCLC+WlB+xYBJbikdSUAULgsw26Smf
mSQKBDXIHY2LDkUjdTCUqovaNWrytsg0o8bIYKPkogL7F0cU1nYf/v7+5NywEVsEJKzVTbsMLvV0
1hzye0J4yOt5+fxqrclCqpYiJtKPE4dD6ahHhfsyQxDpKSHS00kkK3/Jl9P4f39M9htMa1fNY1cj
XIixohCWAUlBIQwhBOUFFlP+IAJj/++WNUSBGwqZia9JruHEoXStlJJwu7AYRw6k0pXcNbx87GAa
nT+5klNU4n+FwMXclNz0icPpdHh/Kh3/7Ws+DuqmiKKthwePKXJqsrV1cuIxFIwZYXevZdCDW1u0
coJZ/D2FMaLAdDYPqeNIxg5Vw9dh7qguMPVP8J38jUZB7TjGAP+Dq6ii6NihLbuQTlIcsVtipLJu
186DbzAI5MnT7LtIA4mLjzsVWfzxuIoYA7EFMho/lG44ZPH/4btYzv6POxnZjo0RhdJCiHm4Ypqg
YDG/VlgGwcePH+fpk1YVBTqCzjs+fUYW7kAXSktREtzH8KF9OQAXdd07/e8x2qB3/CaO/7hI7kMp
BlNFYdB9PC9RIDBE0Ij/W4UkI8gkI/5tkYAyOx7aceHi4hZRXbe6/FTyyy+/ULkK5eRsNO7u7ppZ
5x6avJG6x3sWrBFTwEWYI6ZAoKkMGHWz4QnG2CuTqwqI7f8HRPQV+bAwIyQAAAAASUVORK5CYII=
</con:property><con:property key="gui.note.1">205;632;200;150;2. Assertions and Logging
-------------------------------------
This TestCase extends the first by adding a couple of assertions and a TableLog to catch failed responses. </con:property><con:property key="gui.note.2">997;627;263;153;4. Controlling Flow 
-------------------------------------
This TestCase shows how flow-control components can be used to combine multiple runners for creating complex Load Scenarios. It also introduces the soapUI Runner for running a soapUI TestCase as a part of your LoadTest</con:property><con:property key="gui.note.3">996;209;265;173;3. Schedulers and Generators
---------------------------------------
This TestCase shows how multiple generators can be combined within a LoadTest to generate varying load over time. Schedulers are used to add bursts of simulated Load</con:property></con:attributes><con:scene label="Simple Web LoadTest" id="f53a7146-d347-4f03-81d7-bfff0caa41a0" version="11"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">488</con:property><con:property key="gui.layoutY">202</con:property><con:property key="gui.note.0">200;407;252;75;This FixedRate runner is configued to issue 10 request triggers per second</con:property><con:property key="gui.note.1">200;637;224;150;The WebPage Runner issues a request to the specified web page address each time the FixedRate generator sends a trigger to it. 

The display to the right shows ongoing statistics</con:property><con:property key="gui.note.2">201;922;222;305;The statistics component is connected to the output of the Web Page Runner which outputs the response-time for each issues request. 

Some thing to try:
- openthe settings dialog and select which values you want to show
- try minimizing the component (with the top-right [-] button)
- try increasing or decreasing the load generated by the FixedRate trigger (by turning the knob) to see how the statistics change

</con:property><con:property key="gui.note.3">1241;627;350;100;The MockService is used in this tutorial to have something to test against . It is started when the LoadTest starts and the number of Requests will be the same as the Requests sent by the WebPage Runner</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">395;200;876;81;This is a simple Web LoadTest showing you how to connect a basic Generator -> Runner -> Analysis LoadTest. 

Make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar (Next to the "TestCase" menu). You will see the WebPage Runner starting to send requests and statistics being displayed in the Statistics Component. </con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="0b1546d7-feeb-4d93-b3c9-f6ac151594fc" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">533</con:property><con:property key="gui.layoutY">626</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="2cb44449-032c-4163-8408-e5b61bce2d3f" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">677</con:property><con:property key="gui.layoutY">395</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="7c508081-aa40-49c4-8722-246670b4a417" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">583</con:property><con:property key="gui.layoutY">919</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="f01e8c30-2fd1-417c-87bf-f8c3ae153c4b"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1205</con:property><con:property key="gui.layoutY">809</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="2cb44449-032c-4163-8408-e5b61bce2d3f/triggerTerminal" inputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/triggerTerminal"/><con:connection outputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/resultTerminal" inputTerminalId="7c508081-aa40-49c4-8722-246670b4a417/inputTerminal"/></con:scene><con:scene label="Complex Load Generation" id="234ea2c5-c94b-4e44-aeae-bd37cd09069b" version="19"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1325</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
</con:property><con:property key="limits">Time=600;</con:property><con:property key="gui.note.0">228;402;352;65;The first scheduler starts a Ramp Generator that will ramp from 0 to 100 req  / sec over the first 2 minutes of the LoadTest</con:property><con:property key="gui.note.1">742;390;341;87;Once the Ramp-up is finished, a Random Load Generator is started for the remains of the Test, which will generate a base load fo 100 requests / sec with Gaussian random distribution</con:property><con:property key="gui.note.2">1206;396;448;75;This schduler will add an additional load of 100 req / sec every 10 seconds at the start of each minute. The scheduler will itself be started at the same time as the random generator.</con:property><con:property key="gui.note.3">508;200;798;82;This TestCase shows how to use schedulers in combination with Generators to generate varying load over time: it first Ramps from 0 to 100 requests / sec over the first two minutes, then maintains a randomized base load with reoccuring Burst of requests for the rest of the Test.

The TestCase has its execution limit set to 10 minutes (see toolbar above)</con:property><con:property key="gui.note.4">200;1268;315;114;All Generators are configured to trigger the same Web Page Runner, but you could just as well trigger different ones. 

Its output goes to a standard stastics component as usual</con:property><con:property key="gui.note.5">1280;1384;420;58;Out trustworthy soapUI MockService is once again used as a standin for a real service.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="133d26ad-1f1d-44b0-849c-c9dc31549d48" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">642</con:property><con:property key="gui.layoutY">1244</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="e6588efe-e0c8-463b-b604-398edb7881d5" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">1305</con:property><con:property key="gui.layoutY">911</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="d9d3b5d3-00e3-4654-b75f-4276c0135340" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )
direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

display = new DelayedFormattedString( '%d %s', 500, currentRate.longValue(), direction )
scheduled = false
future = null

onRelease = {  display.release() }

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
		if (start.value != 0) {
			if (msPerUnit/start.value > period.value * 1000) {
				targetReached = true
				currentRate = end.value
			}
		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	display.setArgs( currentRate.longValue(), direction )
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			else 
				currentDelay = 1 //Handling edge cases
		} 
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			display.setArgs( currentRate.longValue(), direction )
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		display.setArgs( currentRate.longValue(), direction )
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
		started = false;
		scheduled = false;
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	if ( event.key == "COMPLETE" ) {
		reset()
	}
}


//Layout
layout  { 
	property( property:start, label:'Start', min:0 ) 
	property( property:end, label:'End', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', fString:display, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="start" type="java.lang.Long">0</con:property><con:property key="end" type="java.lang.Long">100</con:property><con:property key="period" type="java.lang.Long">120</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Ramp.groovy</con:property><con:property key="_digest">becdfee00487f8aa9960b15f779e4ef2</con:property><con:property key="gui.layoutX">229</con:property><con:property key="gui.layoutY">906</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

display = new DelayedFormattedString( '%d/%s', 200, rate.value, unit.value )
randomDisplay = new DelayedFormattedString( '%d %s', 200, factor.value, "%" )

random = new Random()

timer = new Timer(true)

future = null

onRelease = {  display.release() }

schedule = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			schedule()
		}
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel()
		if (stateProperty.value)
			future?.cancel()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		display.setArgs(rate.value, unit.value)
		randomDisplay.setArgs(factor.value, "%")
		schedule()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
	}
	
	if ( event.key == "START" ) {
		future?.cancel()
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Base Rate', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	
	node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
			images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
	
	separator( vertical:true )
	property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1 )
	separator( vertical:true )
	box( widget:'display', layout:'align center') {
		node( label:'current rate', fString:display )
		node( label:'random', fString:randomDisplay )
	}
}

//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'current rate', fString: display )
		node( label: 'random', fString: randomDisplay )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if (running)
	schedule();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property><con:property key="type" type="java.lang.String">Gaussian</con:property><con:property key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Random.groovy</con:property><con:property key="_digest">33856beef7937e0da8eb86d296f83602</con:property><con:property key="gui.layoutX">680</con:property><con:property key="gui.layoutY">896</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval" id="e36a65c3-b2e1-4db7-967b-bf70cb77182b" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit >= 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime = startTime + duration.value * mult
	if( limit >= 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">0</con:property><con:property key="duration" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">027116bc4eddd9d9a854c17dbddd4197</con:property><con:property key="gui.layoutX">230</con:property><con:property key="gui.layoutY">570</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval (1)" id="f491d887-a1e7-4b12-8174-0b4a9f584525" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit >= 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime = startTime + duration.value * mult
	if( limit >= 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">2</con:property><con:property key="duration" type="java.lang.Long">8</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">027116bc4eddd9d9a854c17dbddd4197</con:property><con:property key="gui.layoutX">735</con:property><con:property key="gui.layoutY">576</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Scheduler" id="ee825185-22ab-42ed-852a-c87859ffbc47" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop at a specified day &amp; time
 *
 * @help http://www.loadui.org/Schedulers/scheduler-component.html
 * @category scheduler
 * @nonBlocking true
 * @dependency org.quartz-scheduler:quartz:1.8.3
 * 
 */

import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.component.categories.TriggerCategory
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.FormattingUtils
import com.eviware.loadui.util.layout.DelayedFormattedString
import org.quartz.Scheduler
import org.quartz.CronTrigger
import org.quartz.CronExpression
import org.quartz.impl.StdSchedulerFactory
import org.quartz.JobExecutionContext
import org.quartz.JobExecutionException
import org.quartz.Job
import org.quartz.JobDetail
import java.util.Calendar
import java.util.Date
import org.quartz.listeners.JobListenerSupport
import com.eviware.loadui.util.layout.DelayedFormattedString
import java.text.SimpleDateFormat
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.layout.SchedulerModel

def counter = 0
def durationHolder = 0
def runsHolder = 0
def startSent = false

def schedulerModel = new SchedulerModel()

createProperty( 'day', String, "* (All)" )
createProperty( 'time', String, "0 0 0" )
def duration = createProperty( 'duration', Long, 0 )
def runsLimit = createProperty( 'runsLimit', Long, 0 )

def canvas = getCanvas()

sendStart = { 
	sendEnabled( true ) 
	startSent = true
	counter++
	if(runsHolder > 0 &amp;&amp; counter >= runsHolder){
		unscheduleStartTrigger()
	}
	//setActivityStrategy(ActivityStrategies.BLINKING)
	pauseTotal = 0
}

sendStop = { 
	sendEnabled( false ) 
	//setActivityStrategy(ActivityStrategies.OFF)
	unscheduleEndTrigger()
	endTrigger = null
	pauseTotal = 0
}

class SchedulerJob implements Job {
	void execute(JobExecutionContext context) throws JobExecutionException {}
}

def startTrigger = null
def startJob = new JobDetail("startJob", "group", SchedulerJob.class)
startJob.addJobListener("startJobListener")

def endTrigger = null
def endJob = new JobDetail("endJob", "group", SchedulerJob.class)
endJob.addJobListener("endJobListener")

def paused = false
def pauseStart = -1
def pauseTotal = 0
def endTriggerStart = null //this is the time when latest enable event was sent
def rescheduleAfterPause = false
def endTriggerTimeLeft = null

def maxDuration = 0;

def scheduler = new StdSchedulerFactory().getScheduler()
scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"startJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStart()
		scheduleEndTrigger(new Date(), durationHolder)
	}
})

scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"endJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStop()
		schedulerModel.incrementRunsCounter()
	}
})

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION) {
		if(!paused){ 
			scheduleStartTrigger()
		}
		else if (rescheduleAfterPause){
			def now = new Date()
			pauseTotal += now.getTime() - pauseStart.getTime()
			scheduleEndTrigger(now, endTriggerStart.getTime() + durationHolder + pauseTotal - now.getTime())
			rescheduleAfterPause = false
		}
		scheduler?.start()
		paused = false
	}
	else if( event.key == CanvasItem.STOP_ACTION) {
		scheduler?.standby()
		paused = true
		pauseStart = new Date()
		if(endTrigger != null){
			unscheduleEndTrigger()
			endTrigger = null
			rescheduleAfterPause = true
		}
	}
	else if( event.key == CanvasItem.COMPLETE_ACTION) {
		reset()
	}
	else if(event.key == CounterHolder.COUNTER_RESET_ACTION){
		reset()
		scheduleStartTrigger()
		scheduler?.start()
	}
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ day, time, runsLimit, duration ] ) {
		validateDuration()
		if( !canvas.running ){
			updateState()
		} 
	}
}

validateDuration = {
	def expr = new CronExpression(createStartTriggerPattern())
	def calendar = Calendar.getInstance()
	def nextDate = expr.getNextValidTimeAfter(calendar.getTime())
	calendar.setTime(nextDate)
	calendar.add(Calendar.SECOND, 1)
	def dateAfterNext = expr.getNextValidTimeAfter(calendar.getTime())
	def diff = dateAfterNext.getTime() - nextDate.getTime()
	if(diff/1000 &lt; duration.value){
		duration.value = diff/1000
	}
	maxDuration = diff
}

updateState = {
	def expr = new CronExpression(createStartTriggerPattern())
	schedulerModel.setSeconds(expr.seconds)
	schedulerModel.setMinutes(expr.minutes)
	schedulerModel.setHours(expr.hours)
	schedulerModel.setDays(expr.daysOfWeek)
	schedulerModel.setDuration(duration.value * 1000)
	schedulerModel.setMaxDuration(maxDuration)
	schedulerModel.setRunsLimit((int)runsLimit.value)
	schedulerModel.notifyObservers()
}

createStartTriggerPattern = {
	def startTriggerPattern = "${time.value} "
	startTriggerPattern += "? * "
	if(day.value.equals("* (All)")){
		startTriggerPattern += "* "
	}
	else{
		startTriggerPattern += "${day.value.substring(0,3).toUpperCase()} "
	}
	startTriggerPattern
}

scheduleStartTrigger = {
	runsHolder = runsLimit.value
	durationHolder = duration.value * 1000
	
	def startTriggerPattern = createStartTriggerPattern()
	unscheduleStartTrigger()
	scheduler.addJob(startJob, true)
	startTrigger = new CronTrigger("startTrigger", "group", "startJob", "group", startTriggerPattern)
	scheduler.scheduleJob(startTrigger)
	
	def now = new Date()
	def next = startTrigger.getFireTimeAfter(now)
	if(now.getTime() &lt;= next.getTime() - maxDuration + durationHolder){
		sendStart()
		scheduleEndTrigger(now, next.getTime() - maxDuration + durationHolder - now.getTime())
	}
	else{
		sendStop()
	}
}

scheduleEndTrigger = {startTime, durationInMillis ->
	if(durationHolder > 0){
		def calendar = Calendar.getInstance()
		calendar.setTime(startTime)
		calendar.add(Calendar.MILLISECOND, (int)durationInMillis)

		def endTriggerPattern = ""
		endTriggerPattern += "${calendar.get(Calendar.SECOND)} "
		endTriggerPattern += "${calendar.get(Calendar.MINUTE)} "
		endTriggerPattern += "${calendar.get(Calendar.HOUR_OF_DAY)} "
		endTriggerPattern += "${calendar.get(Calendar.DAY_OF_MONTH)} "
		endTriggerPattern += "${calendar.get(Calendar.MONTH) + 1} "
		endTriggerPattern += "? "
		endTriggerPattern += "${calendar.get(Calendar.YEAR)} "
		
		unscheduleEndTrigger()
		scheduler.addJob(endJob, true)
		endTrigger = new CronTrigger("endTrigger", "group", "endJob", "group", endTriggerPattern)
		scheduler.scheduleJob(endTrigger)
	}
}

reset = {
	counter = 0
	durationHolder = 0
	runsHolder = 0
	paused = false
	pauseStart = -1
	pauseTotal = 0
	endTriggerStart = null
	rescheduleAfterPause = false
	endTriggerTimeLeft = null
	unscheduleStartTrigger()
	unscheduleEndTrigger()
	startTrigger = null
	endTrigger = null
	startSent = false
	//setActivityStrategy(ActivityStrategies.OFF)
	schedulerModel.resetRunsCounter()
}

unscheduleStartTrigger = {
	try{
		scheduler.unscheduleJob("startTrigger", "group")
	}
	catch(Exception e){}
}

unscheduleEndTrigger = {
	try{
		scheduler.unscheduleJob("endTrigger", "group")
	}
	catch(Exception e){}
}

onRelease = {
	scheduler.shutdown()
}

layout {
	node( widget: 'schedulerWidget', model: schedulerModel, constraints: 'span 5' )
	separator( vertical: false )
	property(property: day, widget: 'comboBox', label: 'Day', options: ['* (All)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], constraints: 'w 100!' )
	separator(vertical: true)
	property( property: time, widget: 'quartzCron', label: 'Time', constraints: 'w 130!' )
	separator(vertical: true)
	property( property: duration, widget: 'time', label: 'Duration', constraints: 'w 130!' )
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Day', fString:new DelayedFormattedString( '%s', 1000, day ) )
		node( label:'Time', fString:new DelayedFormattedString( '%s', 1000, value { time.value.replace(' ',':') } ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%s', 1000, value { FormattingUtils.formatTime( duration.value ) } ) )
	}
}

settings( label: "Basic" ) {
	property( property: runsLimit, label: 'Runs')
}

validateDuration()
updateState()</con:property><con:property key="day" type="java.lang.String">* (All)</con:property><con:property key="time" type="java.lang.String">0 * *</con:property><con:property key="duration" type="java.lang.Long">10</con:property><con:property key="runsLimit" type="java.lang.Long">0</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Scheduler</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Scheduler.groovy</con:property><con:property key="_digest">0dfb5dd973a21ae17a167bf65239767b</con:property><con:property key="gui.layoutX">1195</con:property><con:property key="gui.layoutY">585</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="05458282-13f4-4c65-a2fe-0687b851e4cc" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">false</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">697</con:property><con:property key="gui.layoutY">1527</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="8a8cf6f5-e6f6-4421-9a9f-5ff5261affa5"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1284</con:property><con:property key="gui.layoutY">1536</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e36a65c3-b2e1-4db7-967b-bf70cb77182b/outgoingTerminal" inputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/stateTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/stateTerminal"/><con:connection outputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/outgoingTerminal" inputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/stateTerminal"/><con:connection outputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/resultTerminal" inputTerminalId="05458282-13f4-4c65-a2fe-0687b851e4cc/inputTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/stateTerminal"/></con:scene><con:scene label="Complex Load Scenario" id="5dd7734e-f092-4152-b2e8-3663dac12bf0" version="41"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1332</con:property><con:property key="gui.layoutY">619</con:property><con:property key="miniature">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
RU5ErkJggg==
</con:property><con:property key="gui.note.0">255;203;392;289;This TestCase shows you how to use the Splitter and Delay components to combine multiple runners into one larger Load Scenario.

- An initial splitter is used after the Load Generator to divide load between three paths: 
1) The first with 3 web requests, with a delay between the second and third
2) The second running a soapUI TestCase after an initial delay
3) The third first running a seperate soapUI LoadTest after which it will join the path of the second option.

Statistics components have been added for both soapUI Runners and the last WebPage Runner. 

As always the soapUI mockservice is used to provide a stand-in for the relate target systems and services.</con:property><con:property key="limits">Requests=10000;Time=600;</con:property><con:property key="gui.note.1">246;2226;248;54;The standard soapUI MockService used in our samples.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="551df37b-ca36-4721-a266-33d59cff8bd3" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">208</con:property><con:property key="gui.layoutY">729</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (1)" id="326df2a4-1c3f-49a2-b54c-692b08aff9fa" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/search.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">1492</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="0ef58711-1bba-4b7d-8f61-3d1793b613c3" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
waitingDisplay = new DelayedFormattedString( ' %d  ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
waitingCount = 0;
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    waitingCount++;
    waitingDisplay.setArgs(waitingCount);
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                 waitingCount--;
    			waitingDisplay.setArgs(waitingCount);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        					waitingCount--;
    						waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        						waitingCount--;
    							waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display' ) {
        node( label:'delay ', fString:display, constraints:'w 60!' )
        node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display, constraints:'w 60!' )
		node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">500</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">35a1e49382a3c7fd2c2c87873711ac7c</con:property><con:property key="gui.layoutX">309</con:property><con:property key="gui.layoutY">1255</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="04f2b993-146a-4b70-b022-94456e361e46" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">96</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">946</con:property><con:property key="gui.layoutY">200</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter" id="2bde326b-ab20-48e8-ab2b-5913ee042048" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 * 
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */
 
 import java.util.concurrent.Executors
 import java.util.concurrent.TimeUnit

 import com.eviware.loadui.api.events.PropertyEvent
 import com.eviware.loadui.util.collections.ObservableList
 import com.eviware.loadui.util.layout.DelayedFormattedString
 import com.eviware.loadui.api.events.ActionEvent
 
 // one output minimum
 
 createProperty('selected', String, "Round-Robin" )
 createProperty('outputs', Integer, 1 )
 createProperty('total', Integer, 0 )
 createProperty('counterUse', Boolean, true )
 createProperty('updateCounterDelay', Long, 500)
 
 // locals

 total.value = 0
 
 def roundRobinNext = 0
 ObservableList outputStats = new ObservableList()
 outputStats.add(0)
 for( i in 1..9 ) {
    outputStats.add(-1)
}
 cnt = 0
 while( outputs.value > cnt ) {
 	createOutgoing()
 	outputStats.set( cnt, 0 )
        cnt++
 }
    
 display = new DelayedFormattedString( '%d', 500, 0 )
 outputDisplay = new DelayedFormattedString( '%s', 500, value({ outputStats.findAll({ it >= 0 }).join('          ') }) )

 executor = Executors.newSingleThreadScheduledExecutor()
 future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 

 onMessage = { incoming, outgoing, message ->
 	super.onTerminalMessage(incoming, outgoing, message)
   try {
    def next = 0;
    switch( selected.value ) {
        case "Round-Robin": 
            next = roundRobinNext
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            if( roundRobinNext + 1 == getOutgoingTerminalList().size() )
                roundRobinNext = 0
            else
                roundRobinNext++
            break
        case "Random" :
            random = new Random()
            next = random.nextInt(getOutgoingTerminalList().size())
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            break
    }
    total.value++
    display.setArgs( total.value )
   } catch ( Exception e ) {
 	println e.printStackTrace   
   }

} 
 addEventListener( PropertyEvent ) { event ->
    if( event.event == PropertyEvent.Event.VALUE ) {
        switch( event.getProperty().getKey() ) {
            case 'outputs': 
                while ( outputs.value != getOutgoingTerminalList().size() ) {
                    if ( outputs.value > getOutgoingTerminalList().size() ) {
                        createOutgoing()
                        outputStats.set(getOutgoingTerminalList().size() -1, 0)
                    } else {
                        total.value = total.value - outputStats.get(getOutgoingTerminalList().size() -1)
                        display.setArgs( total.value )
                        outputStats.set(getOutgoingTerminalList().size() -1, -1)
                        deleteOutgoing()
                    }
                }
    		outputStats.update()
                break;
        }
    }
 }
 
 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
	  executor.schedule( { 
		executor?.shutdownNow()
	  	executor = Executors.newSingleThreadScheduledExecutor()
	  }, updateCounterDelay.value, TimeUnit.MILLISECONDS)
	}
	
	if ( event.key == "START" ) {
           if ( future == null )
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
	
	if ( event.key == "RESET" ) {
	    future?.cancel(true)
	    executor?.shutdownNow()
	    roundRobinNext = 0
	    selected.value = "Round-Robin"
	    total.value = 0
	    display.setArgs( 0 )
            for( i in 0..9 ) {
	     if( outputStats.get(i) > -1 )
	          outputStats.set(i as Integer,0)
	    }
	    outputStats.update()
	    executor = Executors.newSingleThreadScheduledExecutor()
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
}

 onRelease = {
   display.release()
	outputDisplay.release()
   future.cancel(true)
   executor.shutdownNow()
 }

 
 settings( label: "Counter Settings", layout: 'wrap 2' ) {
	box( layout:"wrap 1", constraints:"growx" ) {
		property(property: counterUse, label: 'Enable Counters' )
		property(property: updateCounterDelay, label: 'Time interval for refreshing counters(ms)' )
	}
 }
 
 layout ( layout:'gap 10 5' ) { 
    node(widget: 'selectorWidget', label:"Type", labels:["Round-Robin", "Random"], default: "Round-Robin", selected: selected)
    separator( vertical: true )
    node( widget: 'sliderWidget', property: outputs, constraints:'center, w 270!' )
    separator( vertical: true ) 
    box( layout: 'wrap, ins 0' ) {
	    box( widget:'display',  constraints:'w 100!' ) {
			 node( label:'Count', fString:display, constraints:'wrap' )
	    }
	    action( label:'Clear', action: {  
	       total.value = 0
		    display.setArgs( 0 )
			 for( i in 0..9 ) {
			     if( outputStats.get(i) > -1 ) outputStats.set(i as Integer,0)
			 }
			 outputStats.update()
	    }, constraints:'right' )
	}
    separator( vertical: false )
    node( widget: 'counterWidget', counters: outputStats , onOff: counterUse, constraints:'span 5,center')
  }
 
compactLayout() {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', fString: display )
		node( label: 'Distribution', fString: outputDisplay )
	}
}</con:property><con:property key="selected" type="java.lang.String">Round-Robin</con:property><con:property key="outputs" type="java.lang.Integer">3</con:property><con:property key="total" type="java.lang.Integer">0</con:property><con:property key="counterUse" type="java.lang.Boolean">true</con:property><con:property key="updateCounterDelay" type="java.lang.Long">500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Splitter.groovy</con:property><con:property key="_digest">b1f551a422f26b85a079314c971698fc</con:property><con:property key="gui.layoutX">806</con:property><con:property key="gui.layoutY">429</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="6002c29e-6cf9-4772-83cd-c862927e5aaa"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">861</con:property><con:property key="gui.layoutY">1439</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="bbdf5140-9253-4ead-9782-cbb0a742264e"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MockService 1</con:property><con:property key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">531</con:property><con:property key="gui.layoutY">2222</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5bf761b9-8f2d-44ed-adc9-72d49eb32927" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

random = new Random()
 
display = new DelayedFormattedString( ' %d /ms ', 500, 0 )
waitingDisplay = new DelayedFormattedString( ' %d  ', 500, 0 )
 
output = createOutput( 'output', "Message Output" )
 
waitingCount = 0;
createProperty('delay', Long, 0)
createProperty('selected', String, 'none')
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
    super.onTerminalMessage(incoming, outgoing, message)
    delayIsRandom = random.nextInt(101) > randomDelay.value
    waitingCount++;
    waitingDisplay.setArgs(waitingCount);
    if ( selected.value == 'none'  ) {
        message.put("actualDelay", delay.value )
        executor.schedule( { 
                 send( output, message);
                 waitingCount--;
    			waitingDisplay.setArgs(waitingCount);
                       display.setArgs( message.get("actualDelay") ) }, delay.value, TimeUnit.MILLISECONDS ) 
    }
    if ( selected.value == 'Gauss' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.nextGaussian() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        					waitingCount--;
    						waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") )  }, tmpDelay, TimeUnit.MILLISECONDS )
    }
    if ( selected.value == 'Uniform' &amp;&amp; delayIsRandom ) {
        tmpDelay = Math.abs( (int)(random.random() * delay.value) )
        message.put("actualDelay", tmpDelay )
        executor.schedule( { send( output, message);
        						waitingCount--;
    							waitingDisplay.setArgs(waitingCount);
                             display.setArgs( message.get("actualDelay") ) }, tmpDelay, TimeUnit.MILLISECONDS ) 
    }
 }
 
 onRelease = {
   display.release()
   executor.shutdownNow()
 }

 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		executor.shutdownNow()
	}
	
	if ( event.key == "START" ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
	    display.setArgs(0)
	}
 }

 layout { 
    property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
    separator( vertical:true )
    node(widget: 'selectorWidget', labels:["none", "Gauss", "Uniform"], default: selected.value, selected: selected)
    property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
    separator( vertical:true )
    box( widget:'display' ) {
        node( label:'delay ', fString:display, constraints:'w 60!' )
        node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
    }
 }
 
compactLayout {
	box( widget:'display' ) {
		node( label:'delay ', fString:display, constraints:'w 60!' )
		node( label:'waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
</con:property><con:property key="delay" type="java.lang.Long">600</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">35a1e49382a3c7fd2c2c87873711ac7c</con:property><con:property key="gui.layoutX">877</con:property><con:property key="gui.layoutY">1137</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner (1)" id="1bc8e660-d490-4a74-a86e-b54c476cf501"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1387</con:property><con:property key="gui.layoutY">774</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (2)" id="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/userguide/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">213</con:property><con:property key="gui.layoutY">993</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="e9541fa4-a45a-48d2-a964-fe7086dc2511" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">860</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (1)" id="660696d8-1a52-40c2-9fdc-335d80d83bf4" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">217</con:property><con:property key="gui.layoutY">1807</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (2)" id="fd7c8cf3-894d-4297-8b24-fa3c3db378c1" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">1473</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:connection outputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/output" inputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/triggerTerminal"/><con:connection outputTerminalId="04f2b993-146a-4b70-b022-94456e361e46/triggerTerminal" inputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/incomingTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 1" inputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 2" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/output" inputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 3" inputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/triggerTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/resultTerminal" inputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/triggerTerminal"/><con:connection outputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/resultTerminal" inputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/incomingTerminal"/><con:connection outputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/resultTerminal" inputTerminalId="e9541fa4-a45a-48d2-a964-fe7086dc2511/inputTerminal"/><con:connection outputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/resultTerminal" inputTerminalId="660696d8-1a52-40c2-9fdc-335d80d83bf4/inputTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="fd7c8cf3-894d-4297-8b24-fa3c3db378c1/inputTerminal"/></con:scene><con:scene label="Web LoadTest with Assertions" id="e00b1ef7-ae48-48e1-972a-f8b8caefe44c" version="35"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">490</con:property><con:property key="gui.layoutY">624</con:property><con:property key="gui.note.0">200;409;282;93;Here the same Generator -> Runner -> Analysis setup as in the first example is set up, but the runner and statistics components have been minimized to make room for the assertions below</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">579;200;879;68;This is the same Web LoadTest as shown in the first example but now with a bunch of assertions and a Table Log

As previously make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then the LoadTest by pressing the Run button on the top left toolbar</con:property><con:property key="gui.note.1">403;646;379;75;This Assertion is connected to the request output of the Web Page Runner, allowing it to assert (validate) the contents of each requests. We will set it to check that the TimeTaken is never over 100ms</con:property><con:property key="gui.note.2">901;644;400;75;This assertion is connected to the second output of the Web Page Runner, which outputs the stats you can see in the display of the runner. We will use the assertion to make sure there are no Discarded messages.</con:property><con:property key="gui.note.3">1412;641;419;75;This last assertion is used to assert the avg response time as calculated and output by the statistics component. We will set the max value to 50 ms</con:property><con:property key="gui.note.5">440;1077;275;84;The TableLog is connected to the output of all assertions; it will contain all failed assertions which we can export or log continously while running</con:property><con:property key="gui.note.6">1588;1058;418;42;The same soapUI MockService is used here to give something to run against</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="597e6093-d97f-4f73-ab9d-de68f912b974" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
createProperty( 'proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				message['id'] = uri
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	def methods = runningSamples.toArray()
	methods.each{  method ->
		if( !method.aborted ) 
			method.abort()
	}
	runningSamples = []
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)
]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">5da794033d1f83d8717fc92c6f7f2220</con:property><con:property key="gui.layoutX">984</con:property><con:property key="gui.layoutY">399</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="d3bcc7bc-0cc5-4156-b35e-34b23d579654" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">637</con:property><con:property key="gui.layoutY">404</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="b612904b-3546-4a11-919c-2ff7d2f974b5" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener(new ChartAdapter(){
	public void chartCleared(){
		try{
			resetBuffers()
		}
		catch(Throwable e2){
			ex(e2, 'chartCleared')
		}
	}
});

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, false)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]

future = null
boolean connected = false

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal ) {
		agentData[o.label] = new HashMap(m)
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

onDisconnect = { outgoing, incoming ->
	connected = inputTerminal.connections.size() > 0
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			
			send(controllerTerminal, message)
			send(output, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	
	if( controller )
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			for( d in agentData.values() ) {
				if( !d.isEmpty() ) {
					data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
					data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
					data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
					data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
					data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
					data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
					data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
					data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
					data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
					data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
					count++
				}
			}
			if( count == 0 )
				return
			data['Avg'] /= count
			data['Std-Dev'] /= count
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else
		data = agentData[selectedAgent.value]
	if(data == null || data.isEmpty())
		return
	
	try {
		if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
		if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
		if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
		if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
		if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
		if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
		if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
		if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
		if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
		if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
		minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
		maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
		stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
		tpsDisplay.setArgs((float)data['Tps'])
		bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
		avgTpsDisplay.setArgs((float)data['Avg-Tps'])
		avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
		percentileDisplay.setArgs((float)data['Percentile'])
		avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData.clear()
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">true</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">7de511eebf51d741fe7baebcbadf5ca4</con:property><con:property key="gui.layoutX">1286</con:property><con:property key="gui.layoutY">402</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="c1af622e-3b62-46db-b5ee-49dc008eaaa1"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1586</con:property><con:property key="gui.layoutY">1174</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion" id="23dd344a-2b24-47e7-9ffb-1d467cd98bb8" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">TimeTaken</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">100</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">390</con:property><con:property key="gui.layoutY">804</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (2)" id="a495e792-6895-451a-a483-1495eefdff1e" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Avg</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">50</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">798</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="b8551838-14d3-4e55-8fc8-06616eecae8b" category="output"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent

import com.eviware.loadui.api.summary.MutableSection

createProperty 'maxRows', Long, 1000
createProperty 'fileName', File 
createProperty 'saveFile', Boolean, false
createProperty 'follow', Boolean, false
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false

myTableModel = new LTableModel(1000, follow.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateFollow()
	}
});

saveFileName = fileName.value?.name

updateFollow = {
	follow.value = myTableModel.follow
}

rowsDisplay = new DelayedFormattedString( '%d', 500, value { myTableModel.rowCount } )
fileDisplay = new DelayedFormattedString( '%s', 500, value { saveFileName ?: '-' } )

onMessage = { incoming, outgoing, message ->
	super.onTerminalMessage(incoming, outgoing, message)
	message.keySet().each { k -> myTableModel.addColumn k }
	lastMsgDate = new Date();
	
	result = myTableModel.addRow(message) 
	if( result && saveFile.value ) {
		try {
			char sep = ','
			
			writer = new CSVWriter(new FileWriter(saveFileName, true), sep);
			String[] entries = myTableModel.lastRow
			writer.writeNext(entries)
			writer.flush()
		} catch (Exception e) {
			println(e.printStackTrace())
		} finally {
			writer.close()
		}
	}
}

onRelease = {
	rowsDisplay.release()
	fileDisplay.release()
}

addEventListener( PropertyEvent ) { event ->
	if( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property.key == 'maxRows' ) {
			myTableModel.maxRow = maxRows.value
		}
		else if( event.property.key == 'follow' && myTableModel.follow != follow.value as Boolean) {
			myTableModel.follow = follow.value
		} else if( event.property == fileName ) {
			saveFileName = fileName.value?.name
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "START" ) {
		saveFileName = fileName.value?.name
		if( !appendSaveFile.value && saveFileName != null) {
			def ext = saveFileName.substring(saveFileName.lastIndexOf("."), saveFileName.length())
			def name = saveFileName.substring(0, saveFileName.lastIndexOf("."))
			def timestamp = new Date().time
			saveFileName = "${fileName.value.parent}${File.separator}$name-$timestamp$ext"
			println saveFileName
		}
	}

	if ( event.key == "RESET" ) {
		myTableModel.reset()
	}
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', fString:rowsDisplay )
		node( label: 'Output File', fString:fileDisplay )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: fileName, label: 'Log File (Comma Separated) ' )
		label('If not appending file, its name will be used to generate new log files each time test is run.')
		property(property: appendSaveFile, label: 'Check to append selected file', )
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property key="maxRows" type="java.lang.Long">1000</con:property><con:property key="fileName" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="saveFile" type="java.lang.Boolean">false</con:property><con:property key="follow" type="java.lang.Boolean">false</con:property><con:property key="summaryRows" type="java.lang.Long">0</con:property><con:property key="appendSaveFile" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\TableLog.groovy</con:property><con:property key="_digest">562c50d74a0719706524bbc1298995a9</con:property><con:property key="gui.layoutX">782</con:property><con:property key="gui.layoutY">1071</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (1)" id="17f403d2-0707-4f26-8c0f-00fe25d5a1fd" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {timestamp, value ->
	failureCounter.increment()
	
	outMsg["Assert"] = valueToAssert
	outMsg["Min"] = min.value
	outMsg["Value"] = value
	outMsg["Max"] = max.value
	outMsg["Period"] = period.value
	outMsg["Tolerance"] = tolerance.value
	outMsg["Timestamp"] = timestamp
	send(output, outMsg)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
}</con:property><con:property key="value" type="java.lang.String">Discarded</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">0</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">665720c8f81dd9ddd1c0544f4327a3f9</con:property><con:property key="gui.layoutX">901</con:property><con:property key="gui.layoutY">802</con:property></con:attributes></con:component><con:connection outputTerminalId="d3bcc7bc-0cc5-4156-b35e-34b23d579654/triggerTerminal" inputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/triggerTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/inputTerminal"/><con:connection outputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/output" inputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/inputTerminal"/><con:connection outputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/statisticsOutput" inputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/inputTerminal"/><con:connection outputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/></con:scene><con:sceneAssignment sceneRef="f53a7146-d347-4f03-81d7-bfff0caa41a0" agentRef="fcd1b36a-f644-40c1-9d7d-04ea66aa5f4a" agentLabel="Agent 1" agentAddress="https://192.168.100.90:8443/"/></con:loadui-project>