<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="SampleProject" id="d119b449-df9e-4d99-97c7-a8164d9230db" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property key="ModelItem.reportFolder" type="java.lang.String"/><con:property key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="gui.note.0">200;202;220;273;1. Getting Started
------------------------------------------------
This is a simple Web LoadTest that uses a soapUI MockService as its target. It illustrates the basic Generator -> Runner -> Analysis concept of loadUI components

Double-click the TestCase and run it to see what we're talking about!</con:property><con:property key="miniature">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
lv4PJy/AYS5cek4AAAAASUVORK5CYII=
</con:property><con:property key="gui.note.1">205;626;200;150;2. Assertions and Logging
-------------------------------------
This TestCase extends the first by adding a couple of assertions and a TableLog to catch failed responses. </con:property><con:property key="gui.note.2">997;621;263;153;4. Controlling Flow 
-------------------------------------
This TestCase shows how flow-control components can be used to combine multiple runners for creating complex Load Scenarios. It also introduces the soapUI Runner for running a soapUI TestCase as a part of your LoadTest</con:property><con:property key="gui.note.3">1003;200;265;173;3. Schedulers and Generators
---------------------------------------
This TestCase shows how multiple generators can be combined within a LoadTest to generate varying load over time. Schedulers are used to add bursts of simulated Load</con:property></con:attributes><con:scene label="Simple Web LoadTest" id="f53a7146-d347-4f03-81d7-bfff0caa41a0" version="11"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">488</con:property><con:property key="gui.layoutY">202</con:property><con:property key="gui.note.0">200;407;252;75;This FixedRate runner is configued to issue 10 request triggers per second</con:property><con:property key="gui.note.1">200;637;224;150;The WebPage Runner issues a request to the specified web page address each time it receives a trigger message. 

The display to the right shows ongoing statistics</con:property><con:property key="gui.note.2">201;922;222;305;The statistics component is connected to the output of the Web Page Runner which outputs the response-time for each issues request. 

Some things to try:
- open the settings dialog and select which values you want to show
- try minimizing the component (with the top-right [-] button)
- try increasing or decreasing the load generated by the FixedRate trigger (by turning the knob) to see how the statistics change

</con:property><con:property key="gui.note.3">1241;627;350;100;The MockService is used in this tutorial to have something to test against . It is started when the LoadTest starts and the number of Requests will be the same as the Requests sent by the WebPage Runner</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">395;200;966;109;This is a simple Web LoadTest showing you how to connect a basic Generator -> Runner -> Analysis LoadTest. 

Make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then run the LoadTest by pressing the Run button on the top left toolbar (Next to the "TestCase" menu). You will see the WebPage Runner starting to send requests and statistics being displayed in the Statistics Component. 

This LoadTest has no configured limit, it will run until you stop it manually with the Stop button. Once you have stopped it, be sure to generate a report with the report-button at the top right</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="0b1546d7-feeb-4d93-b3c9-f6ac151594fc" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">533</con:property><con:property key="gui.layoutY">626</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="2cb44449-032c-4163-8408-e5b61bce2d3f" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">677</con:property><con:property key="gui.layoutY">395</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="7c508081-aa40-49c4-8722-246670b4a417" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis();
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {
						//println d
						data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
						data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		 if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">31b7652d1771548fcfc36c7ba144fac3</con:property><con:property key="gui.layoutX">583</con:property><con:property key="gui.layoutY">919</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="f01e8c30-2fd1-417c-87bf-f8c3ae153c4b"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1205</con:property><con:property key="gui.layoutY">809</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="2cb44449-032c-4163-8408-e5b61bce2d3f/triggerTerminal" inputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/triggerTerminal"/><con:connection outputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/resultTerminal" inputTerminalId="7c508081-aa40-49c4-8722-246670b4a417/inputTerminal"/></con:scene><con:scene label="Complex Load Generation" id="234ea2c5-c94b-4e44-aeae-bd37cd09069b" version="19"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1325</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
TkSuQmCC
</con:property><con:property key="limits">Time=600;</con:property><con:property key="gui.note.0">228;402;352;65;The first scheduler starts a Ramp Generator that will ramp from 0 to 100 req  / sec over the first 2 minutes of the LoadTest</con:property><con:property key="gui.note.1">742;390;341;87;Once the Ramp-up is finished, a Random Load Generator is started for the remains of the Test, which will generate a base load fo 100 requests / sec with Gaussian random distribution</con:property><con:property key="gui.note.2">1206;396;448;75;This schduler will add an additional load of 100 req / sec every 10 seconds at the start of each minute. The scheduler will itself be started at the same time as the random generator.</con:property><con:property key="gui.note.3">508;200;798;82;This TestCase shows how to use schedulers in combination with Generators to generate varying load over time: it first Ramps from 0 to 100 requests / sec over the first two minutes, then maintains a randomized base load with reoccuring Burst of requests for the rest of the Test.

The TestCase has its execution limit set to 10 minutes (see toolbar above)</con:property><con:property key="gui.note.4">200;1268;315;114;All Generators are configured to trigger the same Web Page Runner, but you could just as well trigger different ones. 

Its output goes to a standard statistics component as usual</con:property><con:property key="gui.note.5">1426;1298;420;58;Our trustworthy soapUI MockService is once again used as a stand-in for a real service.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="133d26ad-1f1d-44b0-849c-c9dc31549d48" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">642</con:property><con:property key="gui.layoutY">1244</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="e6588efe-e0c8-463b-b604-398edb7881d5" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">1241</con:property><con:property key="gui.layoutY">917</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="d9d3b5d3-00e3-4654-b75f-4276c0135340" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )
direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

display = new DelayedFormattedString( '%d / %s %s', 500, currentRate.longValue(), unit.value, direction )
scheduled = false
future = null

onRelease = {  display.release() }

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
		if (start.value != 0) {
			if (msPerUnit/start.value > period.value * 1000) {
				targetReached = true
				currentRate = end.value
			}
		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	display.setArgs( currentRate.longValue(), unit.value, direction )
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			else 
				currentDelay = 1 //Handling edge cases
		} 
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			display.setArgs( currentRate.longValue(), unit.value, direction )
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		display.setArgs( currentRate.longValue(), unit.value, direction )
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
		started = false;
		scheduled = false;
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	if ( event.key == "COMPLETE" ) {
		reset()
	}
}


//Layout
layout  { 
	property( property:start, label:'Start', min:0 ) 
	property( property:end, label:'End', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', fString:display, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="start" type="java.lang.Long">0</con:property><con:property key="end" type="java.lang.Long">100</con:property><con:property key="period" type="java.lang.Long">120</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Ramp.groovy</con:property><con:property key="_digest">b81f87cc369045d49f669a99df86c260</con:property><con:property key="gui.layoutX">229</con:property><con:property key="gui.layoutY">906</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
if ( unit.value == "Min" )
	msPerUnit = 60000
if ( unit.value == "Hour" )
	msPerUnit = 3600000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )
randomDisplay = new DelayedFormattedString( '%d %s', 200, factor.value, "%" )

random = new Random()

timer = new Timer(true)

future = null

onRelease = {  display.release() }

schedule = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			schedule()
		}
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel()
		if (stateProperty.value)
			future?.cancel()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		display.setArgs(rate.value, unit.value)
		randomDisplay.setArgs(factor.value, "%")
		schedule()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
	}
	
	if ( event.key == "START" ) {
		future?.cancel()
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Base Rate', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	
	node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
			images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
	
	separator( vertical:true )
	property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1 )
	separator( vertical:true )
	box( widget:'display', layout:'align center') {
		node( label:'Current rate', fString:display )
		node( label:'Random', fString:randomDisplay )
	}
}

//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'Current rate', fString: display )
		node( label: 'Random', fString: randomDisplay )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if (running)
	schedule();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property><con:property key="type" type="java.lang.String">Gaussian</con:property><con:property key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Random.groovy</con:property><con:property key="_digest">30700033e862d36c1e433391759e5402</con:property><con:property key="gui.layoutX">678</con:property><con:property key="gui.layoutY">915</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval" id="e36a65c3-b2e1-4db7-967b-bf70cb77182b" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">0</con:property><con:property key="duration" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">1385693413b9b11cd098b2d141d4af8c</con:property><con:property key="gui.layoutX">230</con:property><con:property key="gui.layoutY">570</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval (1)" id="f491d887-a1e7-4b12-8174-0b4a9f584525" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">2</con:property><con:property key="duration" type="java.lang.Long">8</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">1385693413b9b11cd098b2d141d4af8c</con:property><con:property key="gui.layoutX">735</con:property><con:property key="gui.layoutY">576</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Scheduler" id="ee825185-22ab-42ed-852a-c87859ffbc47" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop at a specified day &amp; time
 *
 * @help http://www.loadui.org/Schedulers/scheduler-component.html
 * @category scheduler
 * @nonBlocking true
 * @dependency org.quartz-scheduler:quartz:1.8.3
 * 
 */

import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.FormattingUtils
import com.eviware.loadui.util.layout.DelayedFormattedString
import org.quartz.Scheduler
import org.quartz.CronTrigger
import org.quartz.CronExpression
import org.quartz.impl.StdSchedulerFactory
import org.quartz.JobExecutionContext
import org.quartz.JobExecutionException
import org.quartz.Job
import org.quartz.JobDetail
import java.util.Calendar
import java.util.Date
import org.quartz.listeners.JobListenerSupport
import com.eviware.loadui.util.layout.DelayedFormattedString
import java.text.SimpleDateFormat
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.layout.SchedulerModel

def counter = 0
def durationHolder = 0
def runsHolder = 0
def startSent = false

def schedulerModel = new SchedulerModel()

createProperty( 'day', String, "* (All)" )
createProperty( 'time', String, "0 0 0" )
def duration = createProperty( 'duration', Long, 0 )
def runsLimit = createProperty( 'runsLimit', Long, 0 )

def canvas = getCanvas()

sendStart = { 
	sendEnabled( true ) 
	startSent = true
	counter++
	if(runsHolder > 0 &amp;&amp; counter >= runsHolder){
		unscheduleStartTrigger()
	}
	//setActivityStrategy(ActivityStrategies.BLINKING)
	pauseTotal = 0
}

sendStop = { 
	sendEnabled( false ) 
	//setActivityStrategy(ActivityStrategies.OFF)
	unscheduleEndTrigger()
	endTrigger = null
	pauseTotal = 0
}

class SchedulerJob implements Job {
	void execute(JobExecutionContext context) throws JobExecutionException {}
}

def startTrigger = null
def startJob = new JobDetail("startJob", "group", SchedulerJob.class)
startJob.addJobListener("startJobListener")

def endTrigger = null
def endJob = new JobDetail("endJob", "group", SchedulerJob.class)
endJob.addJobListener("endJobListener")

def paused = false
def pauseStart = -1
def pauseTotal = 0
def endTriggerStart = null //this is the time when latest enable event was sent
def rescheduleAfterPause = false
def endTriggerTimeLeft = null

def maxDuration = 0;

def scheduler = new StdSchedulerFactory().getScheduler()
scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"startJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStart()
		scheduleEndTrigger(new Date(), durationHolder)
	}
})

scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"endJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStop()
		schedulerModel.incrementRunsCounter()
	}
})

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION) {
		if(!paused){ 
			scheduleStartTrigger()
		}
		else if (rescheduleAfterPause){
			def now = new Date()
			pauseTotal += now.getTime() - pauseStart.getTime()
			scheduleEndTrigger(now, endTriggerStart.getTime() + durationHolder + pauseTotal - now.getTime())
			rescheduleAfterPause = false
		}
		scheduler?.start()
		paused = false
	}
	else if( event.key == CanvasItem.STOP_ACTION) {
		scheduler?.standby()
		paused = true
		pauseStart = new Date()
		if(endTrigger != null){
			unscheduleEndTrigger()
			endTrigger = null
			rescheduleAfterPause = true
		}
	}
	else if( event.key == CanvasItem.COMPLETE_ACTION) {
		reset()
	}
	else if(event.key == CounterHolder.COUNTER_RESET_ACTION){
		reset()
		scheduleStartTrigger()
		scheduler?.start()
	}
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ day, time, runsLimit, duration ] ) {
		validateDuration()
		if( !canvas.running ){
			updateState()
		} 
	}
}

validateDuration = {
	def expr = new CronExpression(createStartTriggerPattern())
	def calendar = Calendar.getInstance()
	def nextDate = expr.getNextValidTimeAfter(calendar.getTime())
	calendar.setTime(nextDate)
	calendar.add(Calendar.SECOND, 1)
	def dateAfterNext = expr.getNextValidTimeAfter(calendar.getTime())
	def diff = dateAfterNext.getTime() - nextDate.getTime()
	if(diff/1000 &lt; duration.value){
		duration.value = diff/1000
	}
	maxDuration = diff
}

updateState = {
	def expr = new CronExpression(createStartTriggerPattern())
	schedulerModel.setSeconds(expr.seconds)
	schedulerModel.setMinutes(expr.minutes)
	schedulerModel.setHours(expr.hours)
	schedulerModel.setDays(expr.daysOfWeek)
	schedulerModel.setDuration(duration.value * 1000)
	schedulerModel.setMaxDuration(maxDuration)
	schedulerModel.setRunsLimit((int)runsLimit.value)
	schedulerModel.notifyObservers()
}

createStartTriggerPattern = {
	def startTriggerPattern = "${time.value} "
	startTriggerPattern += "? * "
	if(day.value.equals("* (All)")){
		startTriggerPattern += "* "
	}
	else{
		startTriggerPattern += "${day.value.substring(0,3).toUpperCase()} "
	}
	startTriggerPattern
}

scheduleStartTrigger = {
	runsHolder = runsLimit.value
	durationHolder = duration.value * 1000
	
	def startTriggerPattern = createStartTriggerPattern()
	unscheduleStartTrigger()
	scheduler.addJob(startJob, true)
	startTrigger = new CronTrigger("startTrigger", "group", "startJob", "group", startTriggerPattern)
	scheduler.scheduleJob(startTrigger)
	
	def now = new Date()
	def next = startTrigger.getFireTimeAfter(now)
	if(now.getTime() &lt;= next.getTime() - maxDuration + durationHolder){
		sendStart()
		scheduleEndTrigger(now, next.getTime() - maxDuration + durationHolder - now.getTime())
	}
	else{
		sendStop()
	}
}

scheduleEndTrigger = {startTime, durationInMillis ->
	if(durationHolder > 0){
		def calendar = Calendar.getInstance()
		calendar.setTime(startTime)
		calendar.add(Calendar.MILLISECOND, (int)durationInMillis)

		def endTriggerPattern = ""
		endTriggerPattern += "${calendar.get(Calendar.SECOND)} "
		endTriggerPattern += "${calendar.get(Calendar.MINUTE)} "
		endTriggerPattern += "${calendar.get(Calendar.HOUR_OF_DAY)} "
		endTriggerPattern += "${calendar.get(Calendar.DAY_OF_MONTH)} "
		endTriggerPattern += "${calendar.get(Calendar.MONTH) + 1} "
		endTriggerPattern += "? "
		endTriggerPattern += "${calendar.get(Calendar.YEAR)} "
		
		unscheduleEndTrigger()
		scheduler.addJob(endJob, true)
		endTrigger = new CronTrigger("endTrigger", "group", "endJob", "group", endTriggerPattern)
		scheduler.scheduleJob(endTrigger)
	}
}

reset = {
	counter = 0
	durationHolder = 0
	runsHolder = 0
	paused = false
	pauseStart = -1
	pauseTotal = 0
	endTriggerStart = null
	rescheduleAfterPause = false
	endTriggerTimeLeft = null
	unscheduleStartTrigger()
	unscheduleEndTrigger()
	startTrigger = null
	endTrigger = null
	startSent = false
	//setActivityStrategy(ActivityStrategies.OFF)
	schedulerModel.resetRunsCounter()
}

unscheduleStartTrigger = {
	try{
		scheduler.unscheduleJob("startTrigger", "group")
	}
	catch(Exception e){}
}

unscheduleEndTrigger = {
	try{
		scheduler.unscheduleJob("endTrigger", "group")
	}
	catch(Exception e){}
}

onRelease = {
	scheduler.shutdown()
}

layout {
	node( widget: 'schedulerWidget', model: schedulerModel, constraints: 'span 5, gaptop 10' )
	separator( vertical: false )
	property(property: day, widget: 'comboBox', label: 'Day', options: ['* (All)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], constraints: 'w 100!' )
	separator(vertical: true)
	property( property: time, widget: 'quartzCron', label: 'Time', constraints: 'w 130!' )
	separator(vertical: true)
	property( property: duration, widget: 'time', label: 'Duration', constraints: 'w 130!' )
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Day', fString:new DelayedFormattedString( '%s', 1000, day ) )
		node( label:'Time', fString:new DelayedFormattedString( '%s', 1000, value { time.value.replace(' ',':') } ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%s', 1000, value { FormattingUtils.formatTime( duration.value ) } ) )
	}
}

settings( label: "Basic" ) {
	property( property: runsLimit, label: 'Runs')
}

validateDuration()
updateState()</con:property><con:property key="day" type="java.lang.String">* (All)</con:property><con:property key="time" type="java.lang.String">0 * *</con:property><con:property key="duration" type="java.lang.Long">10</con:property><con:property key="runsLimit" type="java.lang.Long">0</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Scheduler</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Scheduler.groovy</con:property><con:property key="_digest">af747cf10381439e257f3f23c57b91ef</con:property><con:property key="gui.layoutX">1195</con:property><con:property key="gui.layoutY">585</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="05458282-13f4-4c65-a2fe-0687b851e4cc" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis();
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {
						//println d
						data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
						data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		 if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">false</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">31b7652d1771548fcfc36c7ba144fac3</con:property><con:property key="gui.layoutX">697</con:property><con:property key="gui.layoutY">1527</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="8a8cf6f5-e6f6-4421-9a9f-5ff5261affa5"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1418</con:property><con:property key="gui.layoutY">1432</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e36a65c3-b2e1-4db7-967b-bf70cb77182b/outgoingTerminal" inputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/stateTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/stateTerminal"/><con:connection outputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/outgoingTerminal" inputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/stateTerminal"/><con:connection outputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/resultTerminal" inputTerminalId="05458282-13f4-4c65-a2fe-0687b851e4cc/inputTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/stateTerminal"/></con:scene><con:scene label="Complex Load Scenario" id="5dd7734e-f092-4152-b2e8-3663dac12bf0" version="41"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1332</con:property><con:property key="gui.layoutY">619</con:property><con:property key="miniature">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
A06pxPgxAkxNAAAAAElFTkSuQmCC
</con:property><con:property key="gui.note.0">211;204;497;242;This TestCase shows you how to use the Splitter and Delay components to combine multiple runners into one larger Load Scenario.

- An initial splitter is used after the Load Generator to divide load between three "paths": 
1) The first with 3 web requests, with a delay between the second and third
2) The second running a soapUI TestCase after an initial delay
3) The third first running a seperate soapUI LoadTest after which it will join the path of the second option.

Statistics components have been added for both soapUI Runners and the last WebPage Runner. 

As always the soapUI mockservice is used to provide a stand-in for the related target systems and services.

This LoadTest will run for ten minutes or 10000 requests (whichever comes first)</con:property><con:property key="limits">Requests=10000;Time=600;</con:property><con:property key="gui.note.1">246;2226;248;54;The standard soapUI MockService used in our samples.</con:property><con:property key="gui.note.2">210;627;350;38;This is the first execution path</con:property><con:property key="gui.note.3">902;710;337;38;This is the second execution path</con:property><con:property key="gui.note.4">1483;640;320;55;And this is the third execution path which "joing" the second one after first running a soapUI TestCase</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="551df37b-ca36-4721-a266-33d59cff8bd3" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">208</con:property><con:property key="gui.layoutY">729</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (1)" id="326df2a4-1c3f-49a2-b54c-692b08aff9fa" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/search.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">1492</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="0ef58711-1bba-4b7d-8f61-3d1793b613c3" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

final GAUSSIAN = 'Gaussian'
final UNIFORM = 'Uniform'
final EXPONENTIAL = 'Exponential'

random = new Random()
waitingCount = 0

display = new DelayedFormattedString( '%d ms', 500, 0 )
waitingDisplay = new DelayedFormattedString( '%d', 500, value { waitingCount } )
 
output = createOutput( 'output', "Message Output" )
 
createProperty('delay', Long, 0)
createProperty('selected', String, UNIFORM)
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
	waitingCount++
	
	long delayTime = delay.value 
	if( selected.value == GAUSSIAN ) {
		delayTime += ( random.nextGaussian() * ( randomDelay.value / 100 ) * delayTime * 0.3)
	} else if( selected.value == UNIFORM ) {
		delayTime += 2*( random.nextDouble() - 0.5 ) * delayTime * ( randomDelay.value / 100 )
	} else if( selected.value == EXPONENTIAL ) {
		delayTime *= -Math.log( 1 - random.nextDouble() )
	}
	
	message.put( 'actualDelay', delayTime )
	executor.schedule( {
		send( output, message )
		waitingCount--
		display.args = delayTime
	}, delayTime, TimeUnit.MILLISECONDS )
 }
 
onRelease = {
	display.release()
	waitingDisplay.release()
	executor.shutdownNow()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" &amp;&amp; executor != null ) {
		executor.shutdownNow()
		executor = null
		waitingCount = 0;
	}
	
	if ( event.key == "START" &amp;&amp; executor == null ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
		display.args = 0
		waitingCount = 0;
		if( executor != null ) {
			executor.shutdownNow()
			executor = Executors.newSingleThreadScheduledExecutor()
		}
	}
}

layout { 
	property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
	separator( vertical:true )
	node( widget:'selectorWidget', label:'Distribution', labels:[ UNIFORM, EXPONENTIAL, GAUSSIAN ],
		images:[ 'linear_shape.png', 'poisson_shape.png', 'gauss_shape.png' ], default: selected.value, selected: selected )
	property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
 
compactLayout {
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}</con:property><con:property key="delay" type="java.lang.Long">500</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">bc2f4203c273ad2e0349b2c33426523c</con:property><con:property key="gui.layoutX">309</con:property><con:property key="gui.layoutY">1255</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="04f2b993-146a-4b70-b022-94456e361e46" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">96</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">946</con:property><con:property key="gui.layoutY">200</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter" id="2bde326b-ab20-48e8-ab2b-5913ee042048" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 * 
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */
 
 import java.util.concurrent.Executors
 import java.util.concurrent.TimeUnit

 import com.eviware.loadui.api.events.PropertyEvent
 import com.eviware.loadui.util.collections.ObservableList
 import com.eviware.loadui.util.layout.DelayedFormattedString
 import com.eviware.loadui.api.events.ActionEvent
 
 // one output minimum
 
 createProperty('selected', String, "Round-Robin" )
 createProperty('outputs', Integer, 1 )
 createProperty('total', Integer, 0 )
 createProperty('counterUse', Boolean, true )
 createProperty('updateCounterDelay', Long, 500)
 
 // locals

 total.value = 0
 
 def roundRobinNext = 0
 ObservableList outputStats = new ObservableList()
 outputStats.add(0)
 for( i in 1..9 ) {
    outputStats.add(-1)
}
 cnt = 0
 while( outputs.value > cnt ) {
 	createOutgoing()
 	outputStats.set( cnt, 0 )
        cnt++
 }
    
 display = new DelayedFormattedString( '%d', 500, 0 )
 outputDisplay = new DelayedFormattedString( '%s', 500, value({ outputStats.findAll({ it >= 0 }).join('          ') }) )

 executor = Executors.newSingleThreadScheduledExecutor()
 future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 

 onMessage = { incoming, outgoing, message ->
 	super.onTerminalMessage(incoming, outgoing, message)
   try {
    def next = 0;
    switch( selected.value ) {
        case "Round-Robin": 
            next = roundRobinNext
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            if( roundRobinNext + 1 == getOutgoingTerminalList().size() )
                roundRobinNext = 0
            else
                roundRobinNext++
            break
        case "Random" :
            random = new Random()
            next = random.nextInt(getOutgoingTerminalList().size())
            outputStats.set(next, outputStats.get(next) + 1)
            send ( getOutgoingTerminalList().get(next), message )
            break
    }
    total.value++
    display.setArgs( total.value )
   } catch ( Exception e ) {
 	println e.printStackTrace   
   }

} 
 addEventListener( PropertyEvent ) { event ->
    if( event.event == PropertyEvent.Event.VALUE ) {
        switch( event.getProperty().getKey() ) {
            case 'outputs': 
                while ( outputs.value != getOutgoingTerminalList().size() ) {
                    if ( outputs.value > getOutgoingTerminalList().size() ) {
                        createOutgoing()
                        outputStats.set(getOutgoingTerminalList().size() -1, 0)
                    } else {
                        total.value = total.value - outputStats.get(getOutgoingTerminalList().size() -1)
                        display.setArgs( total.value )
                        outputStats.set(getOutgoingTerminalList().size() -1, -1)
                        deleteOutgoing()
                    }
                }
    		outputStats.update()
                break;
        }
    }
 }
 
 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
	  executor.schedule( { 
		executor?.shutdownNow()
	  	executor = Executors.newSingleThreadScheduledExecutor()
	  }, updateCounterDelay.value, TimeUnit.MILLISECONDS)
	}
	
	if ( event.key == "START" ) {
           if ( future == null )
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
	
	if ( event.key == "RESET" ) {
	    future?.cancel(true)
	    executor?.shutdownNow()
	    roundRobinNext = 0

	    total.value = 0
	    display.setArgs( 0 )
            for( i in 0..9 ) {
	     if( outputStats.get(i) > -1 )
	          outputStats.set(i as Integer,0)
	    }
	    outputStats.update()
	    executor = Executors.newSingleThreadScheduledExecutor()
	    future = executor.scheduleWithFixedDelay( { outputStats.update() }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
}

 onRelease = {
   display.release()
	outputDisplay.release()
   future.cancel(true)
   executor.shutdownNow()
 }

 
 settings( label: "Counter Settings", layout: 'wrap 2' ) {
	box( layout:"wrap 1", constraints:"growx" ) {
		property(property: counterUse, label: 'Enable Counters' )
		property(property: updateCounterDelay, label: 'Time interval for refreshing counters(ms)' )
	}
 }
 
 layout ( layout:'gap 10 5' ) { 
    node(widget: 'selectorWidget', label:"Type", labels:["Round-Robin", "Random"], default: "Round-Robin", selected: selected)
    separator( vertical: true )
    node( widget: 'sliderWidget', property: outputs, constraints:'center, w 270!' )
    separator( vertical: true ) 
    box( layout: 'wrap, ins 0' ) {
	    box( widget:'display',  constraints:'w 100!' ) {
			 node( label:'Count', fString:display, constraints:'wrap' )
	    }
	    action( label:'Clear', action: {  
	       total.value = 0
		    display.setArgs( 0 )
			 for( i in 0..9 ) {
			     if( outputStats.get(i) > -1 ) outputStats.set(i as Integer,0)
			 }
			 outputStats.update()
	    }, constraints:'right' )
	}
    separator( vertical: false )
    node( widget: 'counterWidget', counters: outputStats , onOff: counterUse, constraints:'span 5,center')
  }
 
compactLayout() {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', fString: display )
		node( label: 'Distribution', fString: outputDisplay )
	}
}</con:property><con:property key="selected" type="java.lang.String">Round-Robin</con:property><con:property key="outputs" type="java.lang.Integer">3</con:property><con:property key="total" type="java.lang.Integer">0</con:property><con:property key="counterUse" type="java.lang.Boolean">true</con:property><con:property key="updateCounterDelay" type="java.lang.Long">500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Splitter.groovy</con:property><con:property key="_digest">67b976376d623353de1153d358f917a0</con:property><con:property key="gui.layoutX">806</con:property><con:property key="gui.layoutY">429</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="6002c29e-6cf9-4772-83cd-c862927e5aaa"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="settingsFile" type="java.io.File">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">861</con:property><con:property key="gui.layoutY">1439</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="bbdf5140-9253-4ead-9782-cbb0a742264e"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MockService 1</con:property><con:property key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">531</con:property><con:property key="gui.layoutY">2222</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5bf761b9-8f2d-44ed-adc9-72d49eb32927" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

final GAUSSIAN = 'Gaussian'
final UNIFORM = 'Uniform'
final EXPONENTIAL = 'Exponential'

random = new Random()
waitingCount = 0

display = new DelayedFormattedString( '%d ms', 500, 0 )
waitingDisplay = new DelayedFormattedString( '%d', 500, value { waitingCount } )
 
output = createOutput( 'output', "Message Output" )
 
createProperty('delay', Long, 0)
createProperty('selected', String, UNIFORM)
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()
 
onMessage = { incoming, outgoing, message ->
	waitingCount++
	
	long delayTime = delay.value 
	if( selected.value == GAUSSIAN ) {
		delayTime += ( random.nextGaussian() * ( randomDelay.value / 100 ) * delayTime * 0.3)
	} else if( selected.value == UNIFORM ) {
		delayTime += 2*( random.nextDouble() - 0.5 ) * delayTime * ( randomDelay.value / 100 )
	} else if( selected.value == EXPONENTIAL ) {
		delayTime *= -Math.log( 1 - random.nextDouble() )
	}
	
	message.put( 'actualDelay', delayTime )
	executor.schedule( {
		send( output, message )
		waitingCount--
		display.args = delayTime
	}, delayTime, TimeUnit.MILLISECONDS )
 }
 
onRelease = {
	display.release()
	waitingDisplay.release()
	executor.shutdownNow()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" &amp;&amp; executor != null ) {
		executor.shutdownNow()
		executor = null
		waitingCount = 0;
	}
	
	if ( event.key == "START" &amp;&amp; executor == null ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
		display.args = 0
		waitingCount = 0;
		if( executor != null ) {
			executor.shutdownNow()
			executor = Executors.newSingleThreadScheduledExecutor()
		}
	}
}

layout { 
	property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
	separator( vertical:true )
	node( widget:'selectorWidget', label:'Distribution', labels:[ UNIFORM, EXPONENTIAL, GAUSSIAN ],
		images:[ 'linear_shape.png', 'poisson_shape.png', 'gauss_shape.png' ], default: selected.value, selected: selected )
	property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
 
compactLayout {
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}</con:property><con:property key="delay" type="java.lang.Long">600</con:property><con:property key="selected" type="java.lang.String">Uniform</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">bc2f4203c273ad2e0349b2c33426523c</con:property><con:property key="gui.layoutX">877</con:property><con:property key="gui.layoutY">1137</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner (1)" id="1bc8e660-d490-4a74-a86e-b54c476cf501"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="settingsFile" type="java.io.File">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1387</con:property><con:property key="gui.layoutY">774</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (2)" id="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/userguide/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">213</con:property><con:property key="gui.layoutY">993</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="e9541fa4-a45a-48d2-a964-fe7086dc2511" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis();
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {
						//println d
						data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
						data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		 if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">31b7652d1771548fcfc36c7ba144fac3</con:property><con:property key="gui.layoutX">860</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (1)" id="660696d8-1a52-40c2-9fdc-335d80d83bf4" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis();
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {
						//println d
						data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
						data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		 if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">31b7652d1771548fcfc36c7ba144fac3</con:property><con:property key="gui.layoutX">217</con:property><con:property key="gui.layoutY">1807</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (2)" id="fd7c8cf3-894d-4297-8b24-fa3c3db378c1" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis();
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {
						//println d
						data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
						data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		 if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">31b7652d1771548fcfc36c7ba144fac3</con:property><con:property key="gui.layoutX">1473</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:connection outputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/output" inputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/triggerTerminal"/><con:connection outputTerminalId="04f2b993-146a-4b70-b022-94456e361e46/triggerTerminal" inputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/incomingTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 1" inputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 2" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/output" inputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 3" inputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/triggerTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/resultTerminal" inputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/triggerTerminal"/><con:connection outputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/resultTerminal" inputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/incomingTerminal"/><con:connection outputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/resultTerminal" inputTerminalId="e9541fa4-a45a-48d2-a964-fe7086dc2511/inputTerminal"/><con:connection outputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/resultTerminal" inputTerminalId="660696d8-1a52-40c2-9fdc-335d80d83bf4/inputTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="fd7c8cf3-894d-4297-8b24-fa3c3db378c1/inputTerminal"/></con:scene><con:scene label="Web LoadTest with Assertions" id="e00b1ef7-ae48-48e1-972a-f8b8caefe44c" version="35"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">490</con:property><con:property key="gui.layoutY">624</con:property><con:property key="gui.note.0">200;452;282;93;Here the same Generator -> Runner -> Analysis setup as in the first example is set up, but the runner and statistics components have been minimized to make room for the assertions below</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">577;200;898;97;This is the same Web LoadTest as shown in the first example but now with a bunch of assertions and a TableLog

As previously make sure you are in "Local Mode" in the System toolbar at the bottom of this window, then run the LoadTest by pressing the Run button on the top left toolbar

This LoadTest will run until either 100000 requests have been sent or there have been 100 assertion failures (whichever comes first).</con:property><con:property key="gui.note.1">403;689;379;75;This Assertion is connected to the request output of the Web Page Runner, allowing it to assert (validate) the contents of each requests. We will set it to check that the TimeTaken is never over 100ms</con:property><con:property key="gui.note.2">901;687;400;75;This assertion is connected to the second output of the Web Page Runner, which outputs the stats you can see in the display of the runner. We will use the assertion to make sure there are no Discarded messages.</con:property><con:property key="gui.note.3">1412;684;419;75;This last assertion is used to assert the avg response time as calculated and output by the statistics component. We will set the max value to 50 ms</con:property><con:property key="gui.note.5">440;1120;275;84;The TableLog is connected to the output of all assertions; it will contain all failed assertions which we can export or log continously while running</con:property><con:property key="gui.note.6">1588;1101;418;42;The same soapUI MockService is used here to give something to run against</con:property><con:property key="limits">Requests=100000;Failures=100;</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="597e6093-d97f-4f73-ab9d-de68f912b974" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">984</con:property><con:property key="gui.layoutY">442</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="d3bcc7bc-0cc5-4156-b35e-34b23d579654" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">637</con:property><con:property key="gui.layoutY">447</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="b612904b-3546-4a11-919c-2ff7d2f974b5" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[import com.eviware.loadui.api.chart.ChartSerie;
import com.eviware.loadui.api.chart.Point;

// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString


AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 10, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis();
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 ) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {
						//println d
						data['Max'] = Math.max( d['Max'], data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'], data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + d['Avg']
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + d['Std-Dev']
						data['Tps'] = (data['Tps'] ?: 0) + d['Tps']
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + d['Avg-Tps']
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		 if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">31b7652d1771548fcfc36c7ba144fac3</con:property><con:property key="gui.layoutX">1286</con:property><con:property key="gui.layoutY">445</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="c1af622e-3b62-46db-b5ee-49dc008eaaa1"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1586</con:property><con:property key="gui.layoutY">1217</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion" id="23dd344a-2b24-47e7-9ffb-1d467cd98bb8" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )
createProperty( 'includeAssertedMessage', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			if( !options.contains(key))
				options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(message, timestamp, null)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(message, timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(message, timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {message, timestamp, value ->
	failureCounter.increment()
	
	m = includeAssertedMessage.value ? message : outMsg
	
	m["Assert"] = valueToAssert
	m["Min"] = min.value
	m["Value"] = value
	m["Max"] = max.value
	m["Period"] = period.value
	m["Tolerance"] = tolerance.value
	m["Timestamp"] = timestamp
	send(output, m)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
	property(property: includeAssertedMessage, label: 'Include original message in failure messages' )
}</con:property><con:property key="value" type="java.lang.String">TimeTaken</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">100</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property><con:property key="includeAssertedMessage" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">ef0c272045af2bd2c959d2797ae6fd8f</con:property><con:property key="gui.layoutX">390</con:property><con:property key="gui.layoutY">847</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (2)" id="a495e792-6895-451a-a483-1495eefdff1e" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )
createProperty( 'includeAssertedMessage', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			if( !options.contains(key))
				options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(message, timestamp, null)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(message, timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(message, timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {message, timestamp, value ->
	failureCounter.increment()
	
	m = includeAssertedMessage.value ? message : outMsg
	
	m["Assert"] = valueToAssert
	m["Min"] = min.value
	m["Value"] = value
	m["Max"] = max.value
	m["Period"] = period.value
	m["Tolerance"] = tolerance.value
	m["Timestamp"] = timestamp
	send(output, m)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
	property(property: includeAssertedMessage, label: 'Include original message in failure messages' )
}</con:property><con:property key="value" type="java.lang.String">Avg</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">50</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property><con:property key="includeAssertedMessage" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">ef0c272045af2bd2c959d2797ae6fd8f</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">841</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="b8551838-14d3-4e55-8fc8-06616eecae8b" category="output"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent

import com.eviware.loadui.api.summary.MutableSection

createProperty 'maxRows', Long, 1000
createProperty 'fileName', File 
createProperty 'saveFile', Boolean, false
createProperty 'follow', Boolean, false
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false

myTableModel = new LTableModel(1000, follow.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateFollow()
	}
});

saveFileName = fileName.value?.name

updateFollow = {
	follow.value = myTableModel.follow
}

rowsDisplay = new DelayedFormattedString( '%d', 500, value { myTableModel.rowCount } )
fileDisplay = new DelayedFormattedString( '%s', 500, value { saveFileName ?: '-' } )

output = { message ->
	message.keySet().each { k -> myTableModel.addColumn k }
	lastMsgDate = new Date();
	
	result = myTableModel.addRow(message) 
	if( result && saveFile.value ) {
		try {
			char sep = ','
			
			writer = new CSVWriter(new FileWriter(saveFileName, true), sep);
			String[] entries = myTableModel.lastRow
			writer.writeNext(entries)
			writer.flush()
		} catch (Exception e) {
			println(e.printStackTrace())
		} finally {
			writer.close()
		}
	}
}

onRelease = {
	rowsDisplay.release()
	fileDisplay.release()
}

addEventListener( PropertyEvent ) { event ->
	if( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property.key == 'maxRows' ) {
			myTableModel.maxRow = maxRows.value
		}
		else if( event.property.key == 'follow' && myTableModel.follow != follow.value as Boolean) {
			myTableModel.follow = follow.value
		} else if( event.property == fileName ) {
			saveFileName = fileName.value?.name
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "START" ) {
		saveFileName = fileName.value?.name
		if( !appendSaveFile.value && saveFileName != null) {
			def ext = saveFileName.substring(saveFileName.lastIndexOf("."), saveFileName.length())
			def name = saveFileName.substring(0, saveFileName.lastIndexOf("."))
			def timestamp = new Date().time
			saveFileName = "${fileName.value.parent}${File.separator}$name-$timestamp$ext"
			println saveFileName
		}
	}

	if ( event.key == "RESET" ) {
		myTableModel.reset()
	}
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', fString:rowsDisplay )
		node( label: 'Output File', fString:fileDisplay )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: fileName, label: 'Log File (Comma Separated) ' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property key="maxRows" type="java.lang.Long">1000</con:property><con:property key="fileName" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="saveFile" type="java.lang.Boolean">false</con:property><con:property key="follow" type="java.lang.Boolean">false</con:property><con:property key="summaryRows" type="java.lang.Long">0</con:property><con:property key="appendSaveFile" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\TableLog.groovy</con:property><con:property key="_digest">2301af2dfd07b34d11d95c6398e97de5</con:property><con:property key="gui.layoutX">782</con:property><con:property key="gui.layoutY">1114</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (1)" id="17f403d2-0707-4f26-8c0f-00fe25d5a1fd" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )
createProperty( 'includeAssertedMessage', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			if( !options.contains(key))
				options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(message, timestamp, null)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(message, timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(message, timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {message, timestamp, value ->
	failureCounter.increment()
	
	m = includeAssertedMessage.value ? message : outMsg
	
	m["Assert"] = valueToAssert
	m["Min"] = min.value
	m["Value"] = value
	m["Max"] = max.value
	m["Period"] = period.value
	m["Tolerance"] = tolerance.value
	m["Timestamp"] = timestamp
	send(output, m)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
	property(property: includeAssertedMessage, label: 'Include original message in failure messages' )
}</con:property><con:property key="value" type="java.lang.String">Discarded</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">0</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property><con:property key="includeAssertedMessage" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">ef0c272045af2bd2c959d2797ae6fd8f</con:property><con:property key="gui.layoutX">901</con:property><con:property key="gui.layoutY">845</con:property></con:attributes></con:component><con:connection outputTerminalId="d3bcc7bc-0cc5-4156-b35e-34b23d579654/triggerTerminal" inputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/triggerTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/inputTerminal"/><con:connection outputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/output" inputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/inputTerminal"/><con:connection outputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/statisticsOutput" inputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/inputTerminal"/><con:connection outputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/></con:scene></con:loadui-project>