<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="SampleProject" id="d119b449-df9e-4d99-97c7-a8164d9230db" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property key="ModelItem.reportFolder" type="java.lang.String"/><con:property key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes><con:property key="gui.note.0">200;202;220;273;1. Getting Started
------------------------------------------------
This is a simple Web LoadTest that uses a soapUI MockService as its target. It illustrates the basic Generator -> Runner -> Analysis concept of loadUI components

Double-click the TestCase and run it to see what we're talking about!</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.1">205;626;200;150;2. Assertions and Logging
-------------------------------------
This TestCase extends the first by adding a couple of assertions and a Table Log to catch failed responses. </con:property><con:property key="gui.note.2">997;621;263;153;4. Controlling Flow 
-------------------------------------
This TestCase shows how flow-control components can be used to combine multiple runners for creating complex Load Scenarios. It also introduces the soapUI Runner for running a soapUI TestCase as a part of your LoadTest</con:property><con:property key="gui.note.3">1003;200;265;173;3. Schedulers and Generators
---------------------------------------
This TestCase shows how multiple generators can be combined within a LoadTest to generate varying load over time. Schedulers are used to add bursts of simulated Load</con:property></con:attributes><con:scene label="Simple Web LoadTest" id="f53a7146-d347-4f03-81d7-bfff0caa41a0" version="11"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">488</con:property><con:property key="gui.layoutY">202</con:property><con:property key="gui.note.0">200;449;252;75;This Fixed Rate Generator is configured to issue 10 request triggers per second</con:property><con:property key="gui.note.1">200;679;242;110;The Web Page Runner issues a request to the specified web page address each time it receives a trigger message. 

The display to the right shows ongoing statistics</con:property><con:property key="gui.note.2">201;964;270;301;The statistics component is connected to the output of the Web Page Runner which outputs the response-time for each issues request. 

Some things to try:
- Open the settings dialog and select which values you want to show
- Try minimizing the component (with the top-right [-] button)
- Try increasing or decreasing the load generated by the Fixed Rate Generator (by turning the knob) to see how the statistics change

</con:property><con:property key="gui.note.3">1238;643;350;84;The MockService is used in this tutorial to have something to test against. It is started when the LoadTest starts and the number of Requests will be the same as the Requests sent by the Web Page Runner</con:property><con:property key="miniature">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
</con:property><con:property key="gui.note.4">338;200;966;109;This is a simple Web LoadTest showing you how to connect a basic Generator -> Runner -> Analysis LoadTest. 

Make sure you are in Local Mode in the System toolbar at the bottom of this window, then run the LoadTest by clicking the Run button on the top left toolbar (Next to the TestCase menu).
You will see the Web Page Runner starting to send requests and statistics being displayed in the Statistics Component. 

This LoadTest has no configured limit; it will run until you stop it manually with the Stop button. Once you have stopped it, be sure to generate a report with the report-button at the top right.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="0b1546d7-feeb-4d93-b3c9-f6ac151594fc" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">524</con:property><con:property key="gui.layoutY">610</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="2cb44449-032c-4163-8408-e5b61bce2d3f" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">668</con:property><con:property key="gui.layoutY">379</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="7c508081-aa40-49c4-8722-246670b4a417" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.chart.ChartSerie
import com.eviware.loadui.api.chart.Point

AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 5, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis()
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 || agentData.size() > 0 || agentStatistics?.size() > 0) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0 || statisticsInput.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {	
						data['Max'] = Math.max( d['Max'] ?: 0, data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'] ?: Long.MAX_VALUE, data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + (d['Avg'] ?: 0)
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + (d['Std-Dev'] ?: 0)
						data['Tps'] = (data['Tps'] ?: 0) + (d['Tps'] ?: 0)
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + (d['Avg-Tps'] ?: 0)
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		}
		
		if (statisticsInput.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
	chartModel.setTestRunning( running )
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">1bb9588326ee735771fa719e20f0d6dd</con:property><con:property key="gui.layoutX">583</con:property><con:property key="gui.layoutY">961</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="f01e8c30-2fd1-417c-87bf-f8c3ae153c4b"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1196</con:property><con:property key="gui.layoutY">793</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="2cb44449-032c-4163-8408-e5b61bce2d3f/triggerTerminal" inputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/triggerTerminal"/><con:connection outputTerminalId="0b1546d7-feeb-4d93-b3c9-f6ac151594fc/resultTerminal" inputTerminalId="7c508081-aa40-49c4-8722-246670b4a417/inputTerminal"/></con:scene><con:scene label="Complex Load Generation" id="234ea2c5-c94b-4e44-aeae-bd37cd09069b" version="19"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1325</con:property><con:property key="gui.layoutY">200</con:property><con:property key="miniature">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
</con:property><con:property key="limits">Time=600;</con:property><con:property key="gui.note.0">228;402;352;65;The first Scheduler starts a Ramp Generator that will ramp from 0 to 100 requests / sec over the first 2 minutes of the LoadTest</con:property><con:property key="gui.note.1">742;390;341;87;Once the Ramp-up is finished, a Random Load Generator is started for the remains of the Test, which will generate a base load of 100 requests / sec with Gaussian random distribution</con:property><con:property key="gui.note.2">1206;396;448;75;This Scheduler will add an additional load of 100 requests / sec every 10 seconds at the start of each minute. The Scheduler will itself be started at the same time as the Random Generator.</con:property><con:property key="gui.note.3">508;200;798;82;This TestCase shows how to use schedulers in combination with Generators to generate varying load over time: it first Ramps from 0 to 100 requests / sec over the first two minutes, then maintains a randomized base load with reoccurring bursts of requests for the rest of the Test.

The TestCase has its execution limit set to 10 minutes (see toolbar above)</con:property><con:property key="gui.note.4">200;1268;315;114;All Generators are configured to trigger the same Web Page Runner, but you could just as well trigger different ones. 

Its output goes to a standard statistics component as usual</con:property><con:property key="gui.note.5">1426;1298;420;58;Our trustworthy soapUI MockService is once again used as a stand-in for a real service.</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="133d26ad-1f1d-44b0-849c-c9dc31549d48" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">642</con:property><con:property key="gui.layoutY">1244</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="e6588efe-e0c8-463b-b604-398edb7881d5" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">1241</con:property><con:property key="gui.layoutY">917</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Ramp" id="d9d3b5d3-00e3-4654-b75f-4276c0135340" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends signals at a decreasing or increasing rate until it gets to a prespecified level
 * 
 * @help http://www.loadui.org/Generators/ramp-updown-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

//Properties
createProperty( 'start', Long, 0 )
createProperty( 'end', Long, 10 )
createProperty( 'period', Long, 10 )
createProperty( 'unit', String, 'Sec' )
direction = "up"
msPerUnit = 1000
currentRate = 0
gradient = 0
timeEllapsed = 0
currentDelay = 0
targetReached = false

timer = new Timer(true)

display = new DelayedFormattedString( '%d / %s %s', 500, currentRate.longValue(), unit.value, direction )
scheduled = false
future = null

onRelease = {  display.release() }

reset = {
	currentDelay = 0
	timeEllapsed = 0
	targetReached = false
	if ( period.value > 0 ) {
		//Some sanity checks
		if (start.value != 0) {
			if (msPerUnit/start.value > period.value * 1000) {
				targetReached = true
				currentRate = end.value
			}
		} 
		
		if (!targetReached) {
			gradient = (end.value - start.value)/ (period.value * 1000)
			currentRate = start.value
			while (currentRate.longValue() == 0) {
				timeEllapsed++
				currentRate = start.value + timeEllapsed * gradient
			}
		}
	} else {
		targetReached = true
		currentRate = end.value()
	}
	display.setArgs( currentRate.longValue(), unit.value, direction )
	scheduled = false
}

begin = {
	if (stateProperty.value) {
		reset();
		schedule();
	}
}

schedule = {
	if (stateProperty.value &amp;&amp; running &amp;&amp; !scheduled) {
		if (!targetReached) {
			if (currentDelay > 0) {
				timeEllapsed = timeEllapsed + currentDelay
				currentRate = start.value + timeEllapsed * gradient
			}
			
			if (timeEllapsed/1000 >= period.value) {
				targetReached = true
				currentRate = end.value
				direction = "none"
			}
			if (currentRate.longValue() > 0) 
				currentDelay = msPerUnit/(currentRate.longValue()) 
			else 
				currentDelay = 1 //Handling edge cases
		} 
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			display.setArgs( currentRate.longValue(), unit.value, direction )
			trigger()
			scheduled = false
			schedule()
		}
		scheduled = true
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		
		future?.cancel()
		
		started = false
		if (end.value > start.value)
			direction = "up"
		
		if (start.value > end.value)
			direction = "down"
		
		display.setArgs( currentRate.longValue(), unit.value, direction )
		
		if (start.value == end.value)
			direction = "none"
		begin()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
		started = false;
		scheduled = false;
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	if ( event.key == "COMPLETE" ) {
		reset()
	}
}


//Layout
layout  { 
	property( property:start, label:'Start', min:0 ) 
	property( property:end, label:'End', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	property( property:period, label:'Period\n(Sec)', min:1 ) 
	separator( vertical:true )
	box ( layout:"wrap, ins 0" ) {
		box( widget:'display' ) {
			node( label:'Rate', fString:display, constraints:"w 60!" )
		}
		action( label:"Restart", action: { reset(); begin(); }, constraints:"align right" )
	}
}

//Compact Layout
compactLayout  {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Properties", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:start, label:'Start', min:0 ) 
//		property( property:end, label:'End', min:0 ) 
//		property( property:period, label:'Period', min:1 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

reset();
if (running)
	begin();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">false</con:property><con:property key="start" type="java.lang.Long">0</con:property><con:property key="end" type="java.lang.Long">100</con:property><con:property key="period" type="java.lang.Long">120</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Ramp</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Ramp.groovy</con:property><con:property key="_digest">b81f87cc369045d49f669a99df86c260</con:property><con:property key="gui.layoutX">229</con:property><con:property key="gui.layoutY">906</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Random" id="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends and empty message at random intervals around a base rate
 * 
 * @help http://www.loadui.org/Generators/random-component.html
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'type', String, 'Uniform' )
createProperty( 'factor', Long, 0 )

msPerUnit = 1000
if ( unit.value == "Min" )
	msPerUnit = 60000
if ( unit.value == "Hour" )
	msPerUnit = 3600000
defaultDelay = msPerUnit/rate.value
currentDelay = 0

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )
randomDisplay = new DelayedFormattedString( '%d %s', 200, factor.value, "%" )

random = new Random()

timer = new Timer(true)

future = null

onRelease = {  display.release() }

schedule = {
	if (rate.value > 0 &amp;&amp; stateProperty.value) {
		if (factor.value > 0) {
			if ( type.value == 'Uniform' ) 
				currentDelay = defaultDelay + ((random.nextDouble() - 0.5) * (factor.value / 100) * defaultDelay)
			if ( type.value == 'Gaussian' )  
				currentDelay = defaultDelay + (random.nextGaussian() * (factor.value / 100) * defaultDelay * 0.3)
			if ( type.value == 'Exponential' ) 
				currentDelay = defaultDelay * (-Math.log(1-(random.nextDouble())))
		} else
			currentDelay = defaultDelay
		
		//if (currentDelay.intValue() == 0)
		//	currentDelay = 1
		
		
		future = timer.runAfter(currentDelay.intValue()) {
			trigger()
			schedule()
		}
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel()
		if (stateProperty.value)
			future?.cancel()
		
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				msPerUnit = 1000
			if ( unit.value == "Min" )
				msPerUnit = 60000
			if ( unit.value == "Hour" )
				msPerUnit = 3600000
		}
		if (rate.value > 0)
			defaultDelay = msPerUnit/rate.value
		display.setArgs(rate.value, unit.value)
		randomDisplay.setArgs(factor.value, "%")
		schedule()
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel();
	}
	
	if ( event.key == "START" ) {
		future?.cancel()
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Base Rate', min:0 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	
	node(widget: 'selectorWidget', label:'Distribution', labels:['Uniform','Exponential','Gaussian'], 
			images:['linear_shape.png', 'poisson_shape.png', 'gauss_shape.png'], default: type.value, selected: type)
	
	separator( vertical:true )
	property( property:factor, label:'Random\nFactor', min: 0, max: 100, step: 1 )
	separator( vertical:true )
	box( widget:'display', layout:'align center') {
		node( label:'Current rate', fString:display )
		node( label:'Random', fString:randomDisplay )
	}
}

//Compact Layout
compactLayout {
	box( widget: 'display', layout: 'align center' ) {
		node( label: 'Current rate', fString: display )
		node( label: 'Random', fString: randomDisplay )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Base Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//		property( property:type, label:'Distribution', options:['Uniform','Exponential','Gaussian'] )
//		property( property:factor, label:'Random Factor', min: 0, max: 100, step: 1 )
//	}
//} 

if (running)
	schedule();
</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">100</con:property><con:property key="unit" type="java.lang.String">Sec</con:property><con:property key="type" type="java.lang.String">Gaussian</con:property><con:property key="factor" type="java.lang.Long">50</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Random</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Random.groovy</con:property><con:property key="_digest">30700033e862d36c1e433391759e5402</con:property><con:property key="gui.layoutX">678</con:property><con:property key="gui.layoutY">915</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval" id="e36a65c3-b2e1-4db7-967b-bf70cb77182b" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">0</con:property><con:property key="duration" type="java.lang.Long">2</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">1385693413b9b11cd098b2d141d4af8c</con:property><con:property key="gui.layoutX">230</con:property><con:property key="gui.layoutY">570</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Interval (1)" id="f491d887-a1e7-4b12-8174-0b4a9f584525" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop of connected components 
 *
 * @help http://www.loadui.org/Schedulers/interval-component.html
 * @category scheduler
 * @nonBlocking true
 */
 
// Schedule the start and stop of a trigger component.
// On Start starts timer and when StartAt reached send one START message to 
// attached component. When Duration expires one STOP message is send to each 
// attached component.
// Repeat option repeats whole process if counter limit not set.
// 
// On Stop it sends a STOP message to attached components and stops timer.
//
// On Reset it just resets the timer and stops it.


import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.events.BaseEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.layout.DelayedFormattedString

createProperty( 'startAt', Long, 0 )
createProperty( 'duration', Long, 0 )
createProperty( 'unit', String, 'Sec' )
createProperty( 'mode', String, 'Single' )

def timerCounter = getCounter( CanvasItem.TIMER_COUNTER )
def canvas = getCanvas()
def runCount = 0
def running = canvas.running;

def startFuture = null
def stopFuture = null

def endFuture = null

def executor = ScheduledExecutor.instance
def interval = new IntervalModel()

updateState = {
	long limit = canvas.getLimit( CanvasItem.TIMER_COUNTER ) * 1000
	
	long mult = 1000
	if( unit.value == 'Min' ) mult *= 60
	else if( unit.value == 'Percent' && limit > 0 ) mult = limit / 100
	
	long startTime = startAt.value * mult
	if( limit > 0 && startTime > limit ) {
		startAt.value = limit / mult
		return
	}
	interval.start = startTime
	
	long stopTime
	if(duration.value == 0){
		stopTime = (limit > 0) ? limit : IntervalModel.INFINITE
	}
	else{
		stopTime = startTime + duration.value * mult
	}
	
	if( limit > 0 && stopTime > limit ) {
		duration.value = limit / mult - startAt.value
		return
	}
	interval.stop = stopTime
	interval.end = ( limit > stopTime && mode.value == 'Single' ) ? limit : stopTime
	
	long currentTime = timerCounter.get() * 1000 - runCount * stopTime
	interval.position = currentTime
	
	if( running ) {
		if( currentTime < stopTime ) {
			stopFuture?.cancel( true )
			stopFuture = executor.schedule( { sendEnabled( false ) }, stopTime - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < interval.end ) {
			endFuture?.cancel( true )
			endFuture = executor.schedule( {
				if( mode.value == 'Single' ) {
					intervalModel.stop()
					intervalModel.update()
				} else {
					runCount++
					interval.position = 0
					updateState()
				}
			}, interval.end - currentTime, TimeUnit.MILLISECONDS )
		}
		if( currentTime < startTime ) {
			startFuture?.cancel( true )
			startFuture = executor.schedule( { sendEnabled( true ) }, startTime - currentTime, TimeUnit.MILLISECONDS )
			sendEnabled( false )
		} else if( currentTime < stopTime ) {
			sendEnabled( true )
		}
	} else {
		sendEnabled( false )
	}
	
	interval.running = running
	interval.notifyObservers()
}

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION ) {
		running = true
	} else if( event.key == CanvasItem.STOP_ACTION ) {
		running = false
	} else if( event.key == CounterHolder.COUNTER_RESET_ACTION ) {
		running = canvas.running
		interval.position = 0
		runCount = 0
	} else {
		return
	}
	
	cancelAll()
	updateState()
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ startAt, duration, unit, mode ] ) {
		if( !canvas.running ) updateState()
	}
}

def limitsListener = addEventListener( canvas, BaseEvent ) { event ->
	if( event.key == CanvasItem.LIMITS ) {
		if( !canvas.running ) updateState()
	}
}

onRelease = {
	cancelAll()
	canvas.removeEventListener(BaseEvent, limitsListener)
}

cancelAll = {
	startFuture?.cancel( true )
	startFuture = null
	stopFuture?.cancel( true )
	stopFuture = null
	endFuture?.cancel( true )
	endFuture = null
}

layout {
    node( widget:'intervalWidget', model:interval, constraints:'span 6, gaptop 10' )
    separator( vertical: false )
    property( property: startAt, label:'Start At', min:0 )
    property( property: duration, label: 'Duration', min:0 )
    separator( vertical:true )
    property( property:unit, label:'Unit', options:['Sec','Min','Percent'] )
    separator( vertical:true )
    property( property:mode, label:'Mode', options:['Single','Repeat'])
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Start At', fString:new DelayedFormattedString( '%d %s', 1000, startAt, unit ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%d %s', 1000, duration, unit ) )
	}
}

updateState()]]></con:property><con:property key="startAt" type="java.lang.Long">2</con:property><con:property key="duration" type="java.lang.Long">8</con:property><con:property key="unit" type="java.lang.String">Min</con:property><con:property key="mode" type="java.lang.String">Single</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Interval</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Interval.groovy</con:property><con:property key="_digest">1385693413b9b11cd098b2d141d4af8c</con:property><con:property key="gui.layoutX">735</con:property><con:property key="gui.layoutY">576</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Scheduler" id="ee825185-22ab-42ed-852a-c87859ffbc47" category="scheduler"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Schedules the start and stop at a specified day &amp; time
 *
 * @help http://www.loadui.org/Schedulers/scheduler-component.html
 * @category scheduler
 * @nonBlocking true
 * @dependency org.quartz-scheduler:quartz:1.8.3
 * 
 */

import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.api.counter.CounterHolder

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.IntervalModel
import com.eviware.loadui.util.ScheduledExecutor
import com.eviware.loadui.util.FormattingUtils
import com.eviware.loadui.util.layout.DelayedFormattedString
import org.quartz.Scheduler
import org.quartz.CronTrigger
import org.quartz.CronExpression
import org.quartz.impl.StdSchedulerFactory
import org.quartz.JobExecutionContext
import org.quartz.JobExecutionException
import org.quartz.Job
import org.quartz.JobDetail
import java.util.Calendar
import java.util.Date
import org.quartz.listeners.JobListenerSupport
import com.eviware.loadui.util.layout.DelayedFormattedString
import java.text.SimpleDateFormat
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.layout.SchedulerModel

def counter = 0
def durationHolder = 0
def runsHolder = 0
def startSent = false

def schedulerModel = new SchedulerModel()

createProperty( 'day', String, "* (All)" )
createProperty( 'time', String, "0 0 0" )
def duration = createProperty( 'duration', Long, 0 )
def runsLimit = createProperty( 'runsLimit', Long, 0 )

def canvas = getCanvas()

sendStart = { 
	sendEnabled( true ) 
	startSent = true
	counter++
	if(runsHolder > 0 &amp;&amp; counter >= runsHolder){
		unscheduleStartTrigger()
	}
	//setActivityStrategy(ActivityStrategies.BLINKING)
	pauseTotal = 0
}

sendStop = { 
	sendEnabled( false ) 
	//setActivityStrategy(ActivityStrategies.OFF)
	unscheduleEndTrigger()
	endTrigger = null
	pauseTotal = 0
}

class SchedulerJob implements Job {
	void execute(JobExecutionContext context) throws JobExecutionException {}
}

def startTrigger = null
def startJob = new JobDetail("startJob", "group", SchedulerJob.class)
startJob.addJobListener("startJobListener")

def endTrigger = null
def endJob = new JobDetail("endJob", "group", SchedulerJob.class)
endJob.addJobListener("endJobListener")

def paused = false
def pauseStart = -1
def pauseTotal = 0
def endTriggerStart = null //this is the time when latest enable event was sent
def rescheduleAfterPause = false
def endTriggerTimeLeft = null

def maxDuration = 0;

def scheduler = new StdSchedulerFactory().getScheduler()
scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"startJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStart()
		scheduleEndTrigger(new Date(), durationHolder)
	}
})

scheduler.addJobListener(new JobListenerSupport()
{
	String getName(){
		"endJobListener"
	}
	void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {
		sendStop()
		schedulerModel.incrementRunsCounter()
	}
})

addEventListener( ActionEvent ) { event ->
	if( event.key == CanvasItem.START_ACTION) {
		if(!paused){ 
			scheduleStartTrigger()
		}
		else if (rescheduleAfterPause){
			def now = new Date()
			pauseTotal += now.getTime() - pauseStart.getTime()
			scheduleEndTrigger(now, endTriggerStart.getTime() + durationHolder + pauseTotal - now.getTime())
			rescheduleAfterPause = false
		}
		scheduler?.start()
		paused = false
	}
	else if( event.key == CanvasItem.STOP_ACTION) {
		scheduler?.standby()
		paused = true
		pauseStart = new Date()
		if(endTrigger != null){
			unscheduleEndTrigger()
			endTrigger = null
			rescheduleAfterPause = true
		}
	}
	else if( event.key == CanvasItem.COMPLETE_ACTION) {
		reset()
	}
	else if(event.key == CounterHolder.COUNTER_RESET_ACTION){
		reset()
		scheduleStartTrigger()
		scheduler?.start()
	}
}

addEventListener( PropertyEvent ) { event ->
	if( event.property in [ day, time, runsLimit, duration ] ) {
		validateDuration()
		if( !canvas.running ){
			updateState()
		} 
	}
}

validateDuration = {
	def expr = new CronExpression(createStartTriggerPattern())
	def calendar = Calendar.getInstance()
	def nextDate = expr.getNextValidTimeAfter(calendar.getTime())
	calendar.setTime(nextDate)
	calendar.add(Calendar.SECOND, 1)
	def dateAfterNext = expr.getNextValidTimeAfter(calendar.getTime())
	def diff = dateAfterNext.getTime() - nextDate.getTime()
	if(diff/1000 &lt; duration.value){
		duration.value = diff/1000
	}
	maxDuration = diff
}

updateState = {
	def expr = new CronExpression(createStartTriggerPattern())
	schedulerModel.setSeconds(expr.seconds)
	schedulerModel.setMinutes(expr.minutes)
	schedulerModel.setHours(expr.hours)
	schedulerModel.setDays(expr.daysOfWeek)
	schedulerModel.setDuration(duration.value * 1000)
	schedulerModel.setMaxDuration(maxDuration)
	schedulerModel.setRunsLimit((int)runsLimit.value)
	schedulerModel.notifyObservers()
}

createStartTriggerPattern = {
	def startTriggerPattern = "${time.value} "
	startTriggerPattern += "? * "
	if(day.value.equals("* (All)")){
		startTriggerPattern += "* "
	}
	else{
		startTriggerPattern += "${day.value.substring(0,3).toUpperCase()} "
	}
	startTriggerPattern
}

scheduleStartTrigger = {
	runsHolder = runsLimit.value
	durationHolder = duration.value * 1000
	
	def startTriggerPattern = createStartTriggerPattern()
	unscheduleStartTrigger()
	scheduler.addJob(startJob, true)
	startTrigger = new CronTrigger("startTrigger", "group", "startJob", "group", startTriggerPattern)
	scheduler.scheduleJob(startTrigger)
	
	def now = new Date()
	def next = startTrigger.getFireTimeAfter(now)
	if(now.getTime() &lt;= next.getTime() - maxDuration + durationHolder){
		sendStart()
		scheduleEndTrigger(now, next.getTime() - maxDuration + durationHolder - now.getTime())
	}
	else{
		sendStop()
	}
}

scheduleEndTrigger = {startTime, durationInMillis ->
	if(durationHolder > 0){
		def calendar = Calendar.getInstance()
		calendar.setTime(startTime)
		calendar.add(Calendar.MILLISECOND, (int)durationInMillis)

		def endTriggerPattern = ""
		endTriggerPattern += "${calendar.get(Calendar.SECOND)} "
		endTriggerPattern += "${calendar.get(Calendar.MINUTE)} "
		endTriggerPattern += "${calendar.get(Calendar.HOUR_OF_DAY)} "
		endTriggerPattern += "${calendar.get(Calendar.DAY_OF_MONTH)} "
		endTriggerPattern += "${calendar.get(Calendar.MONTH) + 1} "
		endTriggerPattern += "? "
		endTriggerPattern += "${calendar.get(Calendar.YEAR)} "
		
		unscheduleEndTrigger()
		scheduler.addJob(endJob, true)
		endTrigger = new CronTrigger("endTrigger", "group", "endJob", "group", endTriggerPattern)
		scheduler.scheduleJob(endTrigger)
	}
}

reset = {
	counter = 0
	durationHolder = 0
	runsHolder = 0
	paused = false
	pauseStart = -1
	pauseTotal = 0
	endTriggerStart = null
	rescheduleAfterPause = false
	endTriggerTimeLeft = null
	unscheduleStartTrigger()
	unscheduleEndTrigger()
	startTrigger = null
	endTrigger = null
	startSent = false
	//setActivityStrategy(ActivityStrategies.OFF)
	schedulerModel.resetRunsCounter()
}

unscheduleStartTrigger = {
	try{
		scheduler.unscheduleJob("startTrigger", "group")
	}
	catch(Exception e){}
}

unscheduleEndTrigger = {
	try{
		scheduler.unscheduleJob("endTrigger", "group")
	}
	catch(Exception e){}
}

onRelease = {
	scheduler.shutdown()
}

layout {
	node( widget: 'schedulerWidget', model: schedulerModel, constraints: 'span 5, gaptop 10' )
	separator( vertical: false )
	property(property: day, widget: 'comboBox', label: 'Day', options: ['* (All)', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], constraints: 'w 100!' )
	separator(vertical: true)
	property( property: time, widget: 'quartzCron', label: 'Time', constraints: 'w 130!' )
	separator(vertical: true)
	property( property: duration, widget: 'time', label: 'Duration', constraints: 'w 130!' )
}

compactLayout {
	box( widget:'display' ) {
		node( label:'Day', fString:new DelayedFormattedString( '%s', 1000, day ) )
		node( label:'Time', fString:new DelayedFormattedString( '%s', 1000, value { time.value.replace(' ',':') } ) )
		node( label:'Duration', fString:new DelayedFormattedString( '%s', 1000, value { FormattingUtils.formatTime( duration.value ) } ) )
	}
}

settings( label: "Basic" ) {
	property( property: runsLimit, label: 'Runs')
}

validateDuration()
updateState()</con:property><con:property key="day" type="java.lang.String">* (All)</con:property><con:property key="time" type="java.lang.String">0 * *</con:property><con:property key="duration" type="java.lang.Long">10</con:property><con:property key="runsLimit" type="java.lang.Long">0</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Scheduler</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Scheduler.groovy</con:property><con:property key="_digest">af747cf10381439e257f3f23c57b91ef</con:property><con:property key="gui.layoutX">1195</con:property><con:property key="gui.layoutY">585</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="05458282-13f4-4c65-a2fe-0687b851e4cc" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.chart.ChartSerie
import com.eviware.loadui.api.chart.Point

AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 5, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis()
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 || agentData.size() > 0 || agentStatistics?.size() > 0) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0 || statisticsInput.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {	
						data['Max'] = Math.max( d['Max'] ?: 0, data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'] ?: Long.MAX_VALUE, data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + (d['Avg'] ?: 0)
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + (d['Std-Dev'] ?: 0)
						data['Tps'] = (data['Tps'] ?: 0) + (d['Tps'] ?: 0)
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + (d['Avg-Tps'] ?: 0)
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		}
		
		if (statisticsInput.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
	chartModel.setTestRunning( running )
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">false</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">1bb9588326ee735771fa719e20f0d6dd</con:property><con:property key="gui.layoutX">697</con:property><con:property key="gui.layoutY">1527</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="8a8cf6f5-e6f6-4421-9a9f-5ff5261affa5"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1418</con:property><con:property key="gui.layoutY">1432</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:connection outputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/triggerTerminal" inputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/triggerTerminal"/><con:connection outputTerminalId="e36a65c3-b2e1-4db7-967b-bf70cb77182b/outgoingTerminal" inputTerminalId="d9d3b5d3-00e3-4654-b75f-4276c0135340/stateTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="04fb6e5f-6328-4d61-8d66-1a7eb3c3965d/stateTerminal"/><con:connection outputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/outgoingTerminal" inputTerminalId="e6588efe-e0c8-463b-b604-398edb7881d5/stateTerminal"/><con:connection outputTerminalId="133d26ad-1f1d-44b0-849c-c9dc31549d48/resultTerminal" inputTerminalId="05458282-13f4-4c65-a2fe-0687b851e4cc/inputTerminal"/><con:connection outputTerminalId="f491d887-a1e7-4b12-8174-0b4a9f584525/outgoingTerminal" inputTerminalId="ee825185-22ab-42ed-852a-c87859ffbc47/stateTerminal"/></con:scene><con:scene label="Complex Load Scenario" id="5dd7734e-f092-4152-b2e8-3663dac12bf0" version="41"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">1332</con:property><con:property key="gui.layoutY">619</con:property><con:property key="miniature">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
KGF0h41YAAAAAElFTkSuQmCC
</con:property><con:property key="gui.note.0">211;204;522;244;This TestCase shows you how to use the Splitter and Delay components to combine multiple runners into one larger Load Scenario.

- An initial splitter is used after the Load Generator to divide load between three "paths": 
1) The first with 3 web requests, with a delay between the second and third
2) The second running a soapUI TestCase after an initial delay
3) The third first running a separate soapUI LoadTest after which it will join the path of the second option.

Statistics components have been added for both soapUI Runners and the last Web Page Runner. 

As always the soapUI MockService is used to provide a stand-in for the related target systems and services.

This LoadTest will run for ten minutes or 10000 requests (whichever comes first)</con:property><con:property key="limits">Requests=10000;Time=600;</con:property><con:property key="gui.note.1">246;2226;248;54;The standard soapUI MockService used in our samples.</con:property><con:property key="gui.note.2">210;627;350;38;This is the first execution path</con:property><con:property key="gui.note.3">902;710;337;38;This is the second execution path</con:property><con:property key="gui.note.4">1483;640;320;55;And this is the third execution path which "joins" the second one after first running a soapUI TestCase</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="551df37b-ca36-4721-a266-33d59cff8bd3" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">208</con:property><con:property key="gui.layoutY">729</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (1)" id="326df2a4-1c3f-49a2-b54c-692b08aff9fa" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/search.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">200</con:property><con:property key="gui.layoutY">1492</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay" id="0ef58711-1bba-4b7d-8f61-3d1793b613c3" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.WorkspaceItem
import com.eviware.loadui.api.model.SceneItem

final GAUSSIAN = 'Gaussian'
final UNIFORM = 'Uniform'
final EXPONENTIAL = 'Exponential'

random = new Random()
waitingCount = 0

display = new DelayedFormattedString( '%d ms', 500, 0 )
waitingDisplay = new DelayedFormattedString( '%d', 500, value { waitingCount } )
 
output = createOutput( 'output', "Message Output" )
 
createProperty('delay', Long, 0)
createProperty('selected', String, UNIFORM)
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()

workspace = canvas.project?.workspace
fixDisplay = {
	if( canvas instanceof SceneItem && !workspace?.localMode ) {
		display.format = 'n/a'
		waitingDisplay.format = 'n/a'
	} else {
		display.format = '%d ms'
		waitingDisplay.format = '%d'
	}
} 

def workspaceListener = null
if( workspace != null ) {
	workspaceListener = addEventListener( workspace, PropertyEvent ) { event ->
		fixDisplay()
	}
}
fixDisplay()
 
onMessage = { incoming, outgoing, message ->
	waitingCount++
	
	long delayTime = delay.value 
	if( selected.value == GAUSSIAN ) {
		delayTime += ( random.nextGaussian() * ( randomDelay.value / 100 ) * delayTime * 0.3)
	} else if( selected.value == UNIFORM ) {
		delayTime += 2*( random.nextDouble() - 0.5 ) * delayTime * ( randomDelay.value / 100 )
	} else if( selected.value == EXPONENTIAL ) {
		delayTime *= -Math.log( 1 - random.nextDouble() )
	}
	
	message.put( 'actualDelay', delayTime )
	executor.schedule( {
		send( output, message )
		waitingCount--
		display.args = delayTime
	}, delayTime, TimeUnit.MILLISECONDS )
 }
 
onRelease = {
	display.release()
	waitingDisplay.release()
	executor?.shutdownNow()
	workspace?.removeEventListener( PropertyEvent, workspaceListener )
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "COMPLETE" && executor != null ) {
		executor.shutdownNow()
		executor = null
		waitingCount = 0;
	}
	
	if ( event.key == "START" && executor == null ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
		display.args = 0
		waitingCount = 0;
		if( executor != null ) {
			executor.shutdownNow()
			executor = Executors.newSingleThreadScheduledExecutor()
		}
	}
}

layout { 
	property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
	separator( vertical:true )
	node( widget:'selectorWidget', label:'Distribution', labels:[ UNIFORM, EXPONENTIAL, GAUSSIAN ],
		images:[ 'linear_shape.png', 'poisson_shape.png', 'gauss_shape.png' ], default: selected.value, selected: selected )
	property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
 
compactLayout {
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}]]></con:property><con:property key="delay" type="java.lang.Long">500</con:property><con:property key="selected" type="java.lang.String">Gauss</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">a8532f6622e0e00d49b8cc930f40e207</con:property><con:property key="gui.layoutX">309</con:property><con:property key="gui.layoutY">1255</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="04f2b993-146a-4b70-b022-94456e361e46" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">96</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">946</con:property><con:property key="gui.layoutY">200</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Splitter" id="2bde326b-ab20-48e8-ab2b-5913ee042048" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Splits input to specified number of outputs
 * 
 * @help http://www.loadui.org/Flow-Control/splitter-component.html
 * @category flow
 * @nonBlocking true
 */
 
 import java.util.concurrent.Executors
 import java.util.concurrent.TimeUnit

 import com.eviware.loadui.api.events.PropertyEvent
 import com.eviware.loadui.util.collections.ObservableList
 import com.eviware.loadui.util.layout.DelayedFormattedString
 import com.eviware.loadui.api.events.ActionEvent

 import com.eviware.loadui.api.terminal.InputTerminal
 import com.eviware.loadui.api.terminal.OutputTerminal
 import com.eviware.loadui.api.terminal.TerminalMessage
 
 // one output minimum
 
 createProperty('selected', String, "Round-Robin" )
 createProperty('outputs', Integer, 1 )
 createProperty('total', Integer, 0 )
 createProperty('counterUse', Boolean, true )
 createProperty('updateCounterDelay', Long, 500)
 
 // locals

 total.value = 0
 
 def roundRobinNext = 0
 ObservableList outputStats = new ObservableList()
 outputStats.add(0)
 for( i in 1..9 ) {
    outputStats.add(-1)
}
 cnt = 0
 while( outputs.value > cnt ) {
 	createOutgoing()
 	outputStats.set( cnt, 0 )
        cnt++
 }

 counters = getCounters()
    
 display = new DelayedFormattedString( '%d', 500, 0 )
 outputDisplay = new DelayedFormattedString( '%s', 500, value({ outputStats.findAll({ it >= 0 }).join('          ') }) )

 executor = Executors.newSingleThreadScheduledExecutor()
 future = null
// future = executor.scheduleWithFixedDelay( { outputStats.update()
//						println controller }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 

 onMessage = { incoming, outgoing, message ->
   super.onTerminalMessage(incoming, outgoing, message)
	if(incoming == remoteTerminal) 
   		println message
   try {
    def next = 0;
    switch( selected.value ) {
        case "Round-Robin": 
            next = roundRobinNext
	    counters.get(next).increment()
            outputStats.set(next, counters.get(next).get())
            send ( getOutgoingTerminalList().get(next), message )
            if( roundRobinNext + 1 == getOutgoingTerminalList().size() )
                roundRobinNext = 0
            else
                roundRobinNext++
            break
        case "Random" :
            random = new Random()
            next = random.nextInt(getOutgoingTerminalList().size())
	    counters.get(next).increment()
            outputStats.set(next, counters.get(next).get())
            send ( getOutgoingTerminalList().get(next), message )
            break
    }
    total.value++
    display.setArgs( total.value )
   } catch ( Exception e ) {
 	println e.printStackTrace   
   }

} 
 addEventListener( PropertyEvent ) { event ->
    if( event.event == PropertyEvent.Event.VALUE ) {
        switch( event.getProperty().getKey() ) {
            case 'outputs': 
                while ( outputs.value != getOutgoingTerminalList().size() ) {
                    if ( outputs.value > getOutgoingTerminalList().size() ) {
                        createOutgoing()
                        outputStats.set(getOutgoingTerminalList().size() -1, 0)
                    } else {
                        total.value = total.value - outputStats.get(getOutgoingTerminalList().size() -1)
                        display.setArgs( total.value )
                        outputStats.set(getOutgoingTerminalList().size() -1, -1)
                        deleteOutgoing()
                    }
                }
    		outputStats.update()
                break;
        }
    }
 }
 
 addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
	  executor.schedule( { 
		executor?.shutdownNow()
	  	executor = Executors.newSingleThreadScheduledExecutor()
	  }, updateCounterDelay.value, TimeUnit.MILLISECONDS)
	}
	
	if ( event.key == "START" ) {
           if ( future == null )
	    future = executor.scheduleWithFixedDelay( { outputStats.update()
								 }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
	
	if ( event.key == "RESET" ) {
	    future?.cancel(true)
	    executor?.shutdownNow()
	    roundRobinNext = 0

	    total.value = 0
	    display.setArgs( 0 )
            for( i in 0..9 ) {
	     if( outputStats.get(i) > -1 )
	          outputStats.set(i as Integer,0)
	    }
	    outputStats.update()
	    executor = Executors.newSingleThreadScheduledExecutor()
	    future = executor.scheduleWithFixedDelay( { outputStats.update()
							 }, updateCounterDelay.value, updateCounterDelay.value, TimeUnit.MILLISECONDS ) 
	}
}

 onRelease = {
   display.release()
   outputDisplay.release()
   future?.cancel(true)
   executor.shutdownNow()
 }

 
 settings( label: "Counter Settings", layout: 'wrap 2' ) {
	box( layout:"wrap 1", constraints:"growx" ) {
		property(property: counterUse, label: 'Enable Counters' )
		property(property: updateCounterDelay, label: 'Time interval for refreshing counters(ms)' )
	}
 }
 
 layout ( layout:'gap 10 5' ) { 
    node(widget: 'selectorWidget', label:"Type", labels:["Round-Robin", "Random"], default: "Round-Robin", selected: selected)
    separator( vertical: true )
    node( widget: 'sliderWidget', property: outputs, constraints:'center, w 270!' )
    separator( vertical: true ) 
    box( layout: 'wrap, ins 0' ) {
	    box( widget:'display',  constraints:'w 100!' ) {
			 node( label:'Count', fString:display, constraints:'wrap' )
	    }
	    action( label:'Clear', action: {  
	       total.value = 0
		    display.setArgs( 0 )
			 for( i in 0..9 ) {
			     if( outputStats.get(i) > -1 ) outputStats.set(i as Integer,0)
			 }
			 outputStats.update()
	    }, constraints:'right' )
	}
    separator( vertical: false )
    node( widget: 'counterWidget', counters: outputStats , counts:counters,onOff: counterUse, constraints:'span 5,center')
  }
 
compactLayout() {
	box( widget: 'display', layout: 'wrap, fillx', constraints: 'growx' ) {
		node( label: 'Count', fString: display )
		node( label: 'Distribution', fString: outputDisplay )
	}
}</con:property><con:property key="selected" type="java.lang.String">Round-Robin</con:property><con:property key="outputs" type="java.lang.Integer">3</con:property><con:property key="total" type="java.lang.Integer">0</con:property><con:property key="counterUse" type="java.lang.Boolean">true</con:property><con:property key="updateCounterDelay" type="java.lang.Long">500</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Splitter</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Splitter.groovy</con:property><con:property key="_digest">747945402ba6a60b8baadc554d3933c3</con:property><con:property key="gui.layoutX">806</con:property><con:property key="gui.layoutY">429</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner" id="6002c29e-6cf9-4772-83cd-c862927e5aaa"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="settingsFile" type="java.io.File">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">861</con:property><con:property key="gui.layoutY">1439</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="bbdf5140-9253-4ead-9782-cbb0a742264e"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">MockService 1</con:property><con:property key="path" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/</con:property><con:property key="port" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">531</con:property><con:property key="gui.layoutY">2222</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Delay (1)" id="5bf761b9-8f2d-44ed-adc9-72d49eb32927" category="flow"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Delays incoming messages for a period of time
 * 
 * @help http://www.loadui.org/Flow-Control/delay-component.html
 * @category flow
 * @nonBlocking true
 */
 
import com.eviware.loadui.api.events.PropertyEvent
 
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.WorkspaceItem
import com.eviware.loadui.api.model.SceneItem

final GAUSSIAN = 'Gaussian'
final UNIFORM = 'Uniform'
final EXPONENTIAL = 'Exponential'

random = new Random()
waitingCount = 0

display = new DelayedFormattedString( '%d ms', 500, 0 )
waitingDisplay = new DelayedFormattedString( '%d', 500, value { waitingCount } )
 
output = createOutput( 'output', "Message Output" )
 
createProperty('delay', Long, 0)
createProperty('selected', String, UNIFORM)
createProperty('randomDelay', Integer, 0)

executor = Executors.newSingleThreadScheduledExecutor()

workspace = canvas.project?.workspace
fixDisplay = {
	if( canvas instanceof SceneItem && !workspace?.localMode ) {
		display.format = 'n/a'
		waitingDisplay.format = 'n/a'
	} else {
		display.format = '%d ms'
		waitingDisplay.format = '%d'
	}
} 

def workspaceListener = null
if( workspace != null ) {
	workspaceListener = addEventListener( workspace, PropertyEvent ) { event ->
		fixDisplay()
	}
}
fixDisplay()
 
onMessage = { incoming, outgoing, message ->
	waitingCount++
	
	long delayTime = delay.value 
	if( selected.value == GAUSSIAN ) {
		delayTime += ( random.nextGaussian() * ( randomDelay.value / 100 ) * delayTime * 0.3)
	} else if( selected.value == UNIFORM ) {
		delayTime += 2*( random.nextDouble() - 0.5 ) * delayTime * ( randomDelay.value / 100 )
	} else if( selected.value == EXPONENTIAL ) {
		delayTime *= -Math.log( 1 - random.nextDouble() )
	}
	
	message.put( 'actualDelay', delayTime )
	executor.schedule( {
		send( output, message )
		waitingCount--
		display.args = delayTime
	}, delayTime, TimeUnit.MILLISECONDS )
 }
 
onRelease = {
	display.release()
	waitingDisplay.release()
	executor?.shutdownNow()
	workspace?.removeEventListener( PropertyEvent, workspaceListener )
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "COMPLETE" && executor != null ) {
		executor.shutdownNow()
		executor = null
		waitingCount = 0;
	}
	
	if ( event.key == "START" && executor == null ) {
		executor = Executors.newSingleThreadScheduledExecutor()
	}
	
	if ( event.key == "RESET" ) {
		display.args = 0
		waitingCount = 0;
		if( executor != null ) {
			executor.shutdownNow()
			executor = Executors.newSingleThreadScheduledExecutor()
		}
	}
}

layout { 
	property( property:delay, label:"Delay(ms)", min:0, step:100, span:60000 ) 
	separator( vertical:true )
	node( widget:'selectorWidget', label:'Distribution', labels:[ UNIFORM, EXPONENTIAL, GAUSSIAN ],
		images:[ 'linear_shape.png', 'poisson_shape.png', 'gauss_shape.png' ], default: selected.value, selected: selected )
	property( property: randomDelay, label:'Random(%)', min:0, max: 100 )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}
 
compactLayout {
	box( widget:'display' ) {
		node( label:'Delay ', fString:display, constraints:'w 60!' )
		node( label:'Waiting ', fString:waitingDisplay, constraints:'w 50!' )
	}
}]]></con:property><con:property key="delay" type="java.lang.Long">600</con:property><con:property key="selected" type="java.lang.String">Uniform</con:property><con:property key="randomDelay" type="java.lang.Integer">0</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Delay</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Delay.groovy</con:property><con:property key="_digest">a8532f6622e0e00d49b8cc930f40e207</con:property><con:property key="gui.layoutX">877</con:property><con:property key="gui.layoutY">1137</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.SoapUISamplerComponent" label="soapUI Runner (1)" id="1bc8e660-d490-4a74-a86e-b54c476cf501"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="projectFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="testSuite" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestSuite 1</con:property><con:property key="testCase" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">TestCase 1</con:property><con:property key="raiseError" type="java.lang.Boolean">true</con:property><con:property key="OutputLevel" type="java.lang.String">TestCase only</con:property><con:property key="_testCasePropertiesTableModel" type="java.lang.String"/><con:property key="settingsFileRelativePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="useSettingsFileRelativePath" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="settingsFile" type="java.io.File">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI Runner</con:property><con:property key="gui.layoutX">1387</con:property><con:property key="gui.layoutY">774</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner (2)" id="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">http://localhost:8081/userguide/index.html</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">213</con:property><con:property key="gui.layoutY">993</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="e9541fa4-a45a-48d2-a964-fe7086dc2511" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.chart.ChartSerie
import com.eviware.loadui.api.chart.Point

AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 5, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis()
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 || agentData.size() > 0 || agentStatistics?.size() > 0) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0 || statisticsInput.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {	
						data['Max'] = Math.max( d['Max'] ?: 0, data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'] ?: Long.MAX_VALUE, data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + (d['Avg'] ?: 0)
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + (d['Std-Dev'] ?: 0)
						data['Tps'] = (data['Tps'] ?: 0) + (d['Tps'] ?: 0)
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + (d['Avg-Tps'] ?: 0)
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		}
		
		if (statisticsInput.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
	chartModel.setTestRunning( running )
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">1bb9588326ee735771fa719e20f0d6dd</con:property><con:property key="gui.layoutX">860</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (1)" id="660696d8-1a52-40c2-9fdc-335d80d83bf4" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.chart.ChartSerie
import com.eviware.loadui.api.chart.Point

AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 5, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis()
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 || agentData.size() > 0 || agentStatistics?.size() > 0) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0 || statisticsInput.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {	
						data['Max'] = Math.max( d['Max'] ?: 0, data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'] ?: Long.MAX_VALUE, data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + (d['Avg'] ?: 0)
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + (d['Std-Dev'] ?: 0)
						data['Tps'] = (data['Tps'] ?: 0) + (d['Tps'] ?: 0)
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + (d['Avg-Tps'] ?: 0)
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		}
		
		if (statisticsInput.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
	chartModel.setTestRunning( running )
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">1bb9588326ee735771fa719e20f0d6dd</con:property><con:property key="gui.layoutX">217</con:property><con:property key="gui.layoutY">1807</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics (2)" id="fd7c8cf3-894d-4297-8b24-fa3c3db378c1" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.chart.ChartSerie
import com.eviware.loadui.api.chart.Point

AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 5, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis()
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 || agentData.size() > 0 || agentStatistics?.size() > 0) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0 || statisticsInput.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {	
						data['Max'] = Math.max( d['Max'] ?: 0, data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'] ?: Long.MAX_VALUE, data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + (d['Avg'] ?: 0)
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + (d['Std-Dev'] ?: 0)
						data['Tps'] = (data['Tps'] ?: 0) + (d['Tps'] ?: 0)
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + (d['Avg-Tps'] ?: 0)
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		}
		
		if (statisticsInput.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
	chartModel.setTestRunning( running )
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">1bb9588326ee735771fa719e20f0d6dd</con:property><con:property key="gui.layoutX">1473</con:property><con:property key="gui.layoutY">1813</con:property></con:attributes></con:component><con:connection outputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/output" inputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/triggerTerminal"/><con:connection outputTerminalId="04f2b993-146a-4b70-b022-94456e361e46/triggerTerminal" inputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/incomingTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 1" inputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 2" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/output" inputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/triggerTerminal"/><con:connection outputTerminalId="2bde326b-ab20-48e8-ab2b-5913ee042048/outgoingTerminal 3" inputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/triggerTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="5bf761b9-8f2d-44ed-adc9-72d49eb32927/incomingTerminal"/><con:connection outputTerminalId="551df37b-ca36-4721-a266-33d59cff8bd3/resultTerminal" inputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/triggerTerminal"/><con:connection outputTerminalId="4c20d4f4-9820-4ac8-986f-bb8d89fb7e56/resultTerminal" inputTerminalId="0ef58711-1bba-4b7d-8f61-3d1793b613c3/incomingTerminal"/><con:connection outputTerminalId="6002c29e-6cf9-4772-83cd-c862927e5aaa/resultTerminal" inputTerminalId="e9541fa4-a45a-48d2-a964-fe7086dc2511/inputTerminal"/><con:connection outputTerminalId="326df2a4-1c3f-49a2-b54c-692b08aff9fa/resultTerminal" inputTerminalId="660696d8-1a52-40c2-9fdc-335d80d83bf4/inputTerminal"/><con:connection outputTerminalId="1bc8e660-d490-4a74-a86e-b54c476cf501/resultTerminal" inputTerminalId="fd7c8cf3-894d-4297-8b24-fa3c3db378c1/inputTerminal"/></con:scene><con:scene label="Web LoadTest with Assertions" id="e00b1ef7-ae48-48e1-972a-f8b8caefe44c" version="35"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="SceneItem.followProject" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="gui.layoutX">490</con:property><con:property key="gui.layoutY">624</con:property><con:property key="gui.note.0">200;452;282;93;Here the same Generator -> Runner -> Analysis setup as in the first example is set up, but the runner and statistics components have been minimized to make room for the assertions below</con:property><con:property key="miniature">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
wet3slkAAAAASUVORK5CYII=
</con:property><con:property key="gui.note.4">577;200;898;97;This is the same Web LoadTest as shown in the first example but now with a bunch of assertions and a Table Log

As previously make sure you are in Local Mode in the System toolbar at the bottom of this window and then run the LoadTest by pressing the Run button on the top left toolbar

This LoadTest will run until either 100000 requests have been sent or there have been 100 assertion failures (whichever comes first).</con:property><con:property key="gui.note.1">403;689;379;75;This Assertion is connected to the request output of the Web Page Runner, allowing it to assert (validate) the contents of each requests. We will set it to check that the time taken is never over 100ms</con:property><con:property key="gui.note.2">901;687;400;75;This assertion is connected to the second output of the Web Page Runner, which outputs the stats you can see in the display of the runner. We will use the assertion to make sure there are no discarded messages.</con:property><con:property key="gui.note.3">1412;684;419;75;This last assertion is used to assert the average response time as calculated and output by the statistics component. We will set the max value to 50 ms</con:property><con:property key="gui.note.5">440;1120;275;84;The Table Log is connected to the output of all assertions; it will contain all failed assertions which we can export or log continously while running</con:property><con:property key="gui.note.6">1588;1101;418;42;The same soapUI MockService is used here to give something to run against</con:property><con:property key="limits">Requests=100000;Failures=100;</con:property></con:attributes><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner" id="597e6093-d97f-4f73-ab9d-de68f912b974" category="runners"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends a HTTP request
 * 
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1-beta1
 * @dependency org.apache.httpcomponents:httpclient:4.1-alpha2
 */

import org.apache.http.* 
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

import java.util.HashSet
import java.util.Collections
import com.eviware.loadui.impl.component.ActivityStrategies

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import javax.net.ssl.SSLContext
import javax.net.ssl.KeyManager
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.cert.X509Certificate
import java.security.cert.CertificateException
import java.security.SecureRandom
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import com.eviware.loadui.api.terminal.TerminalMessage;

executor = Executors.newSingleThreadScheduledExecutor()
future = executor.scheduleAtFixedRate( { updateLed() }, 500, 500, TimeUnit.MILLISECONDS )

createOutput( 'statisticsOutput', 'Runner Statistics' )

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
	void checkClientTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	void checkServerTrusted ( X509Certificate[] cert, String authType ) throws CertificateException {}
	X509Certificate[] getAcceptedIssuers () { null }
}
def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [ new NaiveTrustManager() ]
sslContext.init( new KeyManager[0], tms, new SecureRandom() )
def sslSocketFactory = new SSLSocketFactory( sslContext );
sslSocketFactory.hostnameVerifier = SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER

def sr = new SchemeRegistry()
sr.register( new Scheme( "http", PlainSocketFactory.socketFactory, 80 ) )
sr.register( new Scheme( "https", sslSocketFactory, 443 ) )

def cm = new ThreadSafeClientConnManager( sr )
cm.maxTotalConnections = 50000
cm.defaultMaxPerRoute = 50000

http = new DefaultHttpClient( cm )

def runningSamples = Collections.synchronizedSet( new HashSet() )
runAction = null

//Properties
createProperty( 'url', String )
createProperty( 'outputBody', Boolean, false )

//createProperty( 'propagateSession', Boolean, false )
createProperty( 'readResponse', Boolean, false )
createProperty( 'raiseAssertion', Boolean, true )
createProperty( 'errorCodeList', String )

createProperty( 'proxyHost', String)
createProperty( 'proxyPort', Long)
createProperty( 'proxyUsername', String)
proxyPassword = createProperty( '_proxyPassword', String)

eviPattern = ~/https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/
dummyUrl = "http://GoSpamYourself.com"

validateUrl = {  
	if ((url.value != null) && !(url.value.toLowerCase().startsWith( "http://" ) || url.value.toLowerCase().startsWith( "https://" ))) {
		url.value = "http://" + url.value;
	}
	
	if( url.value != null && eviPattern.matcher(url.value).matches() ) url.value = dummyUrl
	
	setInvalid( url.value == null || url.value == dummyUrl )
	runAction?.enabled = !isInvalid()
}

updateLed = {
	if (runAction?.enabled)
		if (currentlyRunning > 0)
			setActivityStrategy(ActivityStrategies.BLINKING)
		else
			setActivityStrategy(ActivityStrategies.ON)
	else 
		setActivityStrategy(ActivityStrategies.OFF)
}

updateProxy = {
	if( proxyHost.value != null && proxyHost.value.trim().length() > 0 && proxyPort.value != null && proxyPort.value > 0 ) {
		HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int)proxyPort.value, "http");
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost);
		
		if( proxyUsername.value != null && proxyUsername.value.trim().length() > 0 && proxyPassword.value != null  ) {
			http.credentialsProvider.setCredentials( 
					new AuthScope(proxyHost.value, (int)proxyPort.value), 
					new UsernamePasswordCredentials(proxyUsername.value, 
					new String(proxyPassword.value)))
		}
		else {
			http.credentialsProvider = null
		}
	}
	else {
		http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null );
	}
}

validateUrl()
updateProxy()

sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
aborting = false

displayRequests = new DelayedFormattedString( '%d', 500, value { (sampleCounter.get() - sampleResetValue) + currentlyRunning } )
displayRunning = new DelayedFormattedString( '%d', 500, value { currentlyRunning } )
displayTotal = new DelayedFormattedString( '%d', 500,  value { sampleCounter.get() - sampleResetValue } )
displayQueue = new DelayedFormattedString( '%d', 500, value { queueSize } )
displayDiscarded = new DelayedFormattedString( '%d', 500,  value { discardCounter.get() - discardResetValue } )
displayFailed = new DelayedFormattedString( '%d', 500,  value { failureCounter.get() - failedResetValue } )

sample = { message, sampleId ->
	def uri = message['url'] ?: url.value
	if( uri ) {
		def get = new HttpGet( uri )
		message['ID'] = uri
		
		runningSamples.add( get )
		try {
			def response = http.execute( get )
			message['Status'] = true
			message['URI'] = uri
			message['HttpStatus'] = response.statusLine.statusCode
			
			if (errorCodeList.value != null) {
				def assertionCodes = errorCodeList.value.split(',')
				
				for (code in assertionCodes) {
					if (code.trim() == response.statusLine.statusCode.toString()) {
						failureCounter.increment();
						break;
					}
				}
			}
			
			if( response.entity != null )	{
				int contentLength = response.entity.contentLength
				message['Bytes'] = contentLength
				
				if( outputBody.value )
					message['Response'] = EntityUtils.toString(response.entity)
				
				if( contentLength < 0 ) {
					if( outputBody.value)
						message['Bytes'] = message['Response'].length()
					else
						message['Bytes'] = EntityUtils.toString(response.entity).length()
				}
				
				response.entity.consumeContent()
				
				if (!runningSamples.remove(get)) {
					throw new SampleCancelledException()
				}
				
				return message
			}
		} catch( e ) {
			if( e instanceof SampleCancelledException)
				throw e;
			
			e.printStackTrace()
			get.abort()
			
			if (!runningSamples.remove(get)) {
				throw new SampleCancelledException()
			}
			
			message['Status'] = false
			if (raiseAssertion.value == true) {
				failureCounter.increment()
			}
			
			return message
		}
	} else {
		throw new SampleCancelledException()
	}

}

onCancel = {
	aborting = true
	
	synchronized( runningSamples ) {
		def methods = runningSamples.toArray()
		runningSamples.clear()
		methods.each { method ->
			if( !method.aborted ) method.abort()
		}
	}
	aborting = false
}

onRelease = {
	executor.shutdownNow()
	displayRunning.release()
	displayTotal.release()
	displayQueue.release()
	displayDiscarded.release()
	displayFailed.release()
	displayRequests.release()
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		sampleResetValue = 0
		discardResetValue = 0
		failedResetValue = 0
	}
	else if ( event.key == "BROWSE" ) {
		if( url.value != null && url.value.startsWith( "http"))
			java.awt.Desktop.getDesktop().browse( new java.net.URI(url.value ))
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == url ) {
			validateUrl()
		}
		else if( event.property == proxyHost || event.property == proxyPort ||
		event.property == proxyUsername || event.property == proxyPassword ) {
			updateProxy()
		}
	}
}

//Layout
layout {
	box( layout:'wrap 2, ins 0' ) {
		property( property:url, label:'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt' )
		action( label:'Open in Browser', constraints:'spanx 2', action: { triggerAction('BROWSE') } )
		runAction = action( label:'Run Once', action: { triggerAction('SAMPLE') } )
		action( label:'Abort Running Pages', action: { triggerAction('CANCEL') } )
	}
	separator(vertical:true)
	box( layout:'wrap, ins 0' ){
		box( widget:'display', layout:'wrap 3, align right' ) {
			node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
			node( label:'Running', fString:displayRunning, constraints:'w 50!' )
			node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
			node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
			node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
			node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
		}
		action( label:'Reset', action: {
			sampleResetValue = sampleCounter.get()
			discardResetValue = discardCounter.get()
			failedResetValue = failureCounter.get()
			triggerAction('CANCEL')
		}, constraints:'align right' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display', layout:'wrap 3, align right' ) {
		node( label:'Requests', fString:displayRequests, constraints:'w 50!' )
		node( label:'Running', fString:displayRunning, constraints:'w 50!' )
		node( label:'Completed', fString:displayTotal, constraints:'w 60!' )
		node( label:'Queued', fString:displayQueue, constraints:'w 50!' )
		node( label:'Discarded', fString:displayDiscarded, constraints:'w 50!' )
		node( label:'Failed', fString:displayFailed, constraints:'w 60!' )
	}
}

settings( label: "Basic" ) {
	property( property: outputBody, label: 'Output Response Body' )
	//property( property: propagateSession, label: 'Propagate Session' )
	property( property: readResponse, label: 'Read Response' )
	property( property: raiseAssertion, label: 'Raise Assertion on Error' )
	property( property: concurrentSamples, label: 'Max Concurrent Requests' )
	property( property: maxQueueSize, label: 'Max Queue' )
	property( property: assertOnOverflow, label: 'Raise Assertion on Overflow' )
	property( property: errorCodeList, label: 'Error Codes that Raise an Assertion', constraints:'w 200!')
}

settings( label: "Proxy" ) {
	property( property: proxyHost, label: 'Proxy Host' )
	property( property: proxyPort, label: 'Proxy Port' )
	property( property: proxyUsername, label: 'Proxy Username' )
	property( property: proxyPassword, widget: 'password', label: 'Proxy Password' )
}

executor.scheduleAtFixedRate( 
{
	def message = newMessage();
	message["Requests"] = Integer.parseInt( displayRequests.getCurrentValue() ) 
	message["Running"] = Integer.parseInt( displayRunning.getCurrentValue() ) 
	message["Discarded"] = Integer.parseInt( displayDiscarded.getCurrentValue() ) 
	message["Failed"]= Integer.parseInt( displayFailed.getCurrentValue() ) 
	message["Queued"]= Integer.parseInt( displayQueue.getCurrentValue() ) 
	message["Completed"]= Integer.parseInt( displayTotal.getCurrentValue() ) 
	send( statisticsOutput, message );
}, 1000, 1000, TimeUnit.MILLISECONDS );

def statisticsSignature = [
		"Requests" : Integer.class,
		"Running" : Integer.class,
		"Discarded" : Integer.class,
		"Failed" : Integer.class,
		"Queued" : Integer.class,
		"Completed" : Integer.class,
		]

setSignature(statisticsOutput, statisticsSignature)]]></con:property><con:property key="concurrentSamples" type="java.lang.Long">100</con:property><con:property key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property key="assertOnOverflow" type="java.lang.Boolean">false</con:property><con:property key="url" type="java.lang.String">http://localhost:8081</con:property><con:property key="outputBody" type="java.lang.Boolean">false</con:property><con:property key="propagateSession" type="java.lang.Boolean">false</con:property><con:property key="readResponse" type="java.lang.Boolean">false</con:property><con:property key="raiseAssertion" type="java.lang.Boolean">true</con:property><con:property key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\WebRunner.groovy</con:property><con:property key="_digest">2ae536cbe340efb99cd220cc94343216</con:property><con:property key="gui.layoutX">984</con:property><con:property key="gui.layoutY">442</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate" id="d3bcc7bc-0cc5-4156-b35e-34b23d579654" category="generators"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

executor = Executors.newSingleThreadScheduledExecutor()

//Properties
createProperty( 'rate', Long, 10 )
createProperty( 'unit', String, 'Sec' )


milisecondsPerUnit = 1000000				
delay = milisecondsPerUnit/rate.value

display = new DelayedFormattedString( '%d / %s', 200, rate.value, unit.value )

onRelease = { 
	executor.shutdownNow() 
	display.release()
}
future = null
schedule = {
	if (stateProperty.value) {
		future?.cancel(true);
		future = executor.scheduleAtFixedRate( { trigger() }, delay.longValue(), delay.longValue(), TimeUnit.MICROSECONDS )
	}
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == unit ) {
			if ( unit.value == "Sec" )
				milisecondsPerUnit = 1000000
			if ( unit.value == "Min" )
				milisecondsPerUnit = 60000000
			if ( unit.value == "Hour" )
				milisecondsPerUnit = 3600000000
		}
		if (event.property == stateProperty &amp;&amp; !stateProperty.value)
			future?.cancel(true)
		if (stateProperty.value)
			future?.cancel(true)
		if( rate.value != null &amp;&amp; rate.value > 0 ) {
			delay = milisecondsPerUnit/rate.value
			if ( delay &lt; 1 )
				delay = 1
			display.setArgs( rate.value, unit.value )
			schedule()
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "STOP" ) {
		future?.cancel(true)
	}
	
	if ( event.key == "START" ) {
		schedule()
	}
	
	//RESET in this case would not really do anything
}

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', fString:display, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', fString:display )
	}
}

//Settings
//settings( label: "Settings", layout: 'wrap 2' ) {
//	box(layout:"growx, wrap 1") {
//		property( property:rate, label:'Rate', min:0 ) 
//		property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
//	}
//} 

//Start scheduler
if ( unit.value == "Sec" )
	milisecondsPerUnit = 1000000
if ( unit.value == "Min" )
	milisecondsPerUnit = 60000000
if ( unit.value == "Hour" )
	milisecondsPerUnit = 3600000000

delay = milisecondsPerUnit/rate.value

if (running)
	schedule();


</con:property><con:property key="stateProperty" type="java.lang.Boolean">true</con:property><con:property key="rate" type="java.lang.Long">10</con:property><con:property key="unit" type="java.lang.String">Sec</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\FixedRate.groovy</con:property><con:property key="_digest">98fc2bf476015c1e4e1bd0e647e86bc6</con:property><con:property key="gui.layoutX">637</con:property><con:property key="gui.layoutY">447</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Statistics" id="b612904b-3546-4a11-919c-2ff7d2f974b5" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Displays statistical information  
 * 
 * @help http://www.loadui.org/Analysis/statistics.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.Calendar
import java.util.Date
import java.util.List
import java.util.HashMap
import java.util.Map
import java.util.ArrayList

import com.eviware.loadui.api.component.ComponentContext

import com.eviware.loadui.api.chart.CustomTimeRange
import com.eviware.loadui.api.chart.CustomNumericRange
import com.eviware.loadui.api.chart.ChartModel
import com.eviware.loadui.api.chart.ChartAdapter;

import com.eviware.loadui.api.terminal.InputTerminal
import com.eviware.loadui.api.terminal.OutputTerminal
import com.eviware.loadui.api.terminal.TerminalMessage

import com.eviware.loadui.api.layout.OptionsProvider
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.CollectionEvent
import com.eviware.loadui.api.events.ActionEvent

import com.eviware.loadui.util.statistics.ValueStatistics
import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.summary.MutableSection

import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.api.chart.ChartSerie
import com.eviware.loadui.api.chart.Point

AGGREGATE = "Aggregate"
AGENT_DATA_TIMESTAMP = "AgentDataTimestamp"
AGENT_DATA_TTL = 5000

executor = Executors.newSingleThreadScheduledExecutor()

createOutput( 'output', 'Statistics Output')
statisticsInput = createInput( 'statistics', 'Runner Statistics')

//Properties
createProperty( 'period', Long, 1 )
createProperty( 'rate', Long, 500 )
createProperty( 'chartPeriod', Long, 1 )

createProperty( 'enableAverage', Boolean, true )
createProperty( 'enableMin', Boolean, true )
createProperty( 'enableMax', Boolean, true )
createProperty( 'enableStdDev', Boolean, true )
createProperty( 'enableTPS', Boolean, true )
createProperty( 'enableBPS', Boolean, true )
createProperty( 'enableAvgTPS', Boolean, true )
createProperty( 'enableAvgBPS', Boolean, true )
createProperty( 'enablePercentile', Boolean, true )
createProperty( 'enableAvgResponseSize', Boolean, true )
createProperty( 'enableRequests', Boolean, true )
createProperty( 'enableRunning', Boolean, true )
createProperty( 'enableCompleted', Boolean, true )
createProperty( 'enableQueued', Boolean, true )
createProperty( 'enableDiscarded', Boolean, true )
createProperty( 'enableFailed', Boolean, true )
createProperty( 'currentSourceID', String, "none" )
createProperty( 'addtoSummary', Boolean, false )

avgDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
minDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
maxDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
stdDevDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
tpsDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
bpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgTpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
avgBpsDisplay = new DelayedFormattedString( '%.0f', 500, 0f )
percentileDisplay = new DelayedFormattedString( '%.2f', 500, 0f )
avgRespSizeDisplay = new DelayedFormattedString( '%.0f', 500, 0f )

createProperty( 'selectedAgent', String, AGGREGATE )

OptionsProvider availableAgents = new OptionsProviderImpl( AGGREGATE );
OptionsProvider availableSourceIDs = new OptionsProviderImpl( "none" );
sourceIDs = ["none"]

double timeScaleFactor = 1 //seconds
double bytesScaleFactor = 1/(1024D) //KBytes

xRange = new CustomTimeRange(chartPeriod.value * 60000, rate.value)
xRange.visible = true

yRange = new CustomNumericRange(0, 10, 20)
yRange.visible = true
yRange.title = 'ms KB'

y2Range = new CustomNumericRange(0, 5, 20)
y2Range.visible = true
y2Range.title = 'requests'

ChartModel chartModel = new ChartModel(xRange, yRange, y2Range, 420, 180)
chartModel.addChartListener( new ChartAdapter() {
	public void chartCleared() {
		try {
			resetBuffers()
		}
		catch(Throwable e2) {
			ex(e2, 'chartCleared')
		}
	}
} )

chartModel.addSerie('Max', enableMax.value, true)
chartModel.addSerie('Min', enableMin.value, true)
chartModel.addSerie('Avg', enableAverage.value, true)
chartModel.addSerie('StdDev', enableStdDev.value, true)
chartModel.addSerie('TPS', enableTPS.value, true)
chartModel.addSerie('BPS', enableBPS.value, true)
chartModel.addSerie('AvgTPS', enableAvgTPS.value, true)
chartModel.addSerie('AvgBPS', enableAvgBPS.value, true)
chartModel.addSerie('Percentile', enablePercentile.value, true)
chartModel.addSerie('AvgResponseSize', enableAvgResponseSize.value, true)
chartModel.addSerie('Requests', enableRequests.value, false)
chartModel.addSerie('Running', enableRunning.value, false)
chartModel.addSerie('Completed', enableCompleted.value, false)
chartModel.addSerie('Queued', enableQueued.value, false)
chartModel.addSerie('Discarded', enableDiscarded.value, false)
chartModel.addSerie('Failed', enableFailed.value, false)
chartModel.legendColumns = 3

timeStats = new ValueStatistics( period.value * 60000 )
byteStats = new ValueStatistics( period.value * 60000 )

long max = 0
long min = Long.MAX_VALUE

agentData = [:]
agentStatistics = null

future = null
boolean connected = true

analyze = { message ->
	try {
		long timestamp = System.currentTimeMillis()
		
		if( !message.containsKey('TimeTaken') )
			return
		
		String sourceID = message['id'] == null ? message['ID']:message['id'] 
		
		if (!(sourceID == null) && !sourceIDs.contains(sourceID)) {
			sourceIDs.add(sourceID)
			availableSourceIDs.options = sourceIDs
		}
		
		if (currentSourceID.value == "none" || currentSourceID.value == sourceID) {
				long timeTaken = message['TimeTaken']
			timeStats.addValue( timestamp, timeTaken )
		
			long bytesCount = message['Bytes'] 
			if(bytesCount < 0 && message.containsKey('Response'))
				bytesCount = message['Response'].length
			if(bytesCount <= 0) bytesCount = 0
			byteStats.addValue( timestamp, bytesCount )
		}
	} catch(Exception e) {
		ex(e, 'Statistics -> analyze')
	}
}

onMessage = { o, i, m ->
	super.onTerminalMessage(o, i, m)
	if(i == remoteTerminal) {
		def data = new HashMap(m)
		data[AGENT_DATA_TIMESTAMP] = System.currentTimeMillis()
		agentData[o.label] = data
	}
	
	if( i == statisticsInput ) {
		if (  m.keySet().containsAll(["Requests", "Queued", "Running", "Completed", "Failed", "Discarded"]) ) {
			agentStatistics = new HashMap(m)
		} 
	}
}

onRelease = { 
	executor.shutdownNow()
	avgDisplay.release()
	minDisplay.release()
	maxDisplay.release()
	stdDevDisplay.release()
	tpsDisplay.release()
	bpsDisplay.release()
	avgTpsDisplay.release()
	avgBpsDisplay.release()
	percentileDisplay.release()
	avgRespSizeDisplay.release()
}

onConnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

onDisconnect = { outgoing, incoming ->
	connected = (inputTerminal.connections.size() > 0) || (statisticsInput.connections.size() > 0)
}

calculate = {
	if( !connected || !running )
		return
	
	long currentTime = System.currentTimeMillis()
	
	try {
		if( timeStats.size() > 0 || agentData.size() > 0 || agentStatistics?.size() > 0) {
			def message = newMessage()
			data = timeStats.getData( currentTime )
			message['Max'] = data['Max']
			message['Min'] = data['Min']
			message['Avg'] = data['Avg']
			message['Std-Dev'] = data['Std-Dev']
			message['Tps'] = data['Tps']
			message['Avg-Tps'] = data['Avg-Tps']
			message['Percentile'] = data['Percentile']
			
			bdata = byteStats.getData( currentTime )
			message['Bps'] = bdata['Vps']
			message['Avg-Bps'] = bdata['Avg-Vps']
			message['AvgResponseSize'] = bdata['AvgResponseSize']
			message['id'] = "test"
			
			message['Timestamp'] = currentTime
			message['ID'] = currentSourceID.value
			send(output, message)
			
			if (agentStatistics != null) {
				message['Requests'] = agentStatistics['Requests']
				message['Running'] = agentStatistics['Running']
				message['Discarded'] = agentStatistics['Discarded']
				message['Queued'] = agentStatistics['Queued']
				message['Failed'] = agentStatistics['Failed']
				message['Completed'] = agentStatistics['Completed']
			}
			send(controllerTerminal, message)
		}
	} catch(Throwable e1) {
		ex(e1, 'calculate')
	}
	def oldKeys = agentData.keySet().findAll { agentData[it][AGENT_DATA_TIMESTAMP] < currentTime - AGENT_DATA_TTL }
	oldKeys.each { agentData.remove( it ) }
	if( controller  && ( timeStats.size() > 0 || agentData.size() > 0 ))
		updateChart( currentTime )
}

updateChart = { currentTime ->
	def data = [:]
	if( selectedAgent.value == AGGREGATE ) {
		try {
			int count = 0
			if (inputTerminal.connections.size() > 0 || statisticsInput.connections.size() > 0) {
				for( d in agentData.values() ) {
					if( !d.isEmpty() ) {	
						data['Max'] = Math.max( d['Max'] ?: 0, data['Max'] ?: 0 )
						data['Min'] = Math.min( d['Min'] ?: Long.MAX_VALUE, data['Min'] ?: Long.MAX_VALUE )
						data['Avg'] = (data['Avg'] ?: 0) + (d['Avg'] ?: 0)
						data['Std-Dev'] = (data['Std-Dev'] ?: 0) + (d['Std-Dev'] ?: 0)
						data['Tps'] = (data['Tps'] ?: 0) + (d['Tps'] ?: 0)
						data['Avg-Tps'] = (data['Avg-Tps'] ?: 0) + (d['Avg-Tps'] ?: 0)
						data['Bps'] = (data['Bps'] ?: 0) + (d['Bps'] ?: 0)
						data['Avg-Bps'] = (data['Avg-Bps'] ?: 0) + (d['Avg-Bps'] ?: 0)
						data['Percentile'] = (data['Percentile'] ?: 0) + (d['Percentile'] ?: 0)
						data['AvgResponseSize'] = (data['AvgResponseSize'] ?: 0) + (d['AvgResponseSize'] ?: 0)
						data['Requests'] = (data['Requests'] ?:  0) + (d['Requests']?:0)
						data['Running'] = (data['Running'] ?:  0) + (d['Running']?:0) 
						data['Completed'] = (data['Completed'] ?: 0) + (d['Completed']?:0)
						data['Queued'] = (data['Queued'] ?: 0) + (d['Queued']?:0)
						data['Discarded'] = (data['Discarded'] ?: 0) + (d['Discarded']?:0)
						data['Failed'] = (data['Failed'] ?: 0) + (d['Failed']?:0)
						count++
					}
				}
			}
			if( count != 0 ) {
				data['Avg'] /= count
				data['Std-Dev'] /= count
			}
		} catch( e ) { ex(e, 'Aggregating')
		}
	} else {
		data = agentData[selectedAgent.value]
	}
	if(data == null || data.isEmpty()) {
		return
	}
	try {
		if (inputTerminal.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableMax.value) chartModel.addPoint(0, currentTime, data['Max'] * timeScaleFactor)
			if(enableMin.value) chartModel.addPoint(1, currentTime, data['Min'] * timeScaleFactor)
			if(enableAverage.value) chartModel.addPoint(2, currentTime, data['Avg'] * timeScaleFactor)
			if(enableStdDev.value) chartModel.addPoint(3, currentTime, data['Std-Dev'] * timeScaleFactor)
			if(enableTPS.value) chartModel.addPoint(4, currentTime, data['Tps'])
			if(enableBPS.value) chartModel.addPoint(5, currentTime, data['Bps'] * bytesScaleFactor)
			if(enableAvgTPS.value) chartModel.addPoint(6, currentTime, data['Avg-Tps'])
			if(enableAvgBPS.value) chartModel.addPoint(7, currentTime, data['Avg-Bps'] * bytesScaleFactor)
			if(enablePercentile.value) chartModel.addPoint(8, currentTime, data['Percentile'])
			if(enableAvgResponseSize.value) chartModel.addPoint(9, currentTime, data['AvgResponseSize'] * bytesScaleFactor)
		}
		
		if (statisticsInput.connections.size() > 0 || remoteTerminal.connections.size() > 0  ) {
			if(enableRequests.value) chartModel.addPoint(10, currentTime, data['Requests'])
			if(enableRunning.value) chartModel.addPoint(11, currentTime, data['Running'])
			if(enableCompleted.value) chartModel.addPoint(12, currentTime, data['Completed'])
			if(enableQueued.value) chartModel.addPoint(13, currentTime, data['Queued'])
			if(enableDiscarded.value) chartModel.addPoint(14, currentTime, data['Discarded'])
			if(enableFailed.value) chartModel.addPoint(15, currentTime, data['Failed'])
		}
		
		if (inputTerminal.connections.size() > 0) {
			avgDisplay.setArgs((float)data['Avg']  * timeScaleFactor)
			minDisplay.setArgs((float)data['Min']  * timeScaleFactor)
			maxDisplay.setArgs((float)data['Max'] * timeScaleFactor)
			stdDevDisplay.setArgs((float)data['Std-Dev'] * timeScaleFactor)
			tpsDisplay.setArgs((float)data['Tps'])
			bpsDisplay.setArgs((float)data['Bps'] * bytesScaleFactor)
			avgTpsDisplay.setArgs((float)data['Avg-Tps'])
			avgBpsDisplay.setArgs((float)data['Avg-Bps'] * bytesScaleFactor)
			percentileDisplay.setArgs((float)data['Percentile'])
			avgRespSizeDisplay.setArgs((float)data['AvgResponseSize']  * bytesScaleFactor)
		}
	} catch( e ) {
		e.printStackTrace()
	}

}

ex = {t, m ->
	println('-------------------------------')
	println("exception in $m method in groovy")
	println("type: $t")
	println('stacktrace:')
	boolean first = true
	for(item in t.stackTrace){
		if(first) {
			println(item)
			first = false
		} else {
			println("\t$item")
		}
	}
	println('-------------------------------')
}

schedule = {
	future?.cancel( true )
	future = executor.scheduleAtFixedRate( calculate, rate.value, rate.value, TimeUnit.MILLISECONDS )
}

addEventListener(PropertyEvent) { event ->
	try {
		if (event.event == PropertyEvent.Event.VALUE) {
			if(event.property == rate) {
				xRange.setRate(rate.value)
				schedule()
			}
			else if(event.property == chartPeriod) {
				xRange.setPeriod(chartPeriod.value * 60000)
			}
			else if(event.property == enableMin) {
				chartModel.enableSerie('Min', enableMin.value)
				buildSignature()
			}
			else if(event.property == enableMax) {
				chartModel.enableSerie('Max', enableMax.value)
				buildSignature()
			}
			else if(event.property == enableAverage) {
				chartModel.enableSerie('Avg', enableAverage.value)
				buildSignature()
			}
			else if(event.property == enableStdDev) {
				chartModel.enableSerie('StdDev', enableStdDev.value)
				buildSignature()
			}
			else if(event.property == enableTPS) {
				chartModel.enableSerie('TPS', enableTPS.value)
				buildSignature()
			}
			else if(event.property == enableBPS) {
				chartModel.enableSerie('BPS', enableBPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgTPS) {
				chartModel.enableSerie('AvgTPS', enableAvgTPS.value)
				buildSignature()
			}
			else if(event.property == enableAvgBPS) {
				chartModel.enableSerie('AvgBPS', enableAvgBPS.value)
				buildSignature()
			}
			else if(event.property == enablePercentile) {
				chartModel.enableSerie('Percentile', enablePercentile.value)
				buildSignature()
			}
			else if(event.property == enableAvgResponseSize) {
				chartModel.enableSerie('AvgResponseSize', enableAvgResponseSize.value)
				buildSignature()
			}
			else if(event.property == enableRequests) {
				chartModel.enableSerie('Requests', enableRequests.value)
			}
			else if(event.property == enableRunning) {
				chartModel.enableSerie('Running', enableRunning.value)
			}
			else if(event.property == enableCompleted) {
				chartModel.enableSerie('Completed', enableCompleted.value)
			}
			else if(event.property == enableQueued) {
				chartModel.enableSerie('Queued', enableQueued.value)
			}
			else if(event.property == enableDiscarded) {
				chartModel.enableSerie('Discarded', enableDiscarded.value)
			}
			else if(event.property == enableFailed) {
				chartModel.enableSerie('Failed', enableFailed.value)
			}
		}
	}
	catch(Throwable e2){
		ex(e2, 'addEventListener')
	}
}

buildSignature = {
	def signature = [:]
	if(enableAverage.value) signature['Avg'] = Long
	if(enableMin.value) signature['Min'] = Long
	if(enableMax.value) signature['Max'] = Long
	if(enableTPS.value) signature['Tps'] = Double
	if(enableBPS.value) signature['Bps'] = Double
	if(enableAvgTPS.value) signature['Avg-Tps'] = Double
	if(enableAvgBPS.value) signature['Avg-Bps'] = Long
	if(enableStdDev.value) signature['Std-Dev'] = Long
	if(enablePercentile.value) signature['Percentile'] = Long
	if(enablePercentile.value) signature['AvgResponseSize'] = Long
	setSignature(output, signature)
}

resetComponent = {
	chartModel.clear()
	sourceIDs = ["none"]
	currentSourceID.value = "none"
	availableSourceIDs.options = sourceIDs 
	avgDisplay.setArgs(0f)
	minDisplay.setArgs(0f)
	maxDisplay.setArgs(0f)
	stdDevDisplay.setArgs(0f)
	tpsDisplay.setArgs(0f)
	bpsDisplay.setArgs(0f)
	avgTpsDisplay.setArgs(0f)
	avgBpsDisplay.setArgs(0f)
	percentileDisplay.setArgs(0f)
	avgRespSizeDisplay.setArgs(0f)
}

resetBuffers = {
	timeStats.reset()
	byteStats.reset()
	agentData = [:]
	agentStatistics = [:]
}

fixOptions = {
	def options = [ AGGREGATE ]
	options.addAll( agentTerminals.collect { it.label }.sort() )
	availableAgents.options = options
}

addEventListener( ActionEvent ) { event ->
	if( event.key == 'RESET' ) resetComponent()
	else if( event.key == 'STOP' ) {
		agentData?.clear() // this should never be null but just in case
		agentStatistics?.clear() // this could be null, so it needs check
		if( !controller )
			send( controllerTerminal, newMessage() )
	}
	//else if ( event.key == 'START' ) schedule()
	chartModel.setTestRunning( running )
}

addEventListener( CollectionEvent ) { event ->
	if( event.key == ComponentContext.AGENT_TERMINALS ) {
		resetComponent()
		fixOptions()
	}
}

//Layout
layout(layout:'fillx, wrap 2') {
	node( widget: 'chartWidget', constraints: "spanx 2, wrap", model: chartModel )
	property( property: selectedAgent, label: 'View statistics from', options: availableAgents, widget:'comboBox' )
	property( property: currentSourceID, label: 'Source ID', options: availableSourceIDs, widget:'comboBox', 
		contstraints: "w 100!" )
}

compactLayout {
	box( widget:'display', layout:'align left, wrap 5' ) {
		node( label:'Average ', fString:avgDisplay, constraints:'w 60!' )
		node( label:'Minimum ', fString:minDisplay, constraints:'w 60!' )
		node( label:'Maximum ', fString:maxDisplay, constraints:'w 60!' )
		node( label:'Std Dev ', fString:stdDevDisplay, constraints:'w 60!' )
		node( label:'TPS     ', fString:tpsDisplay, constraints:'w 60!' )
		node( label:'BPS     ', fString:bpsDisplay, constraints:'w 60!' )
		node( label:'Avg TPS ', fString:avgTpsDisplay, constraints:'w 60!' )
		node( label:'Avg BPS ', fString:avgBpsDisplay, constraints:'w 60!' )
		node( label:'Perc    ', fString:percentileDisplay, constraints:'w 60!' )
		node( label:'Avg Size', fString:avgRespSizeDisplay, constraints:'w 60!' )
	}
}

settings( label: 'Properties' ) {
	property(property: addtoSummary, label: "Add last result to summary?")
	box {
		property(property: enableAverage, label: 'Enable Average' )
		property(property: enableMin, label: 'Enable Min' )
		property(property: enableMax, label: 'Enable Max' )
		property(property: enableStdDev, label: 'Enable Std Dev' )
		property(property: enableTPS, label: 'Enable TPS' )
		property(property: enableBPS, label: 'Enable BPS' )
		property(property: enableAvgTPS, label: 'Enable Average TPS' )
		property(property: enableAvgBPS, label: 'Enable Average BPS' )
		property(property: enablePercentile, label: '90% Percentile' )
		property(property: enableAvgResponseSize, label: 'Average Response Size' )
		property(property: currentSourceID, label: 'Source ID' )
	}
} 

settings( label: 'Statistics' ) {
	box {
		property(property: enableRequests, label: 'Enable Requests' )
		property(property: enableRunning, label: 'Enable Running' )
		property(property: enableCompleted, label: 'Enable Completed' )
		property(property: enableQueued, label: 'Enable Queued' )
		property(property: enableDiscarded, label: 'Enable Discarded' )
		property(property: enableFailed, label: 'Enable Failed' )
	}
} 

settings( label: "Periods" ) {
	property(property: rate, label: 'Refresh rate (ms)' )
	property(property: chartPeriod, label: 'Chart period (min)' )
	property(property: period, label: 'History (min)' )
} 

generateSummary = { chapter ->
	if (addtoSummary.value) {
		LTableModel table = new LTableModel(1, false);
		ArrayList values = new ArrayList();
		table.addColumn("SourceID");
		values.add(currentSourceID.value);
		if(enableAverage.value) {
			table.addColumn("Avg");
			values.add(data['Avg'].round(2));
		}
		if(enableMin.value) {
			table.addColumn("Min");
			values.add(data['Min']);
		}
		if(enableMax.value) {
			table.addColumn("Max");
			values.add(data['Max']);
		}
		if(enableTPS.value) {
			table.addColumn("TPS");
			values.add(data['Tps'].round(2));
		}
		if(enableBPS.value) {
			table.addColumn("BPS");
			values.add(bpsDisplay.toString());
		}
		if(enableAvgTPS.value) {
			table.addColumn("Avg TPS");
			values.add(data['Avg-Tps']);
		}
		if(enableAvgBPS.value) {
			table.addColumn("Avg BPS");
			values.add(avgBpsDisplay.toString());
		}
		if(enableStdDev.value) {
			table.addColumn("Std-Dev");
			values.add(data['Std-Dev'].round(2));
		}
		if(enablePercentile.value) {
			table.addColumn("Perc");
			values.add(data['Percentile'].round(2));
		}
		if(enableAvgResponseSize.value) {
			table.addColumn("Avg Size");
			values.add(data['AvgResponseSize']);
		}
		
		table.addRow(values);
		
		MutableSection sect = chapter.addSection(getLabel());
		sect.addTable(getLabel(), table)
   	}

}

//disable it here, because sometimes when you initialize chart
//whithout enabling series it wasn't working correctly, so it is
//safer to enable everythig first and then disable what is not needed
enableMax.value = false
enableMin.value = false
enableBPS.value = false
enableAvgTPS.value = false
enableAvgBPS.value = false
enablePercentile.value = false
enableAvgResponseSize.value = false
enableRequests.value = false
enableCompleted.value = false
enableDiscarded.value = false

buildSignature()
fixOptions()
schedule()
]]></con:property><con:property key="period" type="java.lang.Long">1</con:property><con:property key="rate" type="java.lang.Long">500</con:property><con:property key="chartPeriod" type="java.lang.Long">1</con:property><con:property key="enableAverage" type="java.lang.Boolean">true</con:property><con:property key="enableMin" type="java.lang.Boolean">false</con:property><con:property key="enableMax" type="java.lang.Boolean">false</con:property><con:property key="enableStdDev" type="java.lang.Boolean">true</con:property><con:property key="enableTPS" type="java.lang.Boolean">true</con:property><con:property key="enableBPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgTPS" type="java.lang.Boolean">false</con:property><con:property key="enableAvgBPS" type="java.lang.Boolean">false</con:property><con:property key="enablePercentile" type="java.lang.Boolean">false</con:property><con:property key="enableAvgResponseSize" type="java.lang.Boolean">false</con:property><con:property key="currentSourceID" type="java.lang.String">none</con:property><con:property key="addtoSummary" type="java.lang.Boolean">false</con:property><con:property key="selectedAgent" type="java.lang.String">Aggregate</con:property><con:property key="enableRequests" type="java.lang.Boolean">false</con:property><con:property key="enableRunning" type="java.lang.Boolean">true</con:property><con:property key="enableCompleted" type="java.lang.Boolean">false</con:property><con:property key="enableQueued" type="java.lang.Boolean">true</con:property><con:property key="enableDiscarded" type="java.lang.Boolean">false</con:property><con:property key="enableFailed" type="java.lang.Boolean">true</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Statistics</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Statistics.groovy</con:property><con:property key="_digest">1bb9588326ee735771fa719e20f0d6dd</con:property><con:property key="gui.layoutX">1286</con:property><con:property key="gui.layoutY">445</con:property><con:property key="gui.compact">true</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.components.soapui.MockServiceComponent" label="soapUI MockService" id="c1af622e-3b62-46db-b5ee-49dc008eaaa1"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="projectFile" type="java.io.File">D:\workspace\loadui-project\loadui-installer\src\main\resources\samples\getting-started-soapui-project.xml</con:property><con:property key="settingsFile" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">C:\Users\Ole\soapui-settings.xml</con:property><con:property key="mockService" type="java.lang.String">MockService 1</con:property><con:property key="path" type="java.lang.String">/</con:property><con:property key="port" type="java.lang.String">8081</con:property><con:property key="addRequest" type="java.lang.Boolean">false</con:property><con:property key="addResponse" type="java.lang.Boolean">false</con:property><con:property key="projectRelativePath" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">getting-started-soapui-project.xml</con:property><con:property key="useProjectRelativePath" type="java.lang.Boolean">true</con:property><con:property key="projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="_projectPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">soapUI MockService</con:property><con:property key="gui.layoutX">1586</con:property><con:property key="gui.layoutY">1217</con:property><con:property key="gui.compact">false</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion" id="23dd344a-2b24-47e7-9ffb-1d467cd98bb8" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )
createProperty( 'includeAssertedMessage', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			if( !options.contains(key))
				options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(message, timestamp, null)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(message, timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(message, timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {message, timestamp, value ->
	failureCounter.increment()
	
	m = includeAssertedMessage.value ? message : outMsg
	
	m["Assert"] = valueToAssert
	m["Min"] = min.value
	m["Value"] = value
	m["Max"] = max.value
	m["Period"] = period.value
	m["Tolerance"] = tolerance.value
	m["Timestamp"] = timestamp
	send(output, m)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
	property(property: includeAssertedMessage, label: 'Include original message in failure messages' )
}</con:property><con:property key="value" type="java.lang.String">TimeTaken</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">100</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property><con:property key="includeAssertedMessage" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">ef0c272045af2bd2c959d2797ae6fd8f</con:property><con:property key="gui.layoutX">390</con:property><con:property key="gui.layoutY">847</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (2)" id="a495e792-6895-451a-a483-1495eefdff1e" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )
createProperty( 'includeAssertedMessage', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			if( !options.contains(key))
				options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(message, timestamp, null)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(message, timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(message, timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {message, timestamp, value ->
	failureCounter.increment()
	
	m = includeAssertedMessage.value ? message : outMsg
	
	m["Assert"] = valueToAssert
	m["Min"] = min.value
	m["Value"] = value
	m["Max"] = max.value
	m["Period"] = period.value
	m["Tolerance"] = tolerance.value
	m["Timestamp"] = timestamp
	send(output, m)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
	property(property: includeAssertedMessage, label: 'Include original message in failure messages' )
}</con:property><con:property key="value" type="java.lang.String">Avg</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">50</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property><con:property key="includeAssertedMessage" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">ef0c272045af2bd2c959d2797ae6fd8f</con:property><con:property key="gui.layoutX">1413</con:property><con:property key="gui.layoutY">841</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log" id="b8551838-14d3-4e55-8fc8-06616eecae8b" category="output"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Tabulates incoming messages and creates a csv output 
 * 
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.0
 * @nonBlocking true
 */

import com.eviware.loadui.api.ui.table.LTableModel
import com.eviware.loadui.api.events.PropertyEvent
import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import javax.swing.event.TableModelListener
import javax.swing.event.TableModelEvent

import com.eviware.loadui.api.summary.MutableSection

createProperty 'maxRows', Long, 1000
createProperty 'fileName', File 
createProperty 'saveFile', Boolean, false
createProperty 'follow', Boolean, false
createProperty 'summaryRows', Long, 0
createProperty 'appendSaveFile', Boolean, false

myTableModel = new LTableModel(1000, follow.value as Boolean)
myTableModel.addTableModelListener(new TableModelListener() {
	public void tableChanged(TableModelEvent e){
		updateFollow()
	}
});

saveFileName = fileName.value?.name

updateFollow = {
	follow.value = myTableModel.follow
}

rowsDisplay = new DelayedFormattedString( '%d', 500, value { myTableModel.rowCount } )
fileDisplay = new DelayedFormattedString( '%s', 500, value { saveFileName ?: '-' } )

output = { message ->
	message.keySet().each { k -> myTableModel.addColumn k }
	lastMsgDate = new Date();
	
	result = myTableModel.addRow(message) 
	if( result && saveFile.value ) {
		try {
			char sep = ','
			
			writer = new CSVWriter(new FileWriter(saveFileName, true), sep);
			String[] entries = myTableModel.lastRow
			writer.writeNext(entries)
			writer.flush()
		} catch (Exception e) {
			println(e.printStackTrace())
		} finally {
			writer.close()
		}
	}
}

onRelease = {
	rowsDisplay.release()
	fileDisplay.release()
}

addEventListener( PropertyEvent ) { event ->
	if( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property.key == 'maxRows' ) {
			myTableModel.maxRow = maxRows.value
		}
		else if( event.property.key == 'follow' && myTableModel.follow != follow.value as Boolean) {
			myTableModel.follow = follow.value
		} else if( event.property == fileName ) {
			saveFileName = fileName.value?.name
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "START" ) {
		saveFileName = fileName.value?.name
		if( !appendSaveFile.value && saveFileName != null) {
			def ext = saveFileName.substring(saveFileName.lastIndexOf("."), saveFileName.length())
			def name = saveFileName.substring(0, saveFileName.lastIndexOf("."))
			def timestamp = new Date().time
			saveFileName = "${fileName.value.parent}${File.separator}$name-$timestamp$ext"
			println saveFileName
		}
	}

	if ( event.key == "RESET" ) {
		myTableModel.reset()
	}
}

layout { 
	node( widget:'tableWidget', model:myTableModel ) 
}

compactLayout {
	box( widget:'display' ) {
		node( label: 'Rows', fString:rowsDisplay )
		node( label: 'Output File', fString:fileDisplay )
	}
}

// settings
settings( label: "General" ) {
	box {
		property(property: maxRows, label: 'Max Rows in Table' )
	}
	box {
		property(property: summaryRows, label: 'Max Rows in Summary' )
	}	
}

settings(label:'Logging') {
	box {
		property(property: saveFile, label: 'Save Logs?' )
		property(property: fileName, label: 'Log File (Comma Separated) ' )
		property(property: appendSaveFile, label: 'Check to append selected file', )
		label('(If not appending file, its name will be used to generate new log files each time test is run.)')
	}
}

generateSummary = { chapter ->
	if (summaryRows.value > 0) {
   		MutableSection sect = chapter.addSection(getLabel())
   		sect.addTable(getLabel(), myTableModel.getLastRows(summaryRows.value))
   	}
}]]></con:property><con:property key="maxRows" type="java.lang.Long">1000</con:property><con:property key="fileName" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property key="saveFile" type="java.lang.Boolean">false</con:property><con:property key="follow" type="java.lang.Boolean">false</con:property><con:property key="summaryRows" type="java.lang.Long">0</con:property><con:property key="appendSaveFile" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\TableLog.groovy</con:property><con:property key="_digest">2301af2dfd07b34d11d95c6398e97de5</con:property><con:property key="gui.layoutX">782</con:property><con:property key="gui.layoutY">1114</con:property></con:attributes></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Assertion (1)" id="17f403d2-0707-4f26-8c0f-00fe25d5a1fd" category="analysis"><con:properties><con:property key="ModelItem.description" type="java.lang.String"/><con:property key="_script" type="java.lang.String">// 
// Copyright 2010 eviware software ab
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl5
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Checks for errors and increases global assertion count
 * 
 * @help http://www.loadui.org/Analysis/assertion-component.html
 * @category analysis
 * @nonBlocking true
 */

import java.util.LinkedList

import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.util.layout.DelayedFormattedString
import com.eviware.loadui.impl.layout.OptionsProviderImpl

import com.eviware.loadui.api.model.CanvasItem;

createOutput( 'output', 'Output for failed messages' )

def componentSignature = [
		"Assert" : String.class,
		"Min" : Long.class,
		"Value" : Long.class,
		"Max" : Long.class,
		"Period" : Long.class,
		"Tolerance" : Long.class,
		"Timestamp" : Long.class
		]
setSignature(output, componentSignature)

failureCounter = getCounter( CanvasItem.FAILURE_COUNTER );
totalCounter = getCounter( CanvasItem.ASSERTION_COUNTER );

//Properties
createProperty( 'value', String, "Select value" )
createProperty( 'min', Long, 0 )
createProperty( 'max', Long, 1000 )
createProperty( 'tolerance', Long, 1 )
createProperty( 'period', Long, 0 )

createProperty( 'sampleId', String, "" )
createProperty( 'failOnMissingID', Boolean, false )
createProperty( 'failOnMissingValue', Boolean, false )
createProperty( 'includeAssertedMessage', Boolean, false )

String valueToAssert = value.value

buffer = new LinkedList()

outMsg = newMessage()

OptionsProviderImpl provider = new OptionsProviderImpl([])

assertedResetValue = 0
failedResetValue = 0

assertedDisplay = new DelayedFormattedString( '%d', 500, value { totalCounter.get()-assertedResetValue } )
failedDisplay = new DelayedFormattedString( '%d', 500, value { failureCounter.get()-failedResetValue } )
valueDisplay = new DelayedFormattedString( '%s', 500, value { value.value } )
minDisplay = new DelayedFormattedString( '%d', 500, value { min.value } )
maxDisplay = new DelayedFormattedString( '%d', 500, value { max.value } )

onConnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

onDisconnect = { outgoing, incoming ->
	if( incoming == inputTerminal ){
		updateProviders()
	}
}

updateProviders = {
	def options = []
	for( conn in inputTerminal.connections ) {
		for( key in conn.outputTerminal.messageSignature.keySet() )
			if( !options.contains(key))
				options += key
	}
	provider.options = options
	if( !options.contains(value.value) )
		value.value = 'Select value'
}

onSignature = { outgoing, signature ->
	updateProviders()
}

analyze = { message ->
	try{
		long timestamp = System.currentTimeMillis()
		
		if(!message.containsKey(value.value)) {
			if( failOnMissingValue.value ) {
				raiseFailure(message, timestamp, null)
				totalCounter.increment()
			}
			return
		}
		
		double val = message[value.value]
		
		if( sampleId.value ?: "" != "" &amp;&amp; message[SampleCategory.SAMPLE_ID] != sampleId.value ) {
			if( failOnMissingID.value ) {
				raiseFailure(message, timestamp, val)
				totalCounter.increment()
			}
			return
		}
		
		if( val &lt; min.value || val > max.value ) {
			synchronized( buffer ) {
				buffer.addLast( timestamp )
				if( buffer.size() >= tolerance.value ) {
					def lit = buffer.listIterator()
					long entry = null
					//Remove old entries
					if( period.value > 0 ) {
						long oldest = timestamp - period.value * 1000
						while( lit.hasNext() ) if( lit.next() &lt; oldest ) lit.remove()
					}
				}
				
				if( buffer.size() >= tolerance.value ) {
					raiseFailure(message, timestamp, val)
					buffer.clear()
				}
			}
		}
		
		totalCounter.increment()
	}
	catch(Exception e){
		ex(e, "Assertion -> analyze")
	}
}

raiseFailure = {message, timestamp, value ->
	failureCounter.increment()
	
	m = includeAssertedMessage.value ? message : outMsg
	
	m["Assert"] = valueToAssert
	m["Min"] = min.value
	m["Value"] = value
	m["Max"] = max.value
	m["Period"] = period.value
	m["Tolerance"] = tolerance.value
	m["Timestamp"] = timestamp
	send(output, m)
}

onRelease = { 
	assertedDisplay.release()
	failedDisplay.release()
}

resetComponent = {
	buffer.clear()
	assertedResetValue = 0
	failedResetValue = 0
}

addEventListener( PropertyEvent ) { event ->
	if ( event.event == PropertyEvent.Event.VALUE ) {
		if( event.property == value ) {
			valueToAssert = value.value
			resetComponent()
		}
		else if( event.property == min ) {
			if(max.value &lt; min.value){
				max.value = min.value
			}
		}
	}
}

addEventListener( ActionEvent ) { event ->
	if ( event.key == "RESET" ) {
		resetComponent()
	}
}

ex = {t, m ->
	println("-------------------------------")
	println("exception in ${m} method in groovy")
	println("type: ${t}")
	println("message: ${t.getMessage()}")
	println("stacktrace:")
	int tCnt = 0
	for(item in t.getStackTrace()){
		if(tCnt == 0){
			println("${item}")
		}
		else{
			println("\t${item}")
		}
		tCnt++
	}
	println("-------------------------------")
}

//Layout
layout {
	property( property: value, widget: 'comboBox', label: 'Value', options: provider, constraints: 'w 100!' )
	separator( vertical: true )
//	box {
		property( property: min, label: 'Min', min: 0 )
		property( property: max, label: 'Max', min: 0 )
//	}
	separator( vertical: true )
//	box {
//		property( property: tolerance, label: 'Tolerance', min: 1, constraints:'wrap 1')
//		property( property: period, label: 'Period', min: 0 )
//	}
//	separator( vertical: true )
	box(layout:'wrap, ins 0') {
		box( widget:'display' ) {
			node( label:'Asserted', fString: assertedDisplay, constraints:'w 60!' )
			node( label:'Failed', fString: failedDisplay, constraints:'w 60!' )
		}
		action( 
			label: 'Reset', 
			action: {
				buffer.clear()
				assertedResetValue = totalCounter.get()
				failedResetValue = failureCounter.get()
			}, 
			constraints:'align right'
		)
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Value', fString: valueDisplay, constraints:'w 60!' )
		node( label:'Min', fString: minDisplay, constraints:'w 60!' )
		node( label:'Max', fString: maxDisplay, constraints:'w 60!' )
		node( label:'Asserted', fString: assertedDisplay )
		node( label:'Failed', fString: failedDisplay )
	}
}

settings( label: "General" ) {
	property( property: tolerance, label: 'Tolerance', min: 1)
	property( property: period, label: 'Period' )
	property(property: failOnMissingValue, label: 'Fail on missing value' )
	property(property: sampleId, label: 'Sample ID' )
	property(property: failOnMissingID, label: 'Fail on mismatching ID' )
	property(property: includeAssertedMessage, label: 'Include original message in failure messages' )
}</con:property><con:property key="value" type="java.lang.String">Discarded</con:property><con:property key="min" type="java.lang.Long">0</con:property><con:property key="max" type="java.lang.Long">0</con:property><con:property key="tolerance" type="java.lang.Long">1</con:property><con:property key="period" type="java.lang.Long">0</con:property><con:property key="sampleId" type="java.lang.String"/><con:property key="failOnMissingID" type="java.lang.Boolean">false</con:property><con:property key="failOnMissingValue" type="java.lang.Boolean">false</con:property><con:property key="includeAssertedMessage" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Assertion</con:property><con:property key="_scriptFile">D:\workspace\loadui-project\loadui-installer\target\controller\script-components\Assertion.groovy</con:property><con:property key="_digest">ef0c272045af2bd2c959d2797ae6fd8f</con:property><con:property key="gui.layoutX">901</con:property><con:property key="gui.layoutY">845</con:property></con:attributes></con:component><con:connection outputTerminalId="d3bcc7bc-0cc5-4156-b35e-34b23d579654/triggerTerminal" inputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/triggerTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/resultTerminal" inputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/inputTerminal"/><con:connection outputTerminalId="b612904b-3546-4a11-919c-2ff7d2f974b5/output" inputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/inputTerminal"/><con:connection outputTerminalId="a495e792-6895-451a-a483-1495eefdff1e/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="23dd344a-2b24-47e7-9ffb-1d467cd98bb8/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/><con:connection outputTerminalId="597e6093-d97f-4f73-ab9d-de68f912b974/statisticsOutput" inputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/inputTerminal"/><con:connection outputTerminalId="17f403d2-0707-4f26-8c0f-00fe25d5a1fd/output" inputTerminalId="b8551838-14d3-4e55-8fc8-06616eecae8b/inputTerminal"/></con:scene></con:loadui-project>